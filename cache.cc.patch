*** cache.cc	2013-02-15 01:51:44.000000000 +0800
--- /home/hero/bypassrelated/macsim/src/cache.cc	2013-08-01 17:26:22.423532835 +0800
***************
*** 61,66 ****
--- 61,70 ----
  {
  }
  
+ //rht_entry_c::rht_entry_c()
+ //    :m_valid(false), m_last_access_time(0)
+ //{
+ //}
  
  cache_set_c::cache_set_c(int assoc)
  {
***************
*** 68,78 ****
--- 72,92 ----
    m_assoc = assoc;
  }
  
+ //rht_entry_c::rht_set_c(int assoc)
+ //{
+ //    m_entry = new rht_entry_c[assoc];
+ //    m_assoc = assoc;
+ //}
+ 
  cache_set_c::~cache_set_c()
  {
    delete m_entry;
  }
  
+ //rht_set_c::~rht_set_c()
+ //{
+ //    delete m_entry;
+ //}
  
  ///////////////////////////////////////////////////////////////////////////////////////////////
  
***************
*** 80,86 ****
  // cache_c constructor
  cache_c::cache_c(string name, int num_set, int assoc, int line_size, 
      int data_size, int bank_num, bool cache_by_pass, int core_id, Cache_Type cache_type_info,
!     bool enable_partition, int num_tiles, int interleave_factor, macsim_c* simBase) 
  {
    m_simBase = simBase;
  
--- 94,100 ----
  // cache_c constructor
  cache_c::cache_c(string name, int num_set, int assoc, int line_size, 
      int data_size, int bank_num, bool cache_by_pass, int core_id, Cache_Type cache_type_info,
!     bool enable_partition, macsim_c* simBase) 
  {
    m_simBase = simBase;
  
***************
*** 93,100 ****
    m_num_sets   = num_set;
    m_line_size  = line_size;
    m_cache_type = cache_type_info; 
-   m_num_tiles   = (num_tiles > 0) ? num_tiles : 1;
-   m_interleave_factor = interleave_factor;
  
    // Setting some fields to make indexing quick
    m_set_bits    = log2_int(num_set);
--- 107,112 ----
***************
*** 103,124 ****
    m_tag_mask    = ~m_set_mask;  /* use after shifting */
    m_offset_mask = N_BIT_MASK(m_shift_bits); /* use before shifting */
    m_bank_num    = bank_num; 
-   if ((m_num_tiles & (m_num_tiles - 1)) == 0) {
-     m_tile_bits = log2_int(m_num_tiles);
-   }
-   else {
-     m_tile_bits = 0;
-   }
-   /*
-   if (m_tile_bits) {
-     m_interleave_bits = log2_int(m_interleave_factor);
-   }
-   else {
-     m_interleave_bits = 0;
-   }
-   */
-   m_interleave_bits = log2_int(m_interleave_factor);
-   m_interleave_mask = N_BIT_MASK(m_interleave_bits);
  
    // Allocating memory for all the sets (pointers to line arrays)
    m_core_id = core_id; 
--- 115,120 ----
***************
*** 153,158 ****
--- 149,213 ----
    m_enable_partition = enable_partition;
  }
  
+ //rht constructor
+ //rht_c::rht_c(string name, int num_set, int assoc, int line_size, 
+ //     int bank_num, bool rht_turned_off, int core_id, Cache_Type cache_type_info,
+ //    bool enable_partition, macsim_c* simBase) 
+ //{
+ //  m_simBase = simBase;
+ //
+ //  DEBUG("Initializing cache called '%s'.\n", name.c_str());
+ //
+ //  // Setting Basic Parameters sent via caller
+ //  m_name        = name;
+ //  m_data_size  = data_size;
+ //  m_assoc      = assoc;
+ //  m_num_sets   = num_set;
+ //  m_line_size  = line_size;
+ //  m_cache_type = cache_type_info; 
+ //
+ //  // Setting some fields to make indexing quick
+ //  m_set_bits    = log2_int(num_set);
+ //  m_shift_bits  = log2_int(line_size); /* use for shift amt. */
+ //  m_set_mask    = N_BIT_MASK(log2_int(num_set)); /* use after shifting */
+ //  m_tag_mask    = ~m_set_mask;  /* use after shifting */
+ //  m_offset_mask = N_BIT_MASK(m_shift_bits); /* use before shifting */
+ //  m_bank_num    = bank_num; 
+ //
+ //  // Allocating memory for all the sets (pointers to line arrays)
+ //  m_core_id = core_id; 
+ //
+ //  // Allocating memory for all of the lines in each set
+ //  m_set = new rht_set_c* [m_num_sets];  
+ //
+ //  for (int ii = 0; ii < m_num_sets; ++ii) {
+ //    m_set[ii] = new rht_set_c(m_assoc); 
+ //
+ //    // Allocating memory for all of the data elements in each line
+ //    for (int jj = 0; jj < assoc; ++jj) {
+ //      m_set[ii]->m_entry[jj].m_valid          = false;
+ //     // m_set[ii]->m_entry[jj].m_access_counter = false;
+ //      if (data_size > 0) {
+ //        m_set[ii]->m_entry[jj].m_data = (void *)malloc(data_size);
+ //        memset(m_set[ii]->m_entry[jj].m_data, 0, data_size);
+ //      } 
+ //      else {
+ //        m_set[ii]->m_entry[jj].m_data = INIT_CACHE_DATA_VALUE;
+ //      }
+ //      //m_set[ii]-> m_entry[jj].m_ib_tag        = 0;
+ //      //m_set[ii]-> m_entry[jj].m_vb_tag        = 0;
+ //    }
+ //  }
+ //
+ //  // Initializing Last update count
+ //  m_rht_turned_off = rht_turned_off;
+ //
+ //  m_num_cpu_line = 0;
+ //  m_num_gpu_line = 0;
+ //  m_insert_count = 0;
+ //
+ //  m_enable_partition = enable_partition;
+ //}
  
  cache_c::~cache_c()
  {
***************
*** 167,198 ****
    delete[] m_set;
  }
  
! 
  // parse tag address and set index from an address
  void cache_c::find_tag_and_set(Addr addr, Addr *tag, int *set) 
  {
!   if (m_num_tiles == 1) {
!     *tag = addr >> m_shift_bits & m_tag_mask;
!     *set = addr >> m_shift_bits & m_set_mask;
!   }
!   else {
!     Addr mod_addr;
!     if (m_tile_bits) {
!       // 1 - 1 does the same as 2, but in case of 2 we cannot use shift operator because m_num_tiles is not a power of two
!       mod_addr = ((addr >> (m_interleave_bits + m_tile_bits)) << m_interleave_bits) | (addr & m_interleave_mask);
!     }
!     else {
!       // 2
!       // this works even when m_num_tiles = 1
!       mod_addr = (((addr >> m_interleave_bits) / m_num_tiles) << m_interleave_bits) | (addr & m_interleave_mask);
!     }
!     *tag = mod_addr >> m_shift_bits & m_tag_mask;
!     *set = mod_addr >> m_shift_bits & m_set_mask;
!     //cout << hex << addr << " mod addr " << mod_addr << " imask " << m_interleave_mask << " addr & imask " << (addr & m_interleave_mask) << " other part short " << ((addr >> m_interleave_bits) / m_num_tiles)  << " other part " << (((addr >> m_interleave_bits) / m_num_tiles) << m_interleave_bits) << " num tiles " << dec << m_num_tiles << " tile bits " << m_tile_bits << " tile " << dec << ((m_num_tiles > 1) ? ((addr >> m_interleave_bits) % m_num_tiles) : 0) <<  " tag mask " << hex << m_tag_mask << " tag " << *tag << " set mask " << m_set_mask << " set " << *set << dec << "\n";
!   }
  }
  
  
  // access the cache
  void* cache_c::access_cache(Addr addr, Addr *line_addr, bool update_repl, int appl_id) 
  {
--- 222,255 ----
    delete[] m_set;
  }
  
! //rht_c::~rht_c()
! //{
! //  for (int ii = 0; ii < m_num_sets; ++ii) {
! //   for (int jj = 0; jj < m_assoc; ++jj) {
! //      if (m_data_size > 0) {
! //        free(m_set[ii]->m_entry[jj].m_data);
! //      }
! //    }
! //    delete m_set[ii];
! //  }
! //  delete[] m_set;
! //}
  // parse tag address and set index from an address
  void cache_c::find_tag_and_set(Addr addr, Addr *tag, int *set) 
  {
!   *tag = addr >> m_shift_bits & m_tag_mask;
!   *set = addr >> m_shift_bits & m_set_mask;
  }
  
  
+ // constd add
+ //void rht_c::find_tag_and_set(Addr addr, Addr *tag, int *set)
+ //{
+ //    *tag = addr >> m_shift_bits & m_tag_mask;
+ //    *set = addr >> m_shift_bits & m_set_mask;
+ //}
+ 
+ 
  // access the cache
  void* cache_c::access_cache(Addr addr, Addr *line_addr, bool update_repl, int appl_id) 
  {
***************
*** 238,243 ****
--- 295,398 ----
    return NULL;
  }
  
+ 
+ //check if there is an invalid entry to record the incoming block.
+ //bool rht_c::has_invalid_entry()
+ //{
+ //    rht_entry_c     *line ;
+ //    for(int ii = 0; ii < m_num_sets; ++ii )
+ //    {
+ //        for(int jj = 0; jj < m_assoc; ++jj)
+ //        {
+ //            line = &(m_set[ii]-> m_entry[jj]);
+ //            if (line -> m_valid )
+ //                continue;
+ //            else
+ //                return true;
+ //        }
+ //    }
+ //
+ //    return false;
+ //}
+ 
+ 
+ //check if the given address need to be recorded
+ //bool rht_c::record(Addr addr)
+ //{
+ //    //there is at least one invalid entry
+ //    if (has_invalid_entry())
+ //    {
+ //        return true;
+ //    }
+ //    //no invalid entry, so we give a low probability to record the incoming miss
+ //    else
+ //    {
+ //        //here, give the implementation of low probability
+ //    }
+ //}
+ 
+ 
+ 
+ //void* rht_c::access_rht(Addr addr, Addr *line_addr, bool update_repl, int appl_id) 
+ //{
+ //  // Check if cache by pass is set. If so return NULL.
+ //  if (m_rht_turned_off)
+ //    return NULL;
+ //
+ //  Addr tag;
+ //  int set;
+ //
+ //  // Get Tag and set to check if the addr exists in cache
+ //  find_tag_and_set(addr, &tag, &set);
+ //  *line_addr = base_cache_line (addr);
+ //
+ //  if (update_repl)
+ //    update_cache_on_access(*line_addr, set, appl_id);
+ //
+ //  // Walk through the set
+ //  for (int ii = 0; ii < m_assoc; ++ii) {
+ //    // For each line in based on associativity
+ //    cache_entry_c * line = &(m_set[set]->m_entry[ii]);
+ //
+ //    // Check for matching tag and validity
+ //    if (line->m_valid && line->m_tag == tag) {
+ //      // If hit, then return  
+ //      assert(line->m_data);
+ //
+ //      if (update_repl) {
+ //        // If prefetch is set mark it as used  
+ //        if (line->m_pref) {
+ //          line->m_pref = false;
+ //        }
+ //        update_line_on_hit(line, set, appl_id);
+ //      }   
+ //
+ //      return line->m_data;
+ //    }
+ //  }
+ //
+ //  if (update_repl)
+ //    update_cache_on_miss(set, appl_id);
+ //
+ //  return NULL;
+ //}
+ 
+ //void rht_c::update_cache_on_access(Addr line_addr, int set, int appl_id)
+ //{
+ //}
+ //
+ //
+ //void rht_c::update_line_on_hit(cache_entry_c* line, int set, int appl_id)
+ //{
+ //  line->m_last_access_time = CYCLE;
+ //}
+ //
+ //
+ //void rht_c::update_cache_on_miss(int set_id, int appl_id)
+ //{
+ //  // do nothing
+ //}
+ 
  void cache_c::update_cache_on_access(Addr line_addr, int set, int appl_id)
  {
  }
***************
*** 494,516 ****
  
  // get bank id from an address
  int cache_c::get_bank_num(Addr addr) 
! {
!   if (m_num_tiles == 1) {
!     return addr >> m_shift_bits & N_BIT_MASK(log2_int(m_bank_num)); 
!   }
!   else {
!     Addr mod_addr;
!     if (m_tile_bits) {
!       // 1 - 1 does the same as 2, but in case of 2 we cannot use shift operator because m_num_tiles is not a power of two
!       mod_addr = ((addr >> (m_interleave_bits + m_tile_bits)) << m_interleave_bits) | (addr & m_interleave_mask);
!     }
!     else {
!       // 2 - 1 does the same as 2, but in case of 2 we cannot use shift operator because m_num_tiles is not a power of two
!       // this works even when m_num_tiles = 1
!       mod_addr = (((addr >> m_interleave_bits) / m_num_tiles) << m_interleave_bits) | (addr & m_interleave_mask);
!     }
!     return mod_addr >> m_shift_bits & N_BIT_MASK(log2_int(m_bank_num)); 
!   }
  }
  
  
--- 649,656 ----
  
  // get bank id from an address
  int cache_c::get_bank_num(Addr addr) 
! { 
!   return addr >> m_shift_bits & N_BIT_MASK(log2_int(m_bank_num)); 
  }
  
  
***************
*** 540,542 ****
--- 680,808 ----
      cout << "CACHE::L" << id << " cpu: " << m_num_cpu_line << " gpu: " << m_num_gpu_line << "\n";
    }
  }
+ 
+ 
+ //rht related constd added
+ //rht_c::rht_c(string name, int num_set, int assoc, int line_size, 
+ //    int data_size, int bank_num, bool cache_by_pass, int core_id, Cache_Type cache_type_info,
+ //    bool enable_partition, macsim_c* simBase)
+ //{
+ //    cache_c(name, num_set, assoc, line_size,data_size, bank_num, cache_by_pass,
+ //            core_id, cache_type_info, enable_partition, simBase);
+ //}
+ //
+ //rht_c::~rht_c()
+ //{
+ //    ~cache_c();
+ //}
+ //rht_c::rht_c(string name, int num_set, int assoc, int line_size, 
+   //  int data_size, int bank_num, bool cache_by_pass, int core_id, Cache_Type cache_type_info,
+     // macsim_c* simBase)
+ //{
+ //  m_simBase = simBase;
+ //
+ //  DEBUG("Initializing cache called '%s'.\n", name.c_str());
+ //
+ //  // Setting Basic Parameters sent via caller
+ //  m_name        = name;
+ //  m_data_size  = data_size;
+ //  m_assoc      = assoc;
+ //  m_num_sets   = num_set;
+ //  m_line_size  = line_size;
+ //  m_cache_type = cache_type_info; 
+ //
+ //  // Setting some fields to make indexing quick
+ //  m_set_bits    = log2_int(num_set);
+ //  m_shift_bits  = log2_int(line_size); /* use for shift amt. */
+ //  m_set_mask    = N_BIT_MASK(log2_int(num_set)); /* use after shifting */
+ //  m_tag_mask    = ~m_set_mask;  /* use after shifting */
+ //  m_offset_mask = N_BIT_MASK(m_shift_bits); /* use before shifting */
+ //  m_bank_num    = bank_num; 
+ //
+ //  // Allocating memory for all the sets (pointers to line arrays)
+ //  m_core_id = core_id; 
+ //
+ //  // Allocating memory for all of the lines in each set
+ //  m_set = new cache_set_c* [m_num_sets];  
+ //
+ //  for (int ii = 0; ii < m_num_sets; ++ii) {
+ //    m_set[ii] = new cache_set_c(m_assoc); 
+ //
+ //    // Allocating memory for all of the data elements in each line
+ //    for (int jj = 0; jj < assoc; ++jj) {
+ //      m_set[ii]->m_entry[jj].m_valid          = false;
+ //      m_set[ii]->m_entry[jj].m_access_counter = false;
+ //      if (data_size > 0) {
+ //        m_set[ii]->m_entry[jj].m_data = (void *)malloc(data_size);
+ //        memset(m_set[ii]->m_entry[jj].m_data, 0, data_size);
+ //      } 
+ //      else {
+ //        m_set[ii]->m_entry[jj].m_data = INIT_CACHE_DATA_VALUE;
+ //      }
+ //    }
+ //  }
+ //
+ //  // Initializing Last update count
+ //  m_cache_by_pass = cache_by_pass;
+ //
+ //  m_num_cpu_line = 0;
+ //  m_num_gpu_line = 0;
+ //  m_insert_count = 0;
+ //
+ //  m_enable_partition = enable_partition;
+ //}
+ 
+ vector<void*> rht_c::access_rht_set(Addr addr)
+ {
+     int set;
+     Addr tag;
+ 
+     find_tag_and_set(addr, &tag, &set);
+ 
+     vector<void*> vec;
+     for(int ii = 0; ii < m_assoc; ++ii)
+     {
+         cache_entry_c* line = &(m_set[set] -> m_entry[ii]);
+         if (line->m_valid)
+         {
+             assert(line->m_data);
+             vec.push_back(line->m_data);
+         }
+         else
+         {
+             //if the rht cache has empty entry,then we'd better make use of these entry,
+             //so we can record some replacement history in these empty entries.
+         }
+     }
+     return vec;
+ }
+ 
+ void* rht_c::has_invalid_entry(Addr addr)
+ {
+     int set;
+     Addr tag;
+ 
+     find_tag_and_set(addr, & tag, &set);
+ 
+     for(int ii = 0; ii < m_assoc;++ii)
+     {
+         cache_entry_c* line =  &(m_set[set] -> m_entry[ii]);
+         if (! line-> m_valid)
+             return line->m_data;
+     }
+ 
+     return NULL;
+ }
+ 
+ rht_c::~rht_c()
+ {
+ for (int ii = 0; ii < m_num_sets; ++ii) {
+   for (int jj = 0; jj < m_assoc; ++jj) {
+     if (m_data_size > 0) {
+       free(m_set[ii]->m_entry[jj].m_data);
+     }
+   }
+   delete m_set[ii];
+ }
+ delete[] m_set;
+ }
