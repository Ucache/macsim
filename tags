!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABIP_AVG_RATIO	statsEnums.h	/^ABIP_AVG_RATIO,$/;"	e	enum:StatisticsEnum
ABIP_AVG_RATIO_BASE	statsEnums.h	/^ABIP_AVG_RATIO_BASE,$/;"	e	enum:StatisticsEnum
AGGR_DEC	pref_common.h	/^  AGGR_DEC,$/;"	e	enum:HWP_DynAggr_Enum
AGGR_INC	pref_common.h	/^  AGGR_INC,$/;"	e	enum:HWP_DynAggr_Enum
AGGR_STAY	pref_common.h	/^  AGGR_STAY,$/;"	e	enum:HWP_DynAggr_Enum
ALLOCATE_H_INCLUDED	allocate.h	39;"	d
ALLOCATE_INTERFACE_ARGS	allocate.h	73;"	d
ALLOCATE_INTERFACE_CAST	allocate.h	101;"	d
ALLOCATE_INTERFACE_DECL	allocate.h	59;"	d
ALLOCATE_INTERFACE_INIT	allocate.h	87;"	d
ALLOCATE_INTERFACE_PARAMS	allocate.h	45;"	d
ALLOCQ_Type	uop.h	/^} ALLOCQ_Type;$/;"	t	typeref:enum:Iaq_Type_enum
ALLOC_COUNT	statsEnums.h	/^ALLOC_COUNT,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT0	statsEnums.h	/^APPL_CYC_COUNT0,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT1	statsEnums.h	/^APPL_CYC_COUNT1,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT2	statsEnums.h	/^APPL_CYC_COUNT2,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT3	statsEnums.h	/^APPL_CYC_COUNT3,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT4	statsEnums.h	/^APPL_CYC_COUNT4,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT_BASE0	statsEnums.h	/^APPL_CYC_COUNT_BASE0,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT_BASE1	statsEnums.h	/^APPL_CYC_COUNT_BASE1,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT_BASE2	statsEnums.h	/^APPL_CYC_COUNT_BASE2,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT_BASE3	statsEnums.h	/^APPL_CYC_COUNT_BASE3,$/;"	e	enum:StatisticsEnum
APPL_CYC_COUNT_BASE4	statsEnums.h	/^APPL_CYC_COUNT_BASE4,$/;"	e	enum:StatisticsEnum
ASSERT	assert_macros.h	72;"	d
ASSERTM	assert_macros.h	109;"	d
ASSERTM	assert_macros.h	91;"	d
ASSERTU	assert_macros.h	116;"	d
ASSERTUM	assert_macros.h	135;"	d
AVG_BLOCK_EXE_CYCLE	statsEnums.h	/^AVG_BLOCK_EXE_CYCLE,$/;"	e	enum:StatisticsEnum
AVG_BLOCK_EXE_CYCLE_BASE	statsEnums.h	/^AVG_BLOCK_EXE_CYCLE_BASE,$/;"	e	enum:StatisticsEnum
AVG_CORE_IDLE_CYCLE	statsEnums.h	/^AVG_CORE_IDLE_CYCLE,$/;"	e	enum:StatisticsEnum
AVG_MEMORY_LATENCY	statsEnums.h	/^AVG_MEMORY_LATENCY,$/;"	e	enum:StatisticsEnum
AVG_MEMORY_LATENCY_BASE	statsEnums.h	/^AVG_MEMORY_LATENCY_BASE,$/;"	e	enum:StatisticsEnum
AbstractStat	statistics.h	/^    AbstractStat(const string& str, const string& outputfilename, long ID, $/;"	f	class:AbstractStat
AbstractStat	statistics.h	/^class AbstractStat$/;"	c
Addr	global_types.h	/^typedef uns64 Addr;$/;"	t
BANDWIDTH_TOT	statsEnums.h	/^BANDWIDTH_TOT,$/;"	e	enum:StatisticsEnum
BANK	utils.h	80;"	d
BAR_FETCH	uop.h	/^  BAR_FETCH     = 0x1,          \/\/!< causes fetch to halt until a redirect occurs$/;"	e	enum:Bar_Type_enum
BAR_ISSUE	uop.h	/^  BAR_ISSUE     = 0x2,          \/\/!< causes issue to serialize around the instruction$/;"	e	enum:Bar_Type_enum
BIG_NUMBER	memory.cc	98;"	d	file:
BITS_IN_BYTE	global_defs.h	203;"	d
BITS_IN_LONGWORD	global_defs.h	205;"	d
BITS_IN_QUADWORD	global_defs.h	206;"	d
BITS_IN_WORD	global_defs.h	204;"	d
BLOCK_ID_MOD	process_manager.cc	94;"	d	file:
BLOCK_ID_SHIFT	process_manager.cc	92;"	d	file:
BODY	router.cc	57;"	d	file:
BP_GSHARE_H_INCLUDED	bp_gshare.h	40;"	d
BP_H_INCLUDED	bp.h	39;"	d
BP_MISPRED_STALL	statsEnums.h	/^BP_MISPRED_STALL,$/;"	e	enum:StatisticsEnum
BP_OFF_PATH_CORRECT	statsEnums.h	/^BP_OFF_PATH_CORRECT,$/;"	e	enum:StatisticsEnum
BP_OFF_PATH_MISFETCH	statsEnums.h	/^BP_OFF_PATH_MISFETCH,$/;"	e	enum:StatisticsEnum
BP_OFF_PATH_MISPREDICT	statsEnums.h	/^BP_OFF_PATH_MISPREDICT,$/;"	e	enum:StatisticsEnum
BP_ON_PATH_CORRECT	statsEnums.h	/^BP_ON_PATH_CORRECT,$/;"	e	enum:StatisticsEnum
BP_ON_PATH_MISFETCH	statsEnums.h	/^BP_ON_PATH_MISFETCH,$/;"	e	enum:StatisticsEnum
BP_ON_PATH_MISPREDICT	statsEnums.h	/^BP_ON_PATH_MISPREDICT,$/;"	e	enum:StatisticsEnum
BP_REDIRECT_RESOLVED	statsEnums.h	/^BP_REDIRECT_RESOLVED,$/;"	e	enum:StatisticsEnum
BP_RESOLVED	statsEnums.h	/^BP_RESOLVED,$/;"	e	enum:StatisticsEnum
BP_TARG_H_INCLUDED	bp_targ.h	39;"	d
BREAK_ALIGNMENT	frontend.h	/^  BREAK_ALIGNMENT,              \/**< break because of misaligned fetch (offpath) *\/$/;"	e	enum:Break_Reason_enum
BREAK_BARRIER	frontend.h	/^  BREAK_BARRIER,                \/**< break because of a fetch barrier instruction *\/$/;"	e	enum:Break_Reason_enum
BREAK_BTB_MISS	frontend.h	/^  BREAK_BTB_MISS,               \/**< break because of a btb miss *\/$/;"	e	enum:Break_Reason_enum
BREAK_CALLSYS	frontend.h	/^  BREAK_CALLSYS,                \/**< break because of system call *\/$/;"	e	enum:Break_Reason_enum
BREAK_CF	frontend.h	/^  BREAK_CF,                     \/**< break because it's reached maximum control flows *\/$/;"	e	enum:Break_Reason_enum
BREAK_DONT	frontend.h	/^  BREAK_DONT,                   \/**< don't break fetch yet *\/$/;"	e	enum:Break_Reason_enum
BREAK_ICACHE_MISS	frontend.h	/^  BREAK_ICACHE_MISS,            \/**< break because of icache miss *\/$/;"	e	enum:Break_Reason_enum
BREAK_ISSUE_WIDTH	frontend.h	/^  BREAK_ISSUE_WIDTH,            \/**< break because it's reached maximum issue width *\/$/;"	e	enum:Break_Reason_enum
BREAK_LINE_END	frontend.h	/^  BREAK_LINE_END,               \/**< break because the current cache line has ended *\/$/;"	e	enum:Break_Reason_enum
BREAK_MODEL_AFTER	frontend.h	/^  BREAK_MODEL_AFTER,            \/**< break because of model hook *\/$/;"	e	enum:Break_Reason_enum
BREAK_MODEL_BEFORE	frontend.h	/^  BREAK_MODEL_BEFORE,           \/**< break because of model hook *\/$/;"	e	enum:Break_Reason_enum
BREAK_OFFPATH	frontend.h	/^  BREAK_OFFPATH,                \/**< break because the machine is offpath *\/$/;"	e	enum:Break_Reason_enum
BREAK_STALL	frontend.h	/^  BREAK_STALL,                  \/**< break because the pipeline is stalled *\/$/;"	e	enum:Break_Reason_enum
BREAK_TAKEN	frontend.h	/^  BREAK_TAKEN,                  \/**< break because of nonsequential control flow *\/$/;"	e	enum:Break_Reason_enum
BUG_DETECTOR_H_INCLUDED	bug_detector.h	39;"	d
BYTES_IN_BYTE	global_defs.h	199;"	d
BYTES_IN_INST	global_defs.h	198;"	d
BYTES_IN_LONGWORD	global_defs.h	201;"	d
BYTES_IN_QUADWORD	global_defs.h	202;"	d
BYTES_IN_WORD	global_defs.h	200;"	d
BYTE_OVERLAP	map.cc	69;"	d	file:
Bar_Type	uop.h	/^} Bar_Type;$/;"	t	typeref:enum:Bar_Type_enum
Bar_Type_enum	uop.h	/^typedef enum Bar_Type_enum {$/;"	g
Binary	global_types.h	/^typedef uns32 Binary;$/;"	t
Break_Reason	frontend.h	/^} Break_Reason;$/;"	t	typeref:enum:Break_Reason_enum
Break_Reason_enum	frontend.h	/^typedef enum Break_Reason_enum {$/;"	g
CACHE_BANK_BUSY	statsEnums.h	/^CACHE_BANK_BUSY,$/;"	e	enum:StatisticsEnum
CACHE_BTB	cache.h	/^  CACHE_BTB$/;"	e	enum:Cache_Type_enum
CACHE_CONST	cache.h	/^  CACHE_CONST,$/;"	e	enum:Cache_Type_enum
CACHE_DL1	cache.h	/^  CACHE_DL1,$/;"	e	enum:Cache_Type_enum
CACHE_DL2	cache.h	/^  CACHE_DL2,$/;"	e	enum:Cache_Type_enum
CACHE_DL3	cache.h	/^  CACHE_DL3, $/;"	e	enum:Cache_Type_enum
CACHE_H	cache.h	39;"	d
CACHE_HIT	global_defs.h	183;"	d
CACHE_IL1	cache.h	/^  CACHE_IL1 = 1,$/;"	e	enum:Cache_Type_enum
CACHE_IL2	cache.h	/^  CACHE_IL2,$/;"	e	enum:Cache_Type_enum
CACHE_MISS	global_defs.h	182;"	d
CACHE_SW_MANAGED	cache.h	/^  CACHE_SW_MANAGED,$/;"	e	enum:Cache_Type_enum
CACHE_TEXTURE	cache.h	/^  CACHE_TEXTURE,$/;"	e	enum:Cache_Type_enum
CF_BR	uop.h	/^  CF_BR,                        \/\/!< an unconditional branch$/;"	e	enum:Cf_Type_enum
CF_CALL	uop.h	/^  CF_CALL,                      \/\/!< a call$/;"	e	enum:Cf_Type_enum
CF_CBR	uop.h	/^  CF_CBR,                       \/\/!< a conditional branch$/;"	e	enum:Cf_Type_enum
CF_IBR	uop.h	/^  CF_IBR,                       \/\/!< an indirect branch \/\/ non conditional$/;"	e	enum:Cf_Type_enum
CF_ICALL	uop.h	/^  CF_ICALL,                     \/\/!< an indirect call$/;"	e	enum:Cf_Type_enum
CF_ICO	uop.h	/^  CF_ICO,                       \/\/!< an indirect jump to co-routine$/;"	e	enum:Cf_Type_enum
CF_MITE	uop.h	/^  CF_MITE,                      \/\/!< alpha PAL, micro-instruction assited instructions$/;"	e	enum:Cf_Type_enum
CF_RET	uop.h	/^  CF_RET,                       \/\/!< a return$/;"	e	enum:Cf_Type_enum
CF_TYPE	trace_read.h	/^} CF_TYPE;$/;"	t	typeref:enum:CF_TYPE_enum
CF_TYPE_enum	trace_read.h	/^typedef enum CF_TYPE_enum {$/;"	g
CLEAR_BIT	exec.cc	76;"	d	file:
CLOCK_CPU	macsim.cc	843;"	d	file:
CLOCK_GPU	macsim.cc	844;"	d	file:
CLOCK_L3	macsim.cc	845;"	d	file:
CLOCK_MC	macsim.cc	847;"	d	file:
CLOCK_NOC	macsim.cc	846;"	d	file:
CM_COAL_INST	statsEnums.h	/^CM_COAL_INST,$/;"	e	enum:StatisticsEnum
CM_COAL_INST_MUL_TRANS	statsEnums.h	/^CM_COAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
CM_COAL_INST_SINGLE_TRANS	statsEnums.h	/^CM_COAL_INST_SINGLE_TRANS,$/;"	e	enum:StatisticsEnum
CM_UNCOAL_INST	statsEnums.h	/^CM_UNCOAL_INST,$/;"	e	enum:StatisticsEnum
COAL_INST	statsEnums.h	/^COAL_INST,$/;"	e	enum:StatisticsEnum
COAL_INST_MUL_TRANS	statsEnums.h	/^COAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
COAL_INST_SINGLE_TRANS	statsEnums.h	/^COAL_INST_SINGLE_TRANS,$/;"	e	enum:StatisticsEnum
COHERENCE_STATE	memory.h	/^enum COHERENCE_STATE {$/;"	g
CONST_CACHE_ACCESS	statsEnums.h	/^CONST_CACHE_ACCESS,$/;"	e	enum:StatisticsEnum
CONST_CACHE_HIT	statsEnums.h	/^CONST_CACHE_HIT,$/;"	e	enum:StatisticsEnum
CONST_CACHE_MISS	statsEnums.h	/^CONST_CACHE_MISS,$/;"	e	enum:StatisticsEnum
CONST_CACHE_MISS_NO_EXECUTE	statsEnums.h	/^CONST_CACHE_MISS_NO_EXECUTE,$/;"	e	enum:StatisticsEnum
COOK_ADDR_BITS	bp_gshare.cc	54;"	d	file:
COOK_HIST_BITS	bp_gshare.cc	52;"	d	file:
CORE_CONFIG	config.h	329;"	d
CORE_CYCLES	statsEnums.h	/^CORE_CYCLES,$/;"	e	enum:StatisticsEnum
CORE_DISPATCHED_INST	statsEnums.h	/^CORE_DISPATCHED_INST,$/;"	e	enum:StatisticsEnum
CORE_DISPATCH_WAIT	statsEnums.h	/^CORE_DISPATCH_WAIT,$/;"	e	enum:StatisticsEnum
CORE_FETCH_DELTA	statsEnums.h	/^CORE_FETCH_DELTA,$/;"	e	enum:StatisticsEnum
CORE_H_INCLUDED	core.h	39;"	d
CORE_NUM_FETCH_CYCLES	statsEnums.h	/^CORE_NUM_FETCH_CYCLES,$/;"	e	enum:StatisticsEnum
CORE_NUM_NO_FETCH_CYCLES	statsEnums.h	/^CORE_NUM_NO_FETCH_CYCLES,$/;"	e	enum:StatisticsEnum
CORE_NUM_NO_FETCH_CYCLES_WITH_READY_THREADS	statsEnums.h	/^CORE_NUM_NO_FETCH_CYCLES_WITH_READY_THREADS,$/;"	e	enum:StatisticsEnum
CORE_NUM_RETIRE_CYCLES	statsEnums.h	/^CORE_NUM_RETIRE_CYCLES,$/;"	e	enum:StatisticsEnum
CORE_RETIRE_DELTA	statsEnums.h	/^CORE_RETIRE_DELTA,$/;"	e	enum:StatisticsEnum
CORE_SCHED_THREADS	statsEnums.h	/^CORE_SCHED_THREADS,$/;"	e	enum:StatisticsEnum
CORE_STATS_START	statsEnums.h	/^CORE_STATS_START = PER_CORE_STATS_ENUM_START,$/;"	e	enum:StatisticsEnum
COUNT_Stat	statistics.h	/^    COUNT_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:COUNT_Stat
COUNT_Stat	statistics.h	/^class COUNT_Stat : public AbstractStat$/;"	c
CPI_DELTA0	statsEnums.h	/^CPI_DELTA0,$/;"	e	enum:StatisticsEnum
CPI_DELTA1	statsEnums.h	/^CPI_DELTA1,$/;"	e	enum:StatisticsEnum
CPI_DELTA2	statsEnums.h	/^CPI_DELTA2,$/;"	e	enum:StatisticsEnum
CPI_DELTA3	statsEnums.h	/^CPI_DELTA3,$/;"	e	enum:StatisticsEnum
CPI_DELTA4	statsEnums.h	/^CPI_DELTA4,$/;"	e	enum:StatisticsEnum
CPI_DELTA_BASE0	statsEnums.h	/^CPI_DELTA_BASE0,$/;"	e	enum:StatisticsEnum
CPI_DELTA_BASE1	statsEnums.h	/^CPI_DELTA_BASE1,$/;"	e	enum:StatisticsEnum
CPI_DELTA_BASE2	statsEnums.h	/^CPI_DELTA_BASE2,$/;"	e	enum:StatisticsEnum
CPI_DELTA_BASE3	statsEnums.h	/^CPI_DELTA_BASE3,$/;"	e	enum:StatisticsEnum
CPI_DELTA_BASE4	statsEnums.h	/^CPI_DELTA_BASE4,$/;"	e	enum:StatisticsEnum
CPU_FIRST	router.cc	70;"	d	file:
CPU_FRIENDLY	router.cc	74;"	d	file:
CPU_ROUTER	router.h	50;"	d
CREATE_CACHE_CONFIGURATION	config.h	39;"	d
CYCLE	macsim.h	72;"	d
CYCLE_CPU	statsEnums.h	/^CYCLE_CPU,$/;"	e	enum:StatisticsEnum
CYCLE_GPU	statsEnums.h	/^CYCLE_GPU,$/;"	e	enum:StatisticsEnum
CYC_COUNT	statsEnums.h	/^CYC_COUNT,$/;"	e	enum:StatisticsEnum
CYC_COUNT_PTX	statsEnums.h	/^CYC_COUNT_PTX,$/;"	e	enum:StatisticsEnum
CYC_COUNT_TOT	statsEnums.h	/^CYC_COUNT_TOT,$/;"	e	enum:StatisticsEnum
CYC_COUNT_X86	statsEnums.h	/^CYC_COUNT_X86,$/;"	e	enum:StatisticsEnum
Cache_Type	cache.h	/^} Cache_Type;$/;"	t	typeref:enum:Cache_Type_enum
Cache_Type_enum	cache.h	/^typedef enum Cache_Type_enum $/;"	g
Cf_Type	uop.h	/^} Cf_Type;$/;"	t	typeref:enum:Cf_Type_enum
Cf_Type_enum	uop.h	/^typedef enum Cf_Type_enum {$/;"	g
CoreStatistics	statistics.h	/^    CoreStatistics(macsim_c* simBase, unsigned int coreID = 0, bool isTemplate = false):$/;"	f	class:CoreStatistics
CoreStatistics	statistics.h	/^class CoreStatistics$/;"	c
Counter	global_types.h	/^typedef uns64              Counter; $/;"	t
DCACHE_PREF_HIT	statsEnums.h	/^DCACHE_PREF_HIT,$/;"	e	enum:StatisticsEnum
DEBUG	allocate.cc	61;"	d	file:
DEBUG	allocate_smc.cc	55;"	d	file:
DEBUG	bp_gshare.cc	49;"	d	file:
DEBUG	bp_targ.cc	52;"	d	file:
DEBUG	cache.cc	52;"	d	file:
DEBUG	core.cc	107;"	d	file:
DEBUG	dram.cc	63;"	d	file:
DEBUG	dram.cc	67;"	d	file:
DEBUG	exec.cc	72;"	d	file:
DEBUG	frontend.cc	62;"	d	file:
DEBUG	macsim.cc	82;"	d	file:
DEBUG	map.cc	58;"	d	file:
DEBUG	memory.cc	76;"	d	file:
DEBUG	noc.cc	45;"	d	file:
DEBUG	port.cc	52;"	d	file:
DEBUG	pref_common.cc	72;"	d	file:
DEBUG	pref_stride.cc	68;"	d	file:
DEBUG	process_manager.cc	96;"	d	file:
DEBUG	readonly_cache.cc	67;"	d	file:
DEBUG	retire.cc	97;"	d	file:
DEBUG	router.cc	80;"	d	file:
DEBUG	schedule.cc	53;"	d	file:
DEBUG	schedule_io.cc	62;"	d	file:
DEBUG	schedule_ooo.cc	58;"	d	file:
DEBUG	schedule_smc.cc	53;"	d	file:
DEBUG	trace_read.cc	65;"	d	file:
DEBUG_CORE	exec.cc	73;"	d	file:
DEBUG_CORE	frontend.cc	63;"	d	file:
DEBUG_MEM	cache.cc	53;"	d	file:
DEBUG_MEM	pref_common.cc	73;"	d	file:
DEBUG_MEM	pref_stride.cc	67;"	d	file:
DEBUG_MEM	readonly_cache.cc	66;"	d	file:
DEBUG_RANGE_COND	debug_macros.h	78;"	d
DEFUOP	exec.cc	94;"	d	file:
DEFUOP	exec.cc	99;"	d	file:
DEFUOP	schedule_smc.cc	77;"	d	file:
DEMAND_L2_FILL	statsEnums.h	/^DEMAND_L2_FILL,$/;"	e	enum:StatisticsEnum
DEMAND_LAST_SCHEDULE	statsEnums.h	/^DEMAND_LAST_SCHEDULE,$/;"	e	enum:StatisticsEnum
DEMAND_PASS_LOW_OP_SCHEDULE	statsEnums.h	/^DEMAND_PASS_LOW_OP_SCHEDULE,$/;"	e	enum:StatisticsEnum
DEMAND_PASS_PREF_SCHEDULE	statsEnums.h	/^DEMAND_PASS_PREF_SCHEDULE,$/;"	e	enum:StatisticsEnum
DISABLE	memory.cc	81;"	d	file:
DISPATCHED_INST	statsEnums.h	/^DISPATCHED_INST,$/;"	e	enum:StatisticsEnum
DISPATCH_WAIT	statsEnums.h	/^DISPATCH_WAIT,$/;"	e	enum:StatisticsEnum
DISTMember_Stat	statistics.h	/^    DISTMember_Stat(const string& str,  const string& outputfilename, long ID, long distID,$/;"	f	class:DISTMember_Stat
DISTMember_Stat	statistics.h	/^class DISTMember_Stat : public AbstractStat$/;"	c
DIST_Stat	statistics.h	/^    DIST_Stat(const string& str, const string& outputfilename, long ID, ProcessorStatistics* procStat):$/;"	f	class:DIST_Stat
DIST_Stat	statistics.h	/^class DIST_Stat : public AbstractStat$/;"	c
DLINK	memory.cc	79;"	d	file:
DM_COAL_INST	statsEnums.h	/^DM_COAL_INST,$/;"	e	enum:StatisticsEnum
DM_COAL_INST_MUL_TRANS	statsEnums.h	/^DM_COAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
DM_COAL_INST_SINGLE_TRANS	statsEnums.h	/^DM_COAL_INST_SINGLE_TRANS,$/;"	e	enum:StatisticsEnum
DM_UNCOAL_INST	statsEnums.h	/^DM_UNCOAL_INST,$/;"	e	enum:StatisticsEnum
DONT_INCLUDE_MANIFOLD	memreq_info.h	48;"	d
DOWN	router.cc	54;"	d	file:
DRAMSim	dram.h	/^namespace DRAMSim {$/;"	n
DRAM_ACTIVATE	statsEnums.h	/^DRAM_ACTIVATE,$/;"	e	enum:StatisticsEnum
DRAM_AVG_LATENCY	statsEnums.h	/^DRAM_AVG_LATENCY,$/;"	e	enum:StatisticsEnum
DRAM_AVG_LATENCY_BASE	statsEnums.h	/^DRAM_AVG_LATENCY_BASE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL0_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL0_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL0_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL0_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL1_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL1_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL1_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL1_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL2_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL2_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL2_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL2_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL3_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL3_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL3_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL3_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL4_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL4_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL4_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL4_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL5_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL5_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL5_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL5_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL6_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL6_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL6_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL6_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL7_BANDWIDTH_SATURATED	statsEnums.h	/^DRAM_CHANNEL7_BANDWIDTH_SATURATED,$/;"	e	enum:StatisticsEnum
DRAM_CHANNEL7_DBUS_IDLE	statsEnums.h	/^DRAM_CHANNEL7_DBUS_IDLE,$/;"	e	enum:StatisticsEnum
DRAM_CMD	dram.h	/^  DRAM_CMD, \/**< command ready *\/$/;"	e	enum:DRAM_STATE
DRAM_CMD_WAIT	dram.h	/^  DRAM_CMD_WAIT, \/**< wait command serviced *\/$/;"	e	enum:DRAM_STATE
DRAM_COLUMN	statsEnums.h	/^DRAM_COLUMN,$/;"	e	enum:StatisticsEnum
DRAM_DATA	dram.h	/^  DRAM_DATA, \/**< data ready to send *\/$/;"	e	enum:DRAM_STATE
DRAM_DATA_WAIT	dram.h	/^  DRAM_DATA_WAIT, \/**< sending data *\/$/;"	e	enum:DRAM_STATE
DRAM_H	dram.h	40;"	d
DRAM_INIT	dram.h	/^  DRAM_INIT, \/**< initialized *\/$/;"	e	enum:DRAM_STATE
DRAM_PRECHARGE	statsEnums.h	/^DRAM_PRECHARGE,$/;"	e	enum:StatisticsEnum
DRAM_REQ_PRIORITY_COUNT	dram.h	168;"	d
DRAM_STATE	dram.h	/^enum DRAM_STATE {$/;"	g
DRAM_STATE_COUNT	dram.h	169;"	d
Dep_Type	uop.h	/^} Dep_Type;$/;"	t	typeref:enum:Dep_Type_enum
Dep_Type_enum	uop.h	/^typedef enum Dep_Type_enum {$/;"	g
ENABLE	memory.cc	80;"	d	file:
ENABLE_ASSERTIONS	assert_macros.h	52;"	d
ENABLE_ASSERTIONS	assert_macros.h	54;"	d
ENABLE_GLOBAL_DEBUG_PRINT	debug_macros.h	87;"	d
ENABLE_GLOBAL_DEBUG_PRINT	debug_macros.h	89;"	d
EXEC_CONFIG	config.h	188;"	d
EXEC_H_INCLUDED	exec.h	40;"	d
EXEC_INTERFACE_ARGS	exec.h	73;"	d
EXEC_INTERFACE_CAST	exec.h	97;"	d
EXEC_INTERFACE_DECL	exec.h	61;"	d
EXEC_INTERFACE_INIT	exec.cc	/^exec_c::exec_c(EXEC_INTERFACE_PARAMS(), macsim_c* simBase): EXEC_INTERFACE_INIT()$/;"	f
EXEC_INTERFACE_INIT	exec.h	85;"	d
EXEC_INTERFACE_PARAMS	exec.h	49;"	d
EXE_TIME	statsEnums.h	/^EXE_TIME,$/;"	e	enum:StatisticsEnum
EXTRA_REG	inst_info.h	/^  EXTRA_REG, \/**< Extra register *\/$/;"	e	enum:Reg_Type_enum
FACTORY_CLASS_H	factory_class.h	39;"	d
FACTORY_DECLARE	factory_class.h	59;"	d
FACTORY_IMPLEMENTATION	factory_class.cc	49;"	d	file:
FCDPData	global_defs.h	/^typedef struct FCDPData_ FCDPData;$/;"	t	typeref:struct:FCDPData_
FETCH_FACTORY_H	fetch_factory.h	39;"	d
FETCH_THREAD_SKIP_BR_WAIT	statsEnums.h	/^FETCH_THREAD_SKIP_BR_WAIT,$/;"	e	enum:StatisticsEnum
FETCH_THREAD_SKIP_LD_WAIT	statsEnums.h	/^FETCH_THREAD_SKIP_LD_WAIT,$/;"	e	enum:StatisticsEnum
FETCH_THREAD_SKIP_SCHED_WAIT	statsEnums.h	/^FETCH_THREAD_SKIP_SCHED_WAIT,$/;"	e	enum:StatisticsEnum
FILED1_LENGTH	statistics.h	78;"	d
FILED2_LENGTH	statistics.h	79;"	d
FILED3_LENGTH	statistics.h	80;"	d
FILED4_LENGTH	statistics.h	81;"	d
FILE_OPEN_ERROR	statsEnums.h	/^FILE_OPEN_ERROR,$/;"	e	enum:StatisticsEnum
FORWARDED_LD	statsEnums.h	/^FORWARDED_LD,$/;"	e	enum:StatisticsEnum
FP_OPS	statsEnums.h	/^FP_OPS,$/;"	e	enum:StatisticsEnum
FP_OPS_TOT	statsEnums.h	/^FP_OPS_TOT,$/;"	e	enum:StatisticsEnum
FP_REG	inst_info.h	/^  FP_REG, \/**< FP register *\/$/;"	e	enum:Reg_Type_enum
FRONTEND_CONFIG	config.h	280;"	d
FRONTEND_H_INCLUDED	frontend.h	40;"	d
FRONTEND_INTERFACE_ARGS	frontend.h	85;"	d
FRONTEND_INTERFACE_CAST	frontend.h	117;"	d
FRONTEND_INTERFACE_DECL	frontend.h	69;"	d
FRONTEND_INTERFACE_INIT	frontend.cc	/^: FRONTEND_INTERFACE_INIT() $/;"	f
FRONTEND_INTERFACE_INIT	frontend.h	101;"	d
FRONTEND_INTERFACE_PARAMS	frontend.h	53;"	d
FRONTEND_MODE	frontend.h	/^} FRONTEND_MODE; $/;"	t	typeref:enum:__anon1
FRONTEND_MODE_IFETCH	frontend.h	/^  FRONTEND_MODE_IFETCH,         \/**< normal instruction fetch mode *\/$/;"	e	enum:__anon1
FRONTEND_MODE_PERFECT	frontend.h	/^  FRONTEND_MODE_PERFECT,        \/**< prefetch icache *\/$/;"	e	enum:__anon1
FRONTEND_MODE_WAIT_FOR_MISS	frontend.h	/^  FRONTEND_MODE_WAIT_FOR_MISS,  \/**< wait for instruction cache serviced *\/$/;"	e	enum:__anon1
FRONTEND_MODE_WAIT_FOR_TIMER	frontend.h	/^  FRONTEND_MODE_WAIT_FOR_TIMER, \/**< not used *\/$/;"	e	enum:__anon1
GET_APPL_ID	memory.cc	2459;"	d	file:
GLOBALS_H_INCLUDED	global_types.h	39;"	d
GLOBAL_DEBUG_STREAM	debug_macros.h	92;"	d
GLOBAL_DEFS_INCLUDED	global_defs.h	39;"	d
GPU_ABS	trace_read.h	/^  GPU_ABS,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ABS64	trace_read.h	/^  GPU_ABS64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ADD	trace_read.h	/^  GPU_ADD, $/;"	e	enum:TR_OPCODE_ENUM_
GPU_ADD64	trace_read.h	/^  GPU_ADD64, $/;"	e	enum:TR_OPCODE_ENUM_
GPU_ADDC	trace_read.h	/^	GPU_ADDC,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ALLOCATE_H_INCLUDED	allocate_smc.h	40;"	d
GPU_AND	trace_read.h	/^	GPU_AND,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_AND64	trace_read.h	/^	GPU_AND64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ATOM	trace_read.h	/^	GPU_ATOM,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ATOM64	trace_read.h	/^	GPU_ATOM64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BAR	trace_read.h	/^	GPU_BAR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFE	trace_read.h	/^	GPU_BFE,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFE64	trace_read.h	/^	GPU_BFE64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFI	trace_read.h	/^	GPU_BFI,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFI64	trace_read.h	/^	GPU_BFI64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFIND	trace_read.h	/^	GPU_BFIND,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BFIND64	trace_read.h	/^	GPU_BFIND64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BRA	trace_read.h	/^	GPU_BRA,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BREV	trace_read.h	/^	GPU_BREV,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BREV64	trace_read.h	/^	GPU_BREV64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_BRKPT	trace_read.h	/^	GPU_BRKPT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CALL	trace_read.h	/^	GPU_CALL,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CLZ	trace_read.h	/^	GPU_CLZ,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CLZ64	trace_read.h	/^	GPU_CLZ64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CNOT	trace_read.h	/^	GPU_CNOT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CNOT64	trace_read.h	/^	GPU_CNOT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_COPYSIGN	trace_read.h	/^	GPU_COPYSIGN,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_COPYSIGN64	trace_read.h	/^	GPU_COPYSIGN64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_COS	trace_read.h	/^	GPU_COS,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CVT	trace_read.h	/^	GPU_CVT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CVT64	trace_read.h	/^	GPU_CVT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CVTA	trace_read.h	/^	GPU_CVTA,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_CVTA64	trace_read.h	/^	GPU_CVTA64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_DIV	trace_read.h	/^	GPU_DIV,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_DIV64	trace_read.h	/^	GPU_DIV64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_EN	trace_read.h	/^  GPU_EN,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_EX2	trace_read.h	/^	GPU_EX2,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_EXIT	trace_read.h	/^	GPU_EXIT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_FIRST	router.cc	71;"	d	file:
GPU_FMA	trace_read.h	/^	GPU_FMA,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_FMA64	trace_read.h	/^	GPU_FMA64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_FRIENDLY	router.cc	73;"	d	file:
GPU_ISSPACEP	trace_read.h	/^	GPU_ISSPACEP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_LD	trace_read.h	/^	GPU_LD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_LD64	trace_read.h	/^	GPU_LD64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_LDU	trace_read.h	/^	GPU_LDU,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_LDU64	trace_read.h	/^	GPU_LDU64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_LG2	trace_read.h	/^	GPU_LG2,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MAD	trace_read.h	/^	GPU_MAD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MAD24	trace_read.h	/^	GPU_MAD24,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MAD64	trace_read.h	/^	GPU_MAD64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MAX	trace_read.h	/^	GPU_MAX,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MAX64	trace_read.h	/^	GPU_MAX64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MEMBAR	trace_read.h	/^	GPU_MEMBAR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MIN	trace_read.h	/^	GPU_MIN,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MIN64	trace_read.h	/^	GPU_MIN64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MOV	trace_read.h	/^	GPU_MOV,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MOV64	trace_read.h	/^	GPU_MOV64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MUL	trace_read.h	/^	GPU_MUL,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MUL24	trace_read.h	/^	GPU_MUL24,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_MUL64	trace_read.h	/^	GPU_MUL64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_NEG	trace_read.h	/^	GPU_NEG,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_NEG64	trace_read.h	/^	GPU_NEG64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_NOT	trace_read.h	/^	GPU_NOT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_NOT64	trace_read.h	/^	GPU_NOT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_OR	trace_read.h	/^	GPU_OR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_OR64	trace_read.h	/^	GPU_OR64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_PHI	trace_read.h	/^  GPU_PHI,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_PMEVENT	trace_read.h	/^	GPU_PMEVENT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_POPC	trace_read.h	/^	GPU_POPC,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_POPC64	trace_read.h	/^	GPU_POPC64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_PREFETCH	trace_read.h	/^	GPU_PREFETCH,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_PREFETCHU	trace_read.h	/^	GPU_PREFETCHU,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_PRMT	trace_read.h	/^	GPU_PRMT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RCP	trace_read.h	/^	GPU_RCP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RCP64	trace_read.h	/^	GPU_RCP64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RECONVERGE	trace_read.h	/^  GPU_RECONVERGE,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RED	trace_read.h	/^	GPU_RED,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RED64	trace_read.h	/^	GPU_RED64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_REM	trace_read.h	/^	GPU_REM,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_REM64	trace_read.h	/^	GPU_REM64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RET	trace_read.h	/^	GPU_RET,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ROB_H_INCLUDED	rob_smc.h	41;"	d
GPU_ROUTER	router.h	51;"	d
GPU_RSQRT	trace_read.h	/^	GPU_RSQRT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_RSQRT64	trace_read.h	/^	GPU_RSQRT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SAD	trace_read.h	/^	GPU_SAD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SAD64	trace_read.h	/^	GPU_SAD64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SELP	trace_read.h	/^	GPU_SELP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SELP64	trace_read.h	/^	GPU_SELP64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SET	trace_read.h	/^	GPU_SET,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SET64	trace_read.h	/^	GPU_SET64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SETP	trace_read.h	/^	GPU_SETP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SETP64	trace_read.h	/^	GPU_SETP64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SHL	trace_read.h	/^	GPU_SHL,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SHL64	trace_read.h	/^	GPU_SHL64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SHR	trace_read.h	/^	GPU_SHR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SHR64	trace_read.h	/^	GPU_SHR64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SIN	trace_read.h	/^	GPU_SIN,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SLCT	trace_read.h	/^	GPU_SLCT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SLCT64	trace_read.h	/^	GPU_SLCT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SQRT	trace_read.h	/^	GPU_SQRT,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SQRT64	trace_read.h	/^	GPU_SQRT64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ST	trace_read.h	/^	GPU_ST,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_ST64	trace_read.h	/^	GPU_ST64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUB	trace_read.h	/^	GPU_SUB,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUB64	trace_read.h	/^	GPU_SUB64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUBC	trace_read.h	/^	GPU_SUBC,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SULD	trace_read.h	/^	GPU_SULD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SULD64	trace_read.h	/^	GPU_SULD64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUQ	trace_read.h	/^	GPU_SUQ,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SURED	trace_read.h	/^	GPU_SURED,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SURED64	trace_read.h	/^	GPU_SURED64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUST	trace_read.h	/^	GPU_SUST,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_SUST64	trace_read.h	/^	GPU_SUST64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TESTP	trace_read.h	/^  GPU_TESTP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TESTP64	trace_read.h	/^  GPU_TESTP64,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TEX	trace_read.h	/^  GPU_TEX,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TLD4	trace_read.h	/^  GPU_TLD4,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TRAP	trace_read.h	/^  GPU_TRAP,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_TXQ	trace_read.h	/^  GPU_TXQ,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VABSDIFF	trace_read.h	/^  GPU_VABSDIFF,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VADD	trace_read.h	/^  GPU_VADD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VMAD	trace_read.h	/^  GPU_VMAD,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VMAX	trace_read.h	/^  GPU_VMAX,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VMIN	trace_read.h	/^  GPU_VMIN,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VOTE	trace_read.h	/^  GPU_VOTE,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VSET	trace_read.h	/^  GPU_VSET,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VSHL	trace_read.h	/^  GPU_VSHL,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VSHR	trace_read.h	/^  GPU_VSHR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_VSUB	trace_read.h	/^  GPU_VSUB,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_XOR	trace_read.h	/^  GPU_XOR,$/;"	e	enum:TR_OPCODE_ENUM_
GPU_XOR64	trace_read.h	/^  GPU_XOR64,$/;"	e	enum:TR_OPCODE_ENUM_
Generic_Enum	global_types.h	/^typedef int                Generic_Enum;$/;"	t
GetValueString	knob.h	/^    string GetValueString(void) {return m_valueString;}$/;"	f	class:KnobTemplate
GlobalStatistics	statistics.h	/^    GlobalStatistics(macsim_c* simBase)$/;"	f	class:GlobalStatistics
GlobalStatistics	statistics.h	/^class GlobalStatistics$/;"	c
HAS_DONE_FUNC	memory.cc	84;"	d	file:
HAS_ROUTER	memory.cc	82;"	d	file:
HEAD	router.cc	56;"	d	file:
HIT_TRAIN_STREAM	statsEnums.h	/^HIT_TRAIN_STREAM,$/;"	e	enum:StatisticsEnum
HWP	global_defs.h	/^typedef struct HWP_Struct HWP;$/;"	t	typeref:struct:HWP_Struct
HWP_DynAggr	pref_common.h	/^} HWP_DynAggr;$/;"	t	typeref:enum:HWP_DynAggr_Enum
HWP_DynAggr_Enum	pref_common.h	/^typedef enum HWP_DynAggr_Enum {$/;"	g
HWP_Region_LineUseStatus	pref_common.h	/^} HWP_Region_LineUseStatus;$/;"	t	typeref:enum:HWP_Region_LineUseStatus_Enum
HWP_Region_LineUseStatus_Enum	pref_common.h	/^typedef enum HWP_Region_LineUseStatus_Enum {$/;"	g
HWP_Type	pref_common.h	/^} HWP_Type;$/;"	t	typeref:enum:HWP_Type_Enum
HWP_Type_Enum	pref_common.h	/^typedef enum HWP_Type_Enum {$/;"	g
HWP_UL1_MISS	pref_common.h	/^  HWP_UL1_MISS,           \/\/ Data came in due to a load miss$/;"	e	enum:HWP_Region_LineUseStatus_Enum
HWP_UL1_PREF_UNUSED	pref_common.h	/^  HWP_UL1_PREF_UNUSED,    \/\/ Data came in due to a prefetch - went unused$/;"	e	enum:HWP_Region_LineUseStatus_Enum
HWP_UL1_PREF_USED	pref_common.h	/^  HWP_UL1_PREF_USED       \/\/ Data came in due to a prefetch - was used$/;"	e	enum:HWP_Region_LineUseStatus_Enum
Hash_Table	global_defs.h	/^typedef struct Hash_Table_struct Hash_Table;$/;"	t	typeref:struct:Hash_Table_struct
IB	router.cc	61;"	d	file:
ICACHE_FILL	statsEnums.h	/^ICACHE_FILL,$/;"	e	enum:StatisticsEnum
ICACHE_HIT	statsEnums.h	/^ICACHE_HIT,$/;"	e	enum:StatisticsEnum
ICACHE_MISS	statsEnums.h	/^ICACHE_MISS,$/;"	e	enum:StatisticsEnum
ICACHE_MISS_TOTAL	statsEnums.h	/^ICACHE_MISS_TOTAL,$/;"	e	enum:StatisticsEnum
IFETCH_WB_FIRST_SCHEDULE	statsEnums.h	/^IFETCH_WB_FIRST_SCHEDULE,$/;"	e	enum:StatisticsEnum
INIT	router.cc	60;"	d	file:
INIT_CACHE_DATA_VALUE	cache.h	62;"	d
INST_COUNT	statsEnums.h	/^INST_COUNT,$/;"	e	enum:StatisticsEnum
INST_COUNT_TOT	statsEnums.h	/^INST_COUNT_TOT,$/;"	e	enum:StatisticsEnum
INST_INFO_H_INCLUDED	inst_info.h	39;"	d
INT64_C_M_1	global_defs.h	195;"	d
INTERLEAVED	router.cc	76;"	d	file:
INT_REG	inst_info.h	/^  INT_REG, \/**< Integer register *\/$/;"	e	enum:Reg_Type_enum
I_STATE	memory.h	/^  I_STATE,$/;"	e	enum:COHERENCE_STATE
Iaq_Type_enum	uop.h	/^typedef enum Iaq_Type_enum{$/;"	g
IsLoad	memory.cc	/^inline bool IsLoad(Mem_Type type)$/;"	f
IsStore	memory.cc	/^inline bool IsStore(Mem_Type type)$/;"	f
KNOB	all_knobs.h	7;"	d
KNOB_32_64_ISA	all_knobs.h	/^		KnobTemplate< int >* KNOB_32_64_ISA;$/;"	m	class:all_knobs_c
KNOB_ABIP_CACHE_DIP	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ABIP_CACHE_DIP;$/;"	m	class:all_knobs_c
KNOB_ABIP_CACHE_PERIOD	all_knobs.h	/^		KnobTemplate< int >* KNOB_ABIP_CACHE_PERIOD;$/;"	m	class:all_knobs_c
KNOB_ADD_PRED_TO_BP_HIST	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ADD_PRED_TO_BP_HIST;$/;"	m	class:all_knobs_c
KNOB_ALLOC_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_ALLOC_LATENCY;$/;"	m	class:all_knobs_c
KNOB_ALLOC_TO_EXEC_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_ALLOC_TO_EXEC_LATENCY;$/;"	m	class:all_knobs_c
KNOB_ALU_CDB_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_ALU_CDB_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_ALU_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_ALU_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_ARBITRATION_POLICY	all_knobs.h	/^		KnobTemplate< int >* KNOB_ARBITRATION_POLICY;$/;"	m	class:all_knobs_c
KNOB_ARR_100	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ARR_100;$/;"	m	class:all_knobs_c
KNOB_ARR_ADV	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ARR_ADV;$/;"	m	class:all_knobs_c
KNOB_ARR_DELTA	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ARR_DELTA;$/;"	m	class:all_knobs_c
KNOB_ARR_THRESHOLD	all_knobs.h	/^		KnobTemplate< int >* KNOB_ARR_THRESHOLD;$/;"	m	class:all_knobs_c
KNOB_ASJF_ALPHA	all_knobs.h	/^		KnobTemplate< float >* KNOB_ASJF_ALPHA;$/;"	m	class:all_knobs_c
KNOB_ASJF_M	all_knobs.h	/^		KnobTemplate< float >* KNOB_ASJF_M;$/;"	m	class:all_knobs_c
KNOB_ASSIGN_BLOCKS_GREEDILY_INITIALLY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ASSIGN_BLOCKS_GREEDILY_INITIALLY;$/;"	m	class:all_knobs_c
KNOB_BDP_DEGREE	all_knobs.h	/^		KnobTemplate< int >* KNOB_BDP_DEGREE;$/;"	m	class:all_knobs_c
KNOB_BDP_THRESHOLD	all_knobs.h	/^		KnobTemplate< int >* KNOB_BDP_THRESHOLD;$/;"	m	class:all_knobs_c
KNOB_BLOCKS_TO_SIMULATE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BLOCKS_TO_SIMULATE;$/;"	m	class:all_knobs_c
KNOB_BLOCK_KEY_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BLOCK_KEY_SIZE;$/;"	m	class:all_knobs_c
KNOB_BP_DIR_MECH	all_knobs.h	/^		KnobTemplate< string >* KNOB_BP_DIR_MECH;$/;"	m	class:all_knobs_c
KNOB_BP_HIST_HIGH_BIT_MOST_RECENT	all_knobs.h	/^		KnobTemplate< bool >* KNOB_BP_HIST_HIGH_BIT_MOST_RECENT;$/;"	m	class:all_knobs_c
KNOB_BP_HIST_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BP_HIST_LENGTH;$/;"	m	class:all_knobs_c
KNOB_BTB_ASSOC	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BTB_ASSOC;$/;"	m	class:all_knobs_c
KNOB_BTB_BANK_NUM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BTB_BANK_NUM;$/;"	m	class:all_knobs_c
KNOB_BTB_ENTRIES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_BTB_ENTRIES;$/;"	m	class:all_knobs_c
KNOB_BUG_DETECTOR_ENABLE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_BUG_DETECTOR_ENABLE;$/;"	m	class:all_knobs_c
KNOB_BYTE_LEVEL_ACCESS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_BYTE_LEVEL_ACCESS;$/;"	m	class:all_knobs_c
KNOB_CACHE_FOR_STREAM_CPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_CACHE_FOR_STREAM_CPU;$/;"	m	class:all_knobs_c
KNOB_CACHE_USE_PSEUDO_LRU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_CACHE_USE_PSEUDO_LRU;$/;"	m	class:all_knobs_c
KNOB_CLOCK_CPU	all_knobs.h	/^		KnobTemplate< float >* KNOB_CLOCK_CPU;$/;"	m	class:all_knobs_c
KNOB_CLOCK_GPU	all_knobs.h	/^		KnobTemplate< float >* KNOB_CLOCK_GPU;$/;"	m	class:all_knobs_c
KNOB_CLOCK_L3	all_knobs.h	/^		KnobTemplate< float >* KNOB_CLOCK_L3;$/;"	m	class:all_knobs_c
KNOB_CLOCK_MC	all_knobs.h	/^		KnobTemplate< float >* KNOB_CLOCK_MC;$/;"	m	class:all_knobs_c
KNOB_CLOCK_NOC	all_knobs.h	/^		KnobTemplate< float >* KNOB_CLOCK_NOC;$/;"	m	class:all_knobs_c
KNOB_COLLECT_CACHE_INFO	all_knobs.h	/^		KnobTemplate< int >* KNOB_COLLECT_CACHE_INFO;$/;"	m	class:all_knobs_c
KNOB_COLLECT_CPI_INFO	all_knobs.h	/^		KnobTemplate< int >* KNOB_COLLECT_CPI_INFO;$/;"	m	class:all_knobs_c
KNOB_COLLECT_CPI_INFO_FOR_MULTI_GPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_COLLECT_CPI_INFO_FOR_MULTI_GPU;$/;"	m	class:all_knobs_c
KNOB_COMPUTE_CAPABILITY	all_knobs.h	/^		KnobTemplate< float >* KNOB_COMPUTE_CAPABILITY;$/;"	m	class:all_knobs_c
KNOB_CONST_CACHE_ASSOC	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_CONST_CACHE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_CONST_CACHE_BANKS	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_CONST_CACHE_BANKS;$/;"	m	class:all_knobs_c
KNOB_CONST_CACHE_CYCLES	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_CONST_CACHE_CYCLES;$/;"	m	class:all_knobs_c
KNOB_CONST_CACHE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_CONST_CACHE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_CONST_CACHE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_CONST_CACHE_SIZE;$/;"	m	class:all_knobs_c
KNOB_CORE_ENABLE_BEGIN	all_knobs.h	/^		KnobTemplate< int >* KNOB_CORE_ENABLE_BEGIN;$/;"	m	class:all_knobs_c
KNOB_CORE_ENABLE_END	all_knobs.h	/^		KnobTemplate< int >* KNOB_CORE_ENABLE_END;$/;"	m	class:all_knobs_c
KNOB_CORE_TYPE	all_knobs.h	/^		KnobTemplate< string >* KNOB_CORE_TYPE;$/;"	m	class:all_knobs_c
KNOB_CPU_FETCH_RATIO	all_knobs.h	/^		KnobTemplate< int >* KNOB_CPU_FETCH_RATIO;$/;"	m	class:all_knobs_c
KNOB_CPU_VC_PARTITION	all_knobs.h	/^		KnobTemplate< int >* KNOB_CPU_VC_PARTITION;$/;"	m	class:all_knobs_c
KNOB_DCACHE_INFINITE_PORT	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DCACHE_INFINITE_PORT;$/;"	m	class:all_knobs_c
KNOB_DCACHE_THROUGHPUT	all_knobs.h	/^		KnobTemplate< int >* KNOB_DCACHE_THROUGHPUT;$/;"	m	class:all_knobs_c
KNOB_DEBUG_ALLOC_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_ALLOC_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_BP_DIR	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_BP_DIR;$/;"	m	class:all_knobs_c
KNOB_DEBUG_BTB	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_BTB;$/;"	m	class:all_knobs_c
KNOB_DEBUG_CACHE_LIB	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_CACHE_LIB;$/;"	m	class:all_knobs_c
KNOB_DEBUG_CORE_ID	all_knobs.h	/^		KnobTemplate< int >* KNOB_DEBUG_CORE_ID;$/;"	m	class:all_knobs_c
KNOB_DEBUG_CYCLE_START	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_CYCLE_START;$/;"	m	class:all_knobs_c
KNOB_DEBUG_CYCLE_STOP	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_CYCLE_STOP;$/;"	m	class:all_knobs_c
KNOB_DEBUG_DCU_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_DCU_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_DRAM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_DRAM;$/;"	m	class:all_knobs_c
KNOB_DEBUG_EXEC_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_EXEC_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_FRONT_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_FRONT_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_INST_START	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_INST_START;$/;"	m	class:all_knobs_c
KNOB_DEBUG_INST_STOP	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_INST_STOP;$/;"	m	class:all_knobs_c
KNOB_DEBUG_MAP_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_MAP_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_MEM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_MEM;$/;"	m	class:all_knobs_c
KNOB_DEBUG_MEM_TRACE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_MEM_TRACE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_NOC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_NOC;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PORT	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_PORT;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF_2DC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF_2DC;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF_GHB	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF_GHB;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF_PHASE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF_PHASE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF_STRIDE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF_STRIDE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PREF_STRIDEPC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEBUG_PREF_STRIDEPC;$/;"	m	class:all_knobs_c
KNOB_DEBUG_PRINT_TRACE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_PRINT_TRACE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_RETIRE_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_RETIRE_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_SCHEDULE_STAGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_SCHEDULE_STAGE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_SIM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_SIM;$/;"	m	class:all_knobs_c
KNOB_DEBUG_SIM_THREAD_SCHEDULE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_SIM_THREAD_SCHEDULE;$/;"	m	class:all_knobs_c
KNOB_DEBUG_STREAM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_STREAM;$/;"	m	class:all_knobs_c
KNOB_DEBUG_TRACE_READ	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEBUG_TRACE_READ;$/;"	m	class:all_knobs_c
KNOB_DEC_RR_FREQ	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DEC_RR_FREQ;$/;"	m	class:all_knobs_c
KNOB_DEC_STREAM_BUF_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_DEC_STREAM_BUF_SIZE;$/;"	m	class:all_knobs_c
KNOB_DEFAULT_INTERLEAVING	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DEFAULT_INTERLEAVING;$/;"	m	class:all_knobs_c
KNOB_DRAM_ACTIVATE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_ACTIVATE;$/;"	m	class:all_knobs_c
KNOB_DRAM_ADDITIONAL_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_ADDITIONAL_LATENCY;$/;"	m	class:all_knobs_c
KNOB_DRAM_BANK_XOR_INDEX	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DRAM_BANK_XOR_INDEX;$/;"	m	class:all_knobs_c
KNOB_DRAM_BUFFER_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_BUFFER_SIZE;$/;"	m	class:all_knobs_c
KNOB_DRAM_BUS_WIDTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_BUS_WIDTH;$/;"	m	class:all_knobs_c
KNOB_DRAM_CLOCKRATE	all_knobs.h	/^		KnobTemplate< float >* KNOB_DRAM_CLOCKRATE;$/;"	m	class:all_knobs_c
KNOB_DRAM_COLUMN	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_COLUMN;$/;"	m	class:all_knobs_c
KNOB_DRAM_DDR_FACTOR	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_DDR_FACTOR;$/;"	m	class:all_knobs_c
KNOB_DRAM_INTERLEAVE_FACTOR	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_INTERLEAVE_FACTOR;$/;"	m	class:all_knobs_c
KNOB_DRAM_MERGE_REQUESTS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_DRAM_MERGE_REQUESTS;$/;"	m	class:all_knobs_c
KNOB_DRAM_NUM_BANKS	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_NUM_BANKS;$/;"	m	class:all_knobs_c
KNOB_DRAM_NUM_CHANNEL	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_NUM_CHANNEL;$/;"	m	class:all_knobs_c
KNOB_DRAM_NUM_MC	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_NUM_MC;$/;"	m	class:all_knobs_c
KNOB_DRAM_ONE_CYCLE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_ONE_CYCLE;$/;"	m	class:all_knobs_c
KNOB_DRAM_PRECHARGE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_DRAM_PRECHARGE;$/;"	m	class:all_knobs_c
KNOB_DRAM_ROWBUFFER_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_ROWBUFFER_SIZE;$/;"	m	class:all_knobs_c
KNOB_DRAM_SCHEDULE_GRANULARITY	all_knobs.h	/^		KnobTemplate< int >* KNOB_DRAM_SCHEDULE_GRANULARITY;$/;"	m	class:all_knobs_c
KNOB_DRAM_SCHEDULING_POLICY	all_knobs.h	/^		KnobTemplate< string >* KNOB_DRAM_SCHEDULING_POLICY;$/;"	m	class:all_knobs_c
KNOB_EI_COMMIT_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_EI_COMMIT_WIDTH;$/;"	m	class:all_knobs_c
KNOB_EI_DECODE_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_EI_DECODE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_EI_EXEC_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_EI_EXEC_WIDTH;$/;"	m	class:all_knobs_c
KNOB_EI_ISSUE_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_EI_ISSUE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_ENABLE_ADAPTIVE_RING_ROUTING	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_ADAPTIVE_RING_ROUTING;$/;"	m	class:all_knobs_c
KNOB_ENABLE_BTB	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_BTB;$/;"	m	class:all_knobs_c
KNOB_ENABLE_CACHE_COHERENCE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_CACHE_COHERENCE;$/;"	m	class:all_knobs_c
KNOB_ENABLE_CHANNEL_PARTITION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_CHANNEL_PARTITION;$/;"	m	class:all_knobs_c
KNOB_ENABLE_CONDITIONAL_EXECUTION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_CONDITIONAL_EXECUTION;$/;"	m	class:all_knobs_c
KNOB_ENABLE_ENERGY_INTROSPECTOR	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_ENERGY_INTROSPECTOR;$/;"	m	class:all_knobs_c
KNOB_ENABLE_HETEROGENEOUS_LINK	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_HETEROGENEOUS_LINK;$/;"	m	class:all_knobs_c
KNOB_ENABLE_HETEROGENEOUS_LINK_WIDTH	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_HETEROGENEOUS_LINK_WIDTH;$/;"	m	class:all_knobs_c
KNOB_ENABLE_IRIS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_IRIS;$/;"	m	class:all_knobs_c
KNOB_ENABLE_NEW_NOC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_NEW_NOC;$/;"	m	class:all_knobs_c
KNOB_ENABLE_NOC_VC_PARTITION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_NOC_VC_PARTITION;$/;"	m	class:all_knobs_c
KNOB_ENABLE_PREF_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_PREF_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_ENABLE_PREF_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_PREF_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_ENABLE_PREF_SMALL_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ENABLE_PREF_SMALL_CORE;$/;"	m	class:all_knobs_c
KNOB_EXEC_RETIRE_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_EXEC_RETIRE_LATENCY;$/;"	m	class:all_knobs_c
KNOB_EXTRA_LD_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_EXTRA_LD_LATENCY;$/;"	m	class:all_knobs_c
KNOB_EXTRA_RECOVERY_CYCLES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_EXTRA_RECOVERY_CYCLES;$/;"	m	class:all_knobs_c
KNOB_FEATURE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_FEATURE_SIZE;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_MERGE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_FETCH_FAIR_MERGE;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_MERGE_TH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_FETCH_FAIR_MERGE_TH;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_PERIOD	all_knobs.h	/^		KnobTemplate< uns >* KNOB_FETCH_FAIR_PERIOD;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_TSHARE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_FETCH_FAIR_TSHARE;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_TSHARE_FREQ	all_knobs.h	/^		KnobTemplate< uns >* KNOB_FETCH_FAIR_TSHARE_FREQ;$/;"	m	class:all_knobs_c
KNOB_FETCH_FAIR_TSHARE_TH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_FETCH_FAIR_TSHARE_TH;$/;"	m	class:all_knobs_c
KNOB_FETCH_LARGE_WDITH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FETCH_LARGE_WDITH;$/;"	m	class:all_knobs_c
KNOB_FETCH_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_FETCH_LATENCY;$/;"	m	class:all_knobs_c
KNOB_FETCH_MEDIUM_WDITH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FETCH_MEDIUM_WDITH;$/;"	m	class:all_knobs_c
KNOB_FETCH_ONLY_LOAD_READY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_FETCH_ONLY_LOAD_READY;$/;"	m	class:all_knobs_c
KNOB_FETCH_ONLY_SCHED_READY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_FETCH_ONLY_SCHED_READY;$/;"	m	class:all_knobs_c
KNOB_FETCH_POLICY	all_knobs.h	/^		KnobTemplate< string >* KNOB_FETCH_POLICY;$/;"	m	class:all_knobs_c
KNOB_FETCH_WDITH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FETCH_WDITH;$/;"	m	class:all_knobs_c
KNOB_FE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_FE_SIZE;$/;"	m	class:all_knobs_c
KNOB_FILE_TAG	all_knobs.h	/^		KnobTemplate< string >* KNOB_FILE_TAG;$/;"	m	class:all_knobs_c
KNOB_FIXED_LATENCY_NOC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_FIXED_LATENCY_NOC;$/;"	m	class:all_knobs_c
KNOB_FLOAT_ALLOCQ_INDEX	all_knobs.h	/^		KnobTemplate< int >* KNOB_FLOAT_ALLOCQ_INDEX;$/;"	m	class:all_knobs_c
KNOB_FORWARD_PROGRESS_LIMIT	all_knobs.h	/^		KnobTemplate< uns64 >* KNOB_FORWARD_PROGRESS_LIMIT;$/;"	m	class:all_knobs_c
KNOB_FPU_CDB_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_FPU_CDB_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_FPU_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_FPU_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_FP_INST_WINDOW_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_FP_INST_WINDOW_SIZE;$/;"	m	class:all_knobs_c
KNOB_FP_REGFILE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FP_REGFILE_SIZE;$/;"	m	class:all_knobs_c
KNOB_FQ_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_FQ_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_FQ_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_FQ_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_FQ_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_FQ_SIZE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_LARGE_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_LARGE_RATE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_MEDIUM_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_MEDIUM_RATE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_RATE;$/;"	m	class:all_knobs_c
KNOB_FSCHED_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_FSCHED_SIZE;$/;"	m	class:all_knobs_c
KNOB_GEN_ALLOCQ_INDEX	all_knobs.h	/^		KnobTemplate< int >* KNOB_GEN_ALLOCQ_INDEX;$/;"	m	class:all_knobs_c
KNOB_GIAQ_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_GIAQ_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_GIAQ_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_GIAQ_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_GIAQ_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_GIAQ_SIZE;$/;"	m	class:all_knobs_c
KNOB_GPU_FETCH_RATIO	all_knobs.h	/^		KnobTemplate< int >* KNOB_GPU_FETCH_RATIO;$/;"	m	class:all_knobs_c
KNOB_GPU_SCHED	all_knobs.h	/^		KnobTemplate< bool >* KNOB_GPU_SCHED;$/;"	m	class:all_knobs_c
KNOB_GPU_SCHEDULE_RATIO	all_knobs.h	/^		KnobTemplate< int >* KNOB_GPU_SCHEDULE_RATIO;$/;"	m	class:all_knobs_c
KNOB_GPU_SHARE_ALLOCQS_BETWEEN_THREADS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_GPU_SHARE_ALLOCQS_BETWEEN_THREADS;$/;"	m	class:all_knobs_c
KNOB_GPU_USE_SINGLE_ALLOCQ_TYPE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_GPU_USE_SINGLE_ALLOCQ_TYPE;$/;"	m	class:all_knobs_c
KNOB_GPU_VC_PARTITION	all_knobs.h	/^		KnobTemplate< int >* KNOB_GPU_VC_PARTITION;$/;"	m	class:all_knobs_c
KNOB_GPU_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_GPU_WIDTH;$/;"	m	class:all_knobs_c
KNOB_HEARTBEAT_INTERVAL	all_knobs.h	/^		KnobTemplate< uns >* KNOB_HEARTBEAT_INTERVAL;$/;"	m	class:all_knobs_c
KNOB_HETERO_GPU_CORE_DISABLE	all_knobs.h	/^		KnobTemplate< int >* KNOB_HETERO_GPU_CORE_DISABLE;$/;"	m	class:all_knobs_c
KNOB_HETERO_MEM_PRIORITY_CPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_HETERO_MEM_PRIORITY_CPU;$/;"	m	class:all_knobs_c
KNOB_HETERO_MEM_PRIORITY_GPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_HETERO_MEM_PRIORITY_GPU;$/;"	m	class:all_knobs_c
KNOB_HETERO_NOC_USE_SAME_QUEUE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_HETERO_NOC_USE_SAME_QUEUE;$/;"	m	class:all_knobs_c
KNOB_HETERO_STATIC_CACHE_PARTITION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_HETERO_STATIC_CACHE_PARTITION;$/;"	m	class:all_knobs_c
KNOB_HETERO_STATIC_CPU_PARTITION	all_knobs.h	/^		KnobTemplate< int >* KNOB_HETERO_STATIC_CPU_PARTITION;$/;"	m	class:all_knobs_c
KNOB_HETERO_STATIC_GPU_PARTITION	all_knobs.h	/^		KnobTemplate< int >* KNOB_HETERO_STATIC_GPU_PARTITION;$/;"	m	class:all_knobs_c
KNOB_HIST_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_HIST_LENGTH;$/;"	m	class:all_knobs_c
KNOB_HW_PREF_HIT_TRAIN_STREAM	all_knobs.h	/^		KnobTemplate< bool >* KNOB_HW_PREF_HIT_TRAIN_STREAM;$/;"	m	class:all_knobs_c
KNOB_H_INCLUDED	knob.h	39;"	d
KNOB_ICACHE_ASSOC	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_ICACHE_BANKS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_BANKS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_BY_PASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ICACHE_BY_PASS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_CYCLES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_CYCLES;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_ASSOC	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LARGE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_BANKS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LARGE_BANKS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_BY_PASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ICACHE_LARGE_BY_PASS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_CYCLES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LARGE_CYCLES;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LARGE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LARGE_NUM_SET	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LARGE_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_ICACHE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_ASSOC	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_MEDIUM_ASSOC;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_BANKS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_MEDIUM_BANKS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_BY_PASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ICACHE_MEDIUM_BY_PASS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_CYCLES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_MEDIUM_CYCLES;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_MEDIUM_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_ICACHE_MEDIUM_NUM_SET	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_MEDIUM_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_ICACHE_NUM_SET	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_ICACHE_READ_PORTS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_READ_PORTS;$/;"	m	class:all_knobs_c
KNOB_ICACHE_THROUGHPUT	all_knobs.h	/^		KnobTemplate< int >* KNOB_ICACHE_THROUGHPUT;$/;"	m	class:all_knobs_c
KNOB_ICACHE_WRITE_PORTS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_ICACHE_WRITE_PORTS;$/;"	m	class:all_knobs_c
KNOB_IDEAL_NOC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_IDEAL_NOC;$/;"	m	class:all_knobs_c
KNOB_IDEAL_NOC_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_IDEAL_NOC_LATENCY;$/;"	m	class:all_knobs_c
KNOB_IFU_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_IFU_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_IGNORE_DEP	all_knobs.h	/^		KnobTemplate< bool >* KNOB_IGNORE_DEP;$/;"	m	class:all_knobs_c
KNOB_INFINITE_PORT	all_knobs.h	/^		KnobTemplate< bool >* KNOB_INFINITE_PORT;$/;"	m	class:all_knobs_c
KNOB_INST_BUF_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_INST_BUF_SIZE;$/;"	m	class:all_knobs_c
KNOB_INST_LENGTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_INST_LENGTH;$/;"	m	class:all_knobs_c
KNOB_INT_REGFILE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_INT_REGFILE_SIZE;$/;"	m	class:all_knobs_c
KNOB_IRIS_CREDIT	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_CREDIT;$/;"	m	class:all_knobs_c
KNOB_IRIS_GRIDSIZE	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_GRIDSIZE;$/;"	m	class:all_knobs_c
KNOB_IRIS_INT_BUFF_WIDTH	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_INT_BUFF_WIDTH;$/;"	m	class:all_knobs_c
KNOB_IRIS_LINK_WIDTH	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_LINK_WIDTH;$/;"	m	class:all_knobs_c
KNOB_IRIS_MEMORY_LATENCY	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_MEMORY_LATENCY;$/;"	m	class:all_knobs_c
KNOB_IRIS_NUM_VC	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_NUM_VC;$/;"	m	class:all_knobs_c
KNOB_IRIS_RC_METHOD	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_RC_METHOD;$/;"	m	class:all_knobs_c
KNOB_IRIS_RESP_PAYLOAD_LEN	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_RESP_PAYLOAD_LEN;$/;"	m	class:all_knobs_c
KNOB_IRIS_SELF_ASSIGN_DEST_ID	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_SELF_ASSIGN_DEST_ID;$/;"	m	class:all_knobs_c
KNOB_IRIS_TOPOLOGY	all_knobs.h	/^		KnobTemplate< string >* KNOB_IRIS_TOPOLOGY;$/;"	m	class:all_knobs_c
KNOB_ISCHED_LARGE_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_LARGE_RATE;$/;"	m	class:all_knobs_c
KNOB_ISCHED_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_ISCHED_MEDIUM_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_MEDIUM_RATE;$/;"	m	class:all_knobs_c
KNOB_ISCHED_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_ISCHED_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_RATE;$/;"	m	class:all_knobs_c
KNOB_ISCHED_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ISCHED_SIZE;$/;"	m	class:all_knobs_c
KNOB_IS_FERMI	all_knobs.h	/^		KnobTemplate< bool >* KNOB_IS_FERMI;$/;"	m	class:all_knobs_c
KNOB_IS_GPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_IS_GPU;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_LARGE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L1_LARGE_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_LARGE_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_LARGE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_LARGE_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L1_LARGE_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_LARGE_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_MEDIUM_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L1_MEDIUM_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_MEDIUM_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_MEDIUM_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_MEDIUM_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L1_MEDIUM_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_MEDIUM_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L1_READ_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_READ_PORTS;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_SMALL_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L1_SMALL_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_SMALL_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_SMALL_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_SMALL_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L1_SMALL_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_SMALL_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L1_WRITE_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L1_WRITE_PORTS;$/;"	m	class:all_knobs_c
KNOB_L2HIT_L2ACCESS_REQ_Q_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_L2ACCESS_REQ_Q_SIZE;$/;"	m	class:all_knobs_c
KNOB_L2HIT_PREF_REQ_Q_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_PREF_REQ_Q_SIZE;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_BUFFER_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_STREAM_BUFFER_N;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_L2MISS_DROP	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L2HIT_STREAM_L2MISS_DROP;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_STREAM_LENGTH;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_PREFETCH_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_STREAM_PREFETCH_N;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_SCHEDULE_NUM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_STREAM_SCHEDULE_NUM;$/;"	m	class:all_knobs_c
KNOB_L2HIT_STREAM_START_DIS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_L2HIT_STREAM_START_DIS;$/;"	m	class:all_knobs_c
KNOB_L2_CLOCKRATE	all_knobs.h	/^		KnobTemplate< float >* KNOB_L2_CLOCKRATE;$/;"	m	class:all_knobs_c
KNOB_L2_L3_LINK_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_L3_LINK_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_LARGE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L2_LARGE_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_LARGE_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_LARGE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_LARGE_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L2_LARGE_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_LARGE_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_MEDIUM_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L2_MEDIUM_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_MEDIUM_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_MEDIUM_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_MEDIUM_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L2_MEDIUM_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_MEDIUM_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L2_READ_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_READ_PORTS;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_SMALL_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_BYPASS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_L2_SMALL_BYPASS;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_SMALL_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_SMALL_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_SMALL_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L2_SMALL_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_SMALL_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L2_THROUGHPUT	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_THROUGHPUT;$/;"	m	class:all_knobs_c
KNOB_L2_WRITE_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L2_WRITE_PORTS;$/;"	m	class:all_knobs_c
KNOB_L3_ADDITIONAL_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_ADDITIONAL_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L3_ASSOC	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_ASSOC;$/;"	m	class:all_knobs_c
KNOB_L3_CLOCKRATE	all_knobs.h	/^		KnobTemplate< float >* KNOB_L3_CLOCKRATE;$/;"	m	class:all_knobs_c
KNOB_L3_DRAM_LINK_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_DRAM_LINK_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L3_INTERLEAVE_FACTOR	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_INTERLEAVE_FACTOR;$/;"	m	class:all_knobs_c
KNOB_L3_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_LATENCY;$/;"	m	class:all_knobs_c
KNOB_L3_LINE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_L3_NUM_BANK	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_NUM_BANK;$/;"	m	class:all_knobs_c
KNOB_L3_NUM_SET	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_NUM_SET;$/;"	m	class:all_knobs_c
KNOB_L3_READ_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_READ_PORTS;$/;"	m	class:all_knobs_c
KNOB_L3_THROUGHPUT	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_THROUGHPUT;$/;"	m	class:all_knobs_c
KNOB_L3_WRITE_PORTS	all_knobs.h	/^		KnobTemplate< int >* KNOB_L3_WRITE_PORTS;$/;"	m	class:all_knobs_c
KNOB_LARGE_CORE_ALLOC_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_LARGE_CORE_ALLOC_LATENCY;$/;"	m	class:all_knobs_c
KNOB_LARGE_CORE_FETCH_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_LARGE_CORE_FETCH_LATENCY;$/;"	m	class:all_knobs_c
KNOB_LARGE_CORE_SCHEDULE	all_knobs.h	/^		KnobTemplate< string >* KNOB_LARGE_CORE_SCHEDULE;$/;"	m	class:all_knobs_c
KNOB_LARGE_CORE_TYPE	all_knobs.h	/^		KnobTemplate< string >* KNOB_LARGE_CORE_TYPE;$/;"	m	class:all_knobs_c
KNOB_LARGE_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_LARGE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_LDST_PER_SM	all_knobs.h	/^		KnobTemplate< int >* KNOB_LDST_PER_SM;$/;"	m	class:all_knobs_c
KNOB_LINK_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_LINK_LATENCY;$/;"	m	class:all_knobs_c
KNOB_LINK_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_LINK_WIDTH;$/;"	m	class:all_knobs_c
KNOB_LLC_TYPE	all_knobs.h	/^		KnobTemplate< string >* KNOB_LLC_TYPE;$/;"	m	class:all_knobs_c
KNOB_LOAD_BUF_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_LOAD_BUF_SIZE;$/;"	m	class:all_knobs_c
KNOB_LOG2_PREF_POLBV_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_LOG2_PREF_POLBV_SIZE;$/;"	m	class:all_knobs_c
KNOB_LSU_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_LSU_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_MAX_BLOCKS_TO_SIMULATE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_BLOCKS_TO_SIMULATE;$/;"	m	class:all_knobs_c
KNOB_MAX_BLOCK_PER_CORE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_BLOCK_PER_CORE;$/;"	m	class:all_knobs_c
KNOB_MAX_BLOCK_PER_CORE_SUPER	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_BLOCK_PER_CORE_SUPER;$/;"	m	class:all_knobs_c
KNOB_MAX_INSTS	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MAX_INSTS;$/;"	m	class:all_knobs_c
KNOB_MAX_INSTS1	all_knobs.h	/^		KnobTemplate< uns64 >* KNOB_MAX_INSTS1;$/;"	m	class:all_knobs_c
KNOB_MAX_NUM_CORE_PER_APPL	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_NUM_CORE_PER_APPL;$/;"	m	class:all_knobs_c
KNOB_MAX_THREADS_PER_CORE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_THREADS_PER_CORE;$/;"	m	class:all_knobs_c
KNOB_MAX_THREADS_PER_LARGE_CORE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_THREADS_PER_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_MAX_THREADS_PER_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_THREADS_PER_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_MAX_TRANSACTION_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_TRANSACTION_SIZE;$/;"	m	class:all_knobs_c
KNOB_MAX_WARP_PER_SM	all_knobs.h	/^		KnobTemplate< int >* KNOB_MAX_WARP_PER_SM;$/;"	m	class:all_knobs_c
KNOB_MEDIUM_CORE_ALLOC_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MEDIUM_CORE_ALLOC_LATENCY;$/;"	m	class:all_knobs_c
KNOB_MEDIUM_CORE_FETCH_LATENCY	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MEDIUM_CORE_FETCH_LATENCY;$/;"	m	class:all_knobs_c
KNOB_MEDIUM_CORE_SCHEDULE	all_knobs.h	/^		KnobTemplate< string >* KNOB_MEDIUM_CORE_SCHEDULE;$/;"	m	class:all_knobs_c
KNOB_MEDIUM_CORE_TYPE	all_knobs.h	/^		KnobTemplate< string >* KNOB_MEDIUM_CORE_TYPE;$/;"	m	class:all_knobs_c
KNOB_MEDIUM_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEDIUM_WIDTH;$/;"	m	class:all_knobs_c
KNOB_MEMORY_TYPE	all_knobs.h	/^		KnobTemplate< string >* KNOB_MEMORY_TYPE;$/;"	m	class:all_knobs_c
KNOB_MEM_ALLOCQ_INDEX	all_knobs.h	/^		KnobTemplate< int >* KNOB_MEM_ALLOCQ_INDEX;$/;"	m	class:all_knobs_c
KNOB_MEM_D_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_MEM_D_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_MEM_I_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_MEM_I_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_MEM_MSHR_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MEM_MSHR_SIZE;$/;"	m	class:all_knobs_c
KNOB_MEM_OBEY_STORE_DEP	all_knobs.h	/^		KnobTemplate< bool >* KNOB_MEM_OBEY_STORE_DEP;$/;"	m	class:all_knobs_c
KNOB_MEM_OOO_STORES	all_knobs.h	/^		KnobTemplate< bool >* KNOB_MEM_OOO_STORES;$/;"	m	class:all_knobs_c
KNOB_MEM_QUEUE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_MEM_QUEUE_SIZE;$/;"	m	class:all_knobs_c
KNOB_MEM_SIZE_AMP	all_knobs.h	/^		KnobTemplate< int >* KNOB_MEM_SIZE_AMP;$/;"	m	class:all_knobs_c
KNOB_MEU_LARGE_NLB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_LARGE_NLB;$/;"	m	class:all_knobs_c
KNOB_MEU_LARGE_NSB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_LARGE_NSB;$/;"	m	class:all_knobs_c
KNOB_MEU_MEDIUM_NLB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_MEDIUM_NLB;$/;"	m	class:all_knobs_c
KNOB_MEU_MEDIUM_NSB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_MEDIUM_NSB;$/;"	m	class:all_knobs_c
KNOB_MEU_NLB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_NLB;$/;"	m	class:all_knobs_c
KNOB_MEU_NSB	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MEU_NSB;$/;"	m	class:all_knobs_c
KNOB_MIAQ_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MIAQ_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_MIAQ_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MIAQ_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_MIAQ_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_MIAQ_SIZE;$/;"	m	class:all_knobs_c
KNOB_MICRO_OPCODE_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_MICRO_OPCODE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_MSCHED_LARGE_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_LARGE_RATE;$/;"	m	class:all_knobs_c
KNOB_MSCHED_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_MSCHED_MEDIUM_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_MEDIUM_RATE;$/;"	m	class:all_knobs_c
KNOB_MSCHED_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_MSCHED_RATE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_RATE;$/;"	m	class:all_knobs_c
KNOB_MSCHED_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_MSCHED_SIZE;$/;"	m	class:all_knobs_c
KNOB_MT_GHR_INDEX_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_MT_GHR_INDEX_LENGTH;$/;"	m	class:all_knobs_c
KNOB_MT_NO_FETCH_BR	all_knobs.h	/^		KnobTemplate< bool >* KNOB_MT_NO_FETCH_BR;$/;"	m	class:all_knobs_c
KNOB_MT_STOP_FAIR_INIT	all_knobs.h	/^		KnobTemplate< uns >* KNOB_MT_STOP_FAIR_INIT;$/;"	m	class:all_knobs_c
KNOB_MUL_CDB_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_MUL_CDB_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_MUL_DUTY_CYCLE	all_knobs.h	/^		KnobTemplate< float >* KNOB_MUL_DUTY_CYCLE;$/;"	m	class:all_knobs_c
KNOB_NEW_INTERLEAVING_DIFF_GRANULARITY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_NEW_INTERLEAVING_DIFF_GRANULARITY;$/;"	m	class:all_knobs_c
KNOB_NEW_INTERLEAVING_SAME_GRANULARITY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_NEW_INTERLEAVING_SAME_GRANULARITY;$/;"	m	class:all_knobs_c
KNOB_NOC_DIMENSION	all_knobs.h	/^		KnobTemplate< int >* KNOB_NOC_DIMENSION;$/;"	m	class:all_knobs_c
KNOB_NOC_TOPOLOGY	all_knobs.h	/^		KnobTemplate< string >* KNOB_NOC_TOPOLOGY;$/;"	m	class:all_knobs_c
KNOB_NO_FETCH_ON_ICACHE_MISS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_NO_FETCH_ON_ICACHE_MISS;$/;"	m	class:all_knobs_c
KNOB_NUM_CHANNEL_CPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_CHANNEL_CPU;$/;"	m	class:all_knobs_c
KNOB_NUM_CHANNEL_GPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_CHANNEL_GPU;$/;"	m	class:all_knobs_c
KNOB_NUM_INST_TO_FETCH_AFTER_LOAD	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_INST_TO_FETCH_AFTER_LOAD;$/;"	m	class:all_knobs_c
KNOB_NUM_L3	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_L3;$/;"	m	class:all_knobs_c
KNOB_NUM_PORT	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_PORT;$/;"	m	class:all_knobs_c
KNOB_NUM_SIM_CORES	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SIM_CORES;$/;"	m	class:all_knobs_c
KNOB_NUM_SIM_LARGE_CORES	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SIM_LARGE_CORES;$/;"	m	class:all_knobs_c
KNOB_NUM_SIM_MEDIUM_CORES	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SIM_MEDIUM_CORES;$/;"	m	class:all_knobs_c
KNOB_NUM_SIM_SMALL_CORES	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SIM_SMALL_CORES;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_CPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_CPU;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_GPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_GPU;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_ITER	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_ITER;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_ITER_CPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_ITER_CPU;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_ITER_GPU	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_ITER_GPU;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_ITER_MEM	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_ITER_MEM;$/;"	m	class:all_knobs_c
KNOB_NUM_SWITCH_MEM	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_SWITCH_MEM;$/;"	m	class:all_knobs_c
KNOB_NUM_VC	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_VC;$/;"	m	class:all_knobs_c
KNOB_NUM_WARP_SCHEDULER	all_knobs.h	/^		KnobTemplate< int >* KNOB_NUM_WARP_SCHEDULER;$/;"	m	class:all_knobs_c
KNOB_ONE_CYCLE_EXEC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_ONE_CYCLE_EXEC;$/;"	m	class:all_knobs_c
KNOB_OPCODE_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_OPCODE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_ORIG_PIPELINE_STAGES	all_knobs.h	/^		KnobTemplate< int >* KNOB_ORIG_PIPELINE_STAGES;$/;"	m	class:all_knobs_c
KNOB_PCIE_BUS_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PCIE_BUS_SIZE;$/;"	m	class:all_knobs_c
KNOB_PCIE_INIT	all_knobs.h	/^		KnobTemplate< int >* KNOB_PCIE_INIT;$/;"	m	class:all_knobs_c
KNOB_PCIE_TR	all_knobs.h	/^		KnobTemplate< int >* KNOB_PCIE_TR;$/;"	m	class:all_knobs_c
KNOB_PERCEPTRON_CTR_BITS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PERCEPTRON_CTR_BITS;$/;"	m	class:all_knobs_c
KNOB_PERCEPTRON_ENTRIES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PERCEPTRON_ENTRIES;$/;"	m	class:all_knobs_c
KNOB_PERCEPTRON_THRESH_OVRD	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PERCEPTRON_THRESH_OVRD;$/;"	m	class:all_knobs_c
KNOB_PERFECT_BP	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PERFECT_BP;$/;"	m	class:all_knobs_c
KNOB_PERFECT_BTB	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PERFECT_BTB;$/;"	m	class:all_knobs_c
KNOB_PERFECT_DCACHE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PERFECT_DCACHE;$/;"	m	class:all_knobs_c
KNOB_PERFECT_GHR_SWITCHING	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PERFECT_GHR_SWITCHING;$/;"	m	class:all_knobs_c
KNOB_PERFECT_ICACHE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PERFECT_ICACHE;$/;"	m	class:all_knobs_c
KNOB_PHT_CTR_BITS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PHT_CTR_BITS;$/;"	m	class:all_knobs_c
KNOB_PHY_ADDR_WIDTH	all_knobs.h	/^		KnobTemplate< int >* KNOB_PHY_ADDR_WIDTH;$/;"	m	class:all_knobs_c
KNOB_POWER_PRINT_LEVEL	all_knobs.h	/^		KnobTemplate< int >* KNOB_POWER_PRINT_LEVEL;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_BANKS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_BANKS;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_CACHE_ASSOC	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_CACHE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_CACHE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_CACHE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_CACHE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_CACHE_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_DEGREE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_MAX_DEGREE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_MAX_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_NUM_REGIONS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_NUM_REGIONS;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_2DC_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_2DC_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_2DC_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_REGION_HASH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_REGION_HASH;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_TAG_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_TAG_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_2DC_ZONE_SHIFT	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_2DC_ZONE_SHIFT;$/;"	m	class:all_knobs_c
KNOB_PREF_ACCRATIOTHROTTLE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACCRATIOTHROTTLE;$/;"	m	class:all_knobs_c
KNOB_PREF_ACCRATIO_1	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACCRATIO_1;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_CREATE_REG_ON_L2_ACCESS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_CREATE_REG_ON_L2_ACCESS;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_1	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_1;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_10	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_10;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_2	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_2;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_3	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_3;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_4	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_4;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_5	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_5;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_6	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_6;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_7	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_7;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_8	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_8;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_DISTANCE_9	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_DISTANCE_9;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_INCDEC_LENGTH	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_INCDEC_LENGTH;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_NUM_REGIONS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_NUM_REGIONS;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_REGION_MOVE_FRACT	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_REGION_MOVE_FRACT;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_REGION_MOVE_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_REGION_MOVE_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_REGION_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_REGION_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_STUDY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_STUDY;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_THRESH_1	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_THRESH_1;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_THRESH_2	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_THRESH_2;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_THRESH_3	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_THRESH_3;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_THRESH_4	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_THRESH_4;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_TRAIN_ACCOFFSET_0	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_TRAIN_ACCOFFSET_0;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_TRAIN_ACCOFFSET_1	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_TRAIN_ACCOFFSET_1;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_TRAIN_ACCOFFSET_2	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_TRAIN_ACCOFFSET_2;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_TRAIN_ACCOFFSET_3	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_ACC_TRAIN_ACCOFFSET_3;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_UPDATE_DELAY	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_ACC_UPDATE_DELAY;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_UPDATE_INTERVAL	all_knobs.h	/^		KnobTemplate< uns64 >* KNOB_PREF_ACC_UPDATE_INTERVAL;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_USE_CACHE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_USE_CACHE;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_USE_ONLYGLOBAL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_USE_ONLYGLOBAL;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_USE_OVERALLALSO	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_USE_OVERALLALSO;$/;"	m	class:all_knobs_c
KNOB_PREF_ACC_USE_REGION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ACC_USE_REGION;$/;"	m	class:all_knobs_c
KNOB_PREF_ANALYZE_LOAD	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_ANALYZE_LOAD;$/;"	m	class:all_knobs_c
KNOB_PREF_DEGFB_STATPHASEFILE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DEGFB_STATPHASEFILE;$/;"	m	class:all_knobs_c
KNOB_PREF_DEGFB_USEONLYACC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DEGFB_USEONLYACC;$/;"	m	class:all_knobs_c
KNOB_PREF_DEGFB_USEONLYLATE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DEGFB_USEONLYLATE;$/;"	m	class:all_knobs_c
KNOB_PREF_DEGFB_USEONLYPOL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DEGFB_USEONLYPOL;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DHAL;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL_MAXDEG	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_DHAL_MAXDEG;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL_SENTTHRESH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_DHAL_SENTTHRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL_USETHRESH_MAX	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_DHAL_USETHRESH_MAX;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL_USETHRESH_MIN1	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_DHAL_USETHRESH_MIN1;$/;"	m	class:all_knobs_c
KNOB_PREF_DHAL_USETHRESH_MIN2	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_DHAL_USETHRESH_MIN2;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0REQ_ADD_FILTER_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DL0REQ_ADD_FILTER_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0REQ_QUEUE_FILTER_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DL0REQ_QUEUE_FILTER_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0REQ_QUEUE_OVERWRITE_ON_FULL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DL0REQ_QUEUE_OVERWRITE_ON_FULL;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0REQ_QUEUE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_DL0REQ_QUEUE_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0SCHEDULE_NUM	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_DL0SCHEDULE_NUM;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0_HIT_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DL0_HIT_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_DL0_MISS_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_DL0_MISS_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_FRAMEWORK_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_FRAMEWORK_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_BUFFER_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_GHB_BUFFER_N;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_CZONE_BITS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_GHB_CZONE_BITS;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_DEGREE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_GHB_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_INDEX_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_GHB_INDEX_N;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_MAX_DEGREE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_GHB_MAX_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_GHB_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_GHB_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_GHB_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_GHB_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_DEFAULT	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_PREF_HYBRID_DEFAULT;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_DEFAULT_TIMEPERIOD	all_knobs.h	/^		KnobTemplate< uns64 >* KNOB_PREF_HYBRID_DEFAULT_TIMEPERIOD;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_MIN_MEMUSED	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_HYBRID_MIN_MEMUSED;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_MIN_SENT	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_HYBRID_MIN_SENT;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_HYBRID_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_SORT_ON_ACC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_HYBRID_SORT_ON_ACC;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_SORT_ON_COV	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_HYBRID_SORT_ON_COV;$/;"	m	class:all_knobs_c
KNOB_PREF_HYBRID_UPDATE_MULTIPLE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_HYBRID_UPDATE_MULTIPLE;$/;"	m	class:all_knobs_c
KNOB_PREF_NUMTRACKING_REGIONS	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_NUMTRACKING_REGIONS;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_INFOSIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_INFOSIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_INTERVAL	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_INTERVAL;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_LOG2REGIONSIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_LOG2REGIONSIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_MAXDIFF_THRESH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_MAXDIFF_THRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_MIN_MISSES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_MIN_MISSES;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_MISSPER	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_PHASE_MISSPER;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_PHASE_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_PHASE_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_PHASE_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_PRIME_HASH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_PRIME_HASH;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_REGIONENTRIES	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_REGIONENTRIES;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_STUDY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_PHASE_STUDY;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_TABLE_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_TABLE_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_PHASE_TRACKEDREGIONS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_PHASE_TRACKEDREGIONS;$/;"	m	class:all_knobs_c
KNOB_PREF_POLBV_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_POLBV_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_POLBV_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_POLBV_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_POLPF_THRESH	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_POLPF_THRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_POL_THRESH_1	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_POL_THRESH_1;$/;"	m	class:all_knobs_c
KNOB_PREF_POL_THRESH_2	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_POL_THRESH_2;$/;"	m	class:all_knobs_c
KNOB_PREF_REGION_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_REGION_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_REGION_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_REGION_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_REQ_QUEUE_FILTER_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_REQ_QUEUE_FILTER_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_REQ_Q_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_REQ_Q_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_SCHEDULE_NUM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_SCHEDULE_NUM;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_ACCPERSTREAM	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_ACCPERSTREAM;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_DYN_DIST_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_DYN_DIST_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_DYN_TRAIN_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_DYN_TRAIN_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_MAX_DISTANCE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STREAM_MAX_DISTANCE;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STREAM_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_TRAIN_NUM_0	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STREAM_TRAIN_NUM_0;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_TRAIN_NUM_1	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STREAM_TRAIN_NUM_1;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_TRAIN_NUM_2	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STREAM_TRAIN_NUM_2;$/;"	m	class:all_knobs_c
KNOB_PREF_STREAM_TRAIN_NUM_3	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STREAM_TRAIN_NUM_3;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_DEGREE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDEPC_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_DISTANCE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDEPC_DISTANCE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDEPC_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDEPC_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDEPC_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_STARTDIS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDEPC_STARTDIS;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_TABLE_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDEPC_TABLE_N;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_TRAINNUM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDEPC_TRAINNUM;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDEPC_USELOADADDR	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDEPC_USELOADADDR;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_DEGREE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_DEGREE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_DISTANCE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_DISTANCE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_MULTI_THRESH	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_MULTI_THRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDE_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_ON_LARGE_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDE_ON_LARGE_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_ON_MEDIUM_CORE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDE_ON_MEDIUM_CORE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_REGION_BITS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_STRIDE_REGION_BITS;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_SINGLE_STRIDE_MODE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_STRIDE_SINGLE_STRIDE_MODE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_SINGLE_THRESH	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_SINGLE_THRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_STARTDISTANCE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_STARTDISTANCE;$/;"	m	class:all_knobs_c
KNOB_PREF_STRIDE_TABLE_N	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_STRIDE_TABLE_N;$/;"	m	class:all_knobs_c
KNOB_PREF_THREAD_INDEX	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_THREAD_INDEX;$/;"	m	class:all_knobs_c
KNOB_PREF_THROTTLEFB_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_THROTTLEFB_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_THROTTLE_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_THROTTLE_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_TIMELY_THRESH	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_TIMELY_THRESH;$/;"	m	class:all_knobs_c
KNOB_PREF_TIMELY_THRESH_2	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_TIMELY_THRESH_2;$/;"	m	class:all_knobs_c
KNOB_PREF_TRACE_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_TRACE_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_TRAIN_INST_ONCE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_TRAIN_INST_ONCE;$/;"	m	class:all_knobs_c
KNOB_PREF_TRAIN_THRESH_1	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_TRAIN_THRESH_1;$/;"	m	class:all_knobs_c
KNOB_PREF_TRAIN_THRESH_2	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_TRAIN_THRESH_2;$/;"	m	class:all_knobs_c
KNOB_PREF_TRAIN_THRESH_3	all_knobs.h	/^		KnobTemplate< float >* KNOB_PREF_TRAIN_THRESH_3;$/;"	m	class:all_knobs_c
KNOB_PREF_TRAIN_WINDOW_SLACK	all_knobs.h	/^		KnobTemplate< uns >* KNOB_PREF_TRAIN_WINDOW_SLACK;$/;"	m	class:all_knobs_c
KNOB_PREF_UL1REQ_ADD_FILTER_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_UL1REQ_ADD_FILTER_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_UL1REQ_QUEUE_FILTER_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_UL1REQ_QUEUE_FILTER_ON;$/;"	m	class:all_knobs_c
KNOB_PREF_UL1REQ_QUEUE_OVERWRITE_ON_FULL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_UL1REQ_QUEUE_OVERWRITE_ON_FULL;$/;"	m	class:all_knobs_c
KNOB_PREF_UL1REQ_QUEUE_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_UL1REQ_QUEUE_SIZE;$/;"	m	class:all_knobs_c
KNOB_PREF_UL1SCHEDULE_NUM	all_knobs.h	/^		KnobTemplate< int >* KNOB_PREF_UL1SCHEDULE_NUM;$/;"	m	class:all_knobs_c
KNOB_PREF_UPDATE_INTERVAL	all_knobs.h	/^		KnobTemplate< uns64 >* KNOB_PREF_UPDATE_INTERVAL;$/;"	m	class:all_knobs_c
KNOB_PREF_USEREGION_TOCALC_ACC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PREF_USEREGION_TOCALC_ACC;$/;"	m	class:all_knobs_c
KNOB_PRINT_HEARTBEAT	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PRINT_HEARTBEAT;$/;"	m	class:all_knobs_c
KNOB_PTX_COMMON_CACHE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_PTX_COMMON_CACHE;$/;"	m	class:all_knobs_c
KNOB_PTX_DISPATCH_LATENCY_FACTOR	all_knobs.h	/^		KnobTemplate< int >* KNOB_PTX_DISPATCH_LATENCY_FACTOR;$/;"	m	class:all_knobs_c
KNOB_PTX_EXEC_RATIO	all_knobs.h	/^		KnobTemplate< int >* KNOB_PTX_EXEC_RATIO;$/;"	m	class:all_knobs_c
KNOB_PTX_INST_LATENCY	all_knobs.h	/^		KnobTemplate< int >* KNOB_PTX_INST_LATENCY;$/;"	m	class:all_knobs_c
KNOB_RAS_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_RAS_SIZE;$/;"	m	class:all_knobs_c
KNOB_REMOVE_REDUNDANT_STREAM	all_knobs.h	/^		KnobTemplate< bool >* KNOB_REMOVE_REDUNDANT_STREAM;$/;"	m	class:all_knobs_c
KNOB_REPEAT_TRACE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_REPEAT_TRACE;$/;"	m	class:all_knobs_c
KNOB_REPEAT_TRACE_N	all_knobs.h	/^		KnobTemplate< int >* KNOB_REPEAT_TRACE_N;$/;"	m	class:all_knobs_c
KNOB_ROB_LARGE_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ROB_LARGE_SIZE;$/;"	m	class:all_knobs_c
KNOB_ROB_MEDIUM_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ROB_MEDIUM_SIZE;$/;"	m	class:all_knobs_c
KNOB_ROB_SIZE	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_ROB_SIZE;$/;"	m	class:all_knobs_c
KNOB_ROUTER_PLACEMENT	all_knobs.h	/^		KnobTemplate< int >* KNOB_ROUTER_PLACEMENT;$/;"	m	class:all_knobs_c
KNOB_RRIP_BIP_ALWAYS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_RRIP_BIP_ALWAYS;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_BIP_EPSILON	all_knobs.h	/^		KnobTemplate< int >* KNOB_RRIP_CACHE_BIP_EPSILON;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_DYNAMIC_ON	all_knobs.h	/^		KnobTemplate< bool >* KNOB_RRIP_CACHE_DYNAMIC_ON;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_FOR_GPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_RRIP_CACHE_FOR_GPU;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_FOR_MULTI_GPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_RRIP_CACHE_FOR_MULTI_GPU;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_INSERT_AT	all_knobs.h	/^		KnobTemplate< int >* KNOB_RRIP_CACHE_INSERT_AT;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_NUM_BIT	all_knobs.h	/^		KnobTemplate< int >* KNOB_RRIP_CACHE_NUM_BIT;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_NUM_COUNTER_BIT	all_knobs.h	/^		KnobTemplate< int >* KNOB_RRIP_CACHE_NUM_COUNTER_BIT;$/;"	m	class:all_knobs_c
KNOB_RRIP_CACHE_PROBABILITY	all_knobs.h	/^		KnobTemplate< int >* KNOB_RRIP_CACHE_PROBABILITY;$/;"	m	class:all_knobs_c
KNOB_SCHEDULE	all_knobs.h	/^		KnobTemplate< string >* KNOB_SCHEDULE;$/;"	m	class:all_knobs_c
KNOB_SCHED_CLOCK	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_SCHED_CLOCK;$/;"	m	class:all_knobs_c
KNOB_SCHED_TO_LARGE_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_SCHED_TO_LARGE_WIDTH;$/;"	m	class:all_knobs_c
KNOB_SCHED_TO_MEDIUM_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_SCHED_TO_MEDIUM_WIDTH;$/;"	m	class:all_knobs_c
KNOB_SCHED_TO_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_SCHED_TO_WIDTH;$/;"	m	class:all_knobs_c
KNOB_SFU_PER_SM	all_knobs.h	/^		KnobTemplate< int >* KNOB_SFU_PER_SM;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_ASSOC	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_SHARED_MEM_ASSOC;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_BANKS	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_SHARED_MEM_BANKS;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_CYCLES	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_SHARED_MEM_CYCLES;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_SHARED_MEM_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_PORTS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_SHARED_MEM_PORTS;$/;"	m	class:all_knobs_c
KNOB_SHARED_MEM_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_SHARED_MEM_SIZE;$/;"	m	class:all_knobs_c
KNOB_SIMULATE_LAST_BLOCKS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_SIMULATE_LAST_BLOCKS;$/;"	m	class:all_knobs_c
KNOB_SIM_CYCLE_COUNT	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_SIM_CYCLE_COUNT;$/;"	m	class:all_knobs_c
KNOB_SP_PER_SM	all_knobs.h	/^		KnobTemplate< int >* KNOB_SP_PER_SM;$/;"	m	class:all_knobs_c
KNOB_STATISTICS_OUT_DIRECTORY	all_knobs.h	/^		KnobTemplate< string >* KNOB_STATISTICS_OUT_DIRECTORY;$/;"	m	class:all_knobs_c
KNOB_STDERR_FILE	all_knobs.h	/^		KnobTemplate< string >* KNOB_STDERR_FILE;$/;"	m	class:all_knobs_c
KNOB_STDOUT_FILE	all_knobs.h	/^		KnobTemplate< string >* KNOB_STDOUT_FILE;$/;"	m	class:all_knobs_c
KNOB_STORE_BUF_SIZE	all_knobs.h	/^		KnobTemplate< int >* KNOB_STORE_BUF_SIZE;$/;"	m	class:all_knobs_c
KNOB_STREAM_ACC_THROTTLE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_ACC_THROTTLE;$/;"	m	class:all_knobs_c
KNOB_STREAM_BUFFER_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_BUFFER_N;$/;"	m	class:all_knobs_c
KNOB_STREAM_CREATE_ON_DC_MISS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_CREATE_ON_DC_MISS;$/;"	m	class:all_knobs_c
KNOB_STREAM_CREATE_ON_L1_MISS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_CREATE_ON_L1_MISS;$/;"	m	class:all_knobs_c
KNOB_STREAM_CREATE_ON_WRONGPATH	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_CREATE_ON_WRONGPATH;$/;"	m	class:all_knobs_c
KNOB_STREAM_L1Q_DEMAND_RESERVE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_L1Q_DEMAND_RESERVE;$/;"	m	class:all_knobs_c
KNOB_STREAM_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_LENGTH;$/;"	m	class:all_knobs_c
KNOB_STREAM_PREFETCH_N	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_PREFETCH_N;$/;"	m	class:all_knobs_c
KNOB_STREAM_PREF_INTO_DCACHE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_PREF_INTO_DCACHE;$/;"	m	class:all_knobs_c
KNOB_STREAM_STALL_ON_QUEUE_FULL	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_STALL_ON_QUEUE_FULL;$/;"	m	class:all_knobs_c
KNOB_STREAM_START_DIS	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_START_DIS;$/;"	m	class:all_knobs_c
KNOB_STREAM_TRAIN_LENGTH	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_TRAIN_LENGTH;$/;"	m	class:all_knobs_c
KNOB_STREAM_TRAIN_NUM	all_knobs.h	/^		KnobTemplate< uns >* KNOB_STREAM_TRAIN_NUM;$/;"	m	class:all_knobs_c
KNOB_STREAM_TRAIN_ON_DC_MISS	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_TRAIN_ON_DC_MISS;$/;"	m	class:all_knobs_c
KNOB_STREAM_TRAIN_ON_WRONGPATH	all_knobs.h	/^		KnobTemplate< bool >* KNOB_STREAM_TRAIN_ON_WRONGPATH;$/;"	m	class:all_knobs_c
KNOB_TADIP_CACHE_BIP_EPSILON	all_knobs.h	/^		KnobTemplate< int >* KNOB_TADIP_CACHE_BIP_EPSILON;$/;"	m	class:all_knobs_c
KNOB_TADIP_CACHE_NUM_COUNTER_BIT	all_knobs.h	/^		KnobTemplate< int >* KNOB_TADIP_CACHE_NUM_COUNTER_BIT;$/;"	m	class:all_knobs_c
KNOB_TC_CACHE_CAGING_PERIOD	all_knobs.h	/^		KnobTemplate< int >* KNOB_TC_CACHE_CAGING_PERIOD;$/;"	m	class:all_knobs_c
KNOB_TC_CACHE_CAGING_SPACE	all_knobs.h	/^		KnobTemplate< int >* KNOB_TC_CACHE_CAGING_SPACE;$/;"	m	class:all_knobs_c
KNOB_TC_CACHE_NUM_APPLICATION	all_knobs.h	/^		KnobTemplate< int >* KNOB_TC_CACHE_NUM_APPLICATION;$/;"	m	class:all_knobs_c
KNOB_TEMPERATURE	all_knobs.h	/^		KnobTemplate< int >* KNOB_TEMPERATURE;$/;"	m	class:all_knobs_c
KNOB_TEXTURE_CACHE_ASSOC	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_TEXTURE_CACHE_ASSOC;$/;"	m	class:all_knobs_c
KNOB_TEXTURE_CACHE_BANKS	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_TEXTURE_CACHE_BANKS;$/;"	m	class:all_knobs_c
KNOB_TEXTURE_CACHE_CYCLES	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_TEXTURE_CACHE_CYCLES;$/;"	m	class:all_knobs_c
KNOB_TEXTURE_CACHE_LINE_SIZE	all_knobs.h	/^		KnobTemplate< uns8 >* KNOB_TEXTURE_CACHE_LINE_SIZE;$/;"	m	class:all_knobs_c
KNOB_TEXTURE_CACHE_SIZE	all_knobs.h	/^		KnobTemplate< uns32 >* KNOB_TEXTURE_CACHE_SIZE;$/;"	m	class:all_knobs_c
KNOB_TRACE_NAME_FILE	all_knobs.h	/^		KnobTemplate< string >* KNOB_TRACE_NAME_FILE;$/;"	m	class:all_knobs_c
KNOB_TRAIN_FILTER_SIZE	all_knobs.h	/^		KnobTemplate< uns >* KNOB_TRAIN_FILTER_SIZE;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_ACCESS_CONTROL	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_ACCESS_CONTROL;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_CPU_INTERFERENCE	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_CPU_INTERFERENCE;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_FOR_GPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_UCP_CACHE_FOR_GPU;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_FOR_MULTI_GPU	all_knobs.h	/^		KnobTemplate< bool >* KNOB_UCP_CACHE_FOR_MULTI_GPU;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_GPU_DROP_PROBABILITY	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_GPU_DROP_PROBABILITY;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_GPU_MAX_PARTITION_LOOKUP	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_GPU_MAX_PARTITION_LOOKUP;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_NUM_APPLICATION	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_NUM_APPLICATION;$/;"	m	class:all_knobs_c
KNOB_UCP_CACHE_PARTITION_PERIOD	all_knobs.h	/^		KnobTemplate< int >* KNOB_UCP_CACHE_PARTITION_PERIOD;$/;"	m	class:all_knobs_c
KNOB_UPDATE_CURRENT_HIST_ONLY	all_knobs.h	/^		KnobTemplate< bool >* KNOB_UPDATE_CURRENT_HIST_ONLY;$/;"	m	class:all_knobs_c
KNOB_USE_BRANCH_PREDICTION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_BRANCH_PREDICTION;$/;"	m	class:all_knobs_c
KNOB_USE_CONST_AND_TEX_CACHES	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_CONST_AND_TEX_CACHES;$/;"	m	class:all_knobs_c
KNOB_USE_INCOMING_TID_CID_FOR_WB	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_INCOMING_TID_CID_FOR_WB;$/;"	m	class:all_knobs_c
KNOB_USE_NEW_COALESCING	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_NEW_COALESCING;$/;"	m	class:all_knobs_c
KNOB_USE_NEW_ORACLE	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_NEW_ORACLE;$/;"	m	class:all_knobs_c
KNOB_USE_RR_FOR_NOC_INSERTION	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_RR_FOR_NOC_INSERTION;$/;"	m	class:all_knobs_c
KNOB_USE_SIMPLE_ROUTER	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_SIMPLE_ROUTER;$/;"	m	class:all_knobs_c
KNOB_USE_ZERO_LATENCY_NOC	all_knobs.h	/^		KnobTemplate< bool >* KNOB_USE_ZERO_LATENCY_NOC;$/;"	m	class:all_knobs_c
KNOB_WIDTH	all_knobs.h	/^		KnobTemplate< uns16 >* KNOB_WIDTH;$/;"	m	class:all_knobs_c
KnobEntryTokenizer	knob.h	/^    KnobEntryTokenizer() { }$/;"	f	class:KnobEntryTokenizer
KnobEntryTokenizer	knob.h	/^class KnobEntryTokenizer $/;"	c
KnobTemplate	knob.h	/^    KnobTemplate():abstract_knob_c() { }$/;"	f	class:KnobTemplate
KnobTemplate	knob.h	/^    KnobTemplate(const string& name, const T& val, const string& parentName = ""):$/;"	f	class:KnobTemplate
KnobTemplate	knob.h	/^    KnobTemplate(const string& name, const string& val, const string& parentName = ""):$/;"	f	class:KnobTemplate
KnobTemplate	knob.h	/^template<> class KnobTemplate<string> : public abstract_knob_c$/;"	c
KnobTemplate	knob.h	/^template<class T> class KnobTemplate : public abstract_knob_c$/;"	c
KnobsContainer	knob.cc	/^KnobsContainer::KnobsContainer()$/;"	f	class:KnobsContainer
KnobsContainer	knob.h	/^class KnobsContainer$/;"	c
L	utils.h	82;"	d
L1_HIT_CPU	statsEnums.h	/^L1_HIT_CPU,$/;"	e	enum:StatisticsEnum
L1_HIT_GPU	statsEnums.h	/^L1_HIT_GPU,$/;"	e	enum:StatisticsEnum
L1_MISS_CPU	statsEnums.h	/^L1_MISS_CPU,$/;"	e	enum:StatisticsEnum
L1_MISS_GPU	statsEnums.h	/^L1_MISS_GPU,$/;"	e	enum:StatisticsEnum
L1_REQ	memory.cc	69;"	d	file:
L1_WB	statsEnums.h	/^L1_WB,$/;"	e	enum:StatisticsEnum
L2HIT_HIT_TRAIN_STREAM	statsEnums.h	/^L2HIT_HIT_TRAIN_STREAM,$/;"	e	enum:StatisticsEnum
L2HIT_L2SEND_Q_ENTER	statsEnums.h	/^L2HIT_L2SEND_Q_ENTER,$/;"	e	enum:StatisticsEnum
L2HIT_L2SEND_Q_FULL	statsEnums.h	/^L2HIT_L2SEND_Q_FULL,$/;"	e	enum:StatisticsEnum
L2HIT_MEM_REQ	statsEnums.h	/^L2HIT_MEM_REQ,$/;"	e	enum:StatisticsEnum
L2HIT_MISS_TRAIN_STREAM	statsEnums.h	/^L2HIT_MISS_TRAIN_STREAM,$/;"	e	enum:StatisticsEnum
L2HIT_PREF_REQ_DCACHE_HIT	statsEnums.h	/^L2HIT_PREF_REQ_DCACHE_HIT,$/;"	e	enum:StatisticsEnum
L2HIT_PREF_REQ_DCACHE_MISS	statsEnums.h	/^L2HIT_PREF_REQ_DCACHE_MISS,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_BUFFER_REQ	statsEnums.h	/^L2HIT_STREAM_BUFFER_REQ,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_DCACHE_PORT_FULL	statsEnums.h	/^L2HIT_STREAM_DCACHE_PORT_FULL,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_L2_MISS	statsEnums.h	/^L2HIT_STREAM_L2_MISS,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_PREF_DCACHE_HIT	statsEnums.h	/^L2HIT_STREAM_PREF_DCACHE_HIT,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_PREF_DCACHE_INSERT	statsEnums.h	/^L2HIT_STREAM_PREF_DCACHE_INSERT,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_PREF_L2_PORT_FULL	statsEnums.h	/^L2HIT_STREAM_PREF_L2_PORT_FULL,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_PREF_REQ_QUE_FULL	statsEnums.h	/^L2HIT_STREAM_PREF_REQ_QUE_FULL,$/;"	e	enum:StatisticsEnum
L2HIT_STREAM_TRAIN_CREATE	statsEnums.h	/^L2HIT_STREAM_TRAIN_CREATE,$/;"	e	enum:StatisticsEnum
L2HIT_TRAIN_FILTER_HIT	statsEnums.h	/^L2HIT_TRAIN_FILTER_HIT,$/;"	e	enum:StatisticsEnum
L2HIT_TRAIN_FILTER_MISS	statsEnums.h	/^L2HIT_TRAIN_FILTER_MISS,$/;"	e	enum:StatisticsEnum
L2HIT_TRAIN_HIT_DEMAND	statsEnums.h	/^L2HIT_TRAIN_HIT_DEMAND,$/;"	e	enum:StatisticsEnum
L2HIT_TRAIN_MISS_REQ	statsEnums.h	/^L2HIT_TRAIN_MISS_REQ,$/;"	e	enum:StatisticsEnum
L2_HIT_CPU	statsEnums.h	/^L2_HIT_CPU,$/;"	e	enum:StatisticsEnum
L2_HIT_GPU	statsEnums.h	/^L2_HIT_GPU,$/;"	e	enum:StatisticsEnum
L2_MISS_CPU	statsEnums.h	/^L2_MISS_CPU,$/;"	e	enum:StatisticsEnum
L2_MISS_GPU	statsEnums.h	/^L2_MISS_GPU,$/;"	e	enum:StatisticsEnum
L2_REQ	memory.cc	70;"	d	file:
L2_WB	statsEnums.h	/^L2_WB,$/;"	e	enum:StatisticsEnum
L3_HIT_CPU	statsEnums.h	/^L3_HIT_CPU,$/;"	e	enum:StatisticsEnum
L3_HIT_GPU	statsEnums.h	/^L3_HIT_GPU,$/;"	e	enum:StatisticsEnum
L3_HIT_PROMOTION_CPU	statsEnums.h	/^L3_HIT_PROMOTION_CPU,$/;"	e	enum:StatisticsEnum
L3_HIT_PROMOTION_GPU	statsEnums.h	/^L3_HIT_PROMOTION_GPU,$/;"	e	enum:StatisticsEnum
L3_MISS_CPU	statsEnums.h	/^L3_MISS_CPU,$/;"	e	enum:StatisticsEnum
L3_MISS_GPU	statsEnums.h	/^L3_MISS_GPU,$/;"	e	enum:StatisticsEnum
L3_REQ	memory.cc	71;"	d	file:
L3_ROUTER	router.h	52;"	d
L3_WB	statsEnums.h	/^L3_WB,$/;"	e	enum:StatisticsEnum
LDU_GM	trace_read.h	/^  LDU_GM,$/;"	e	enum:TR_OPCODE_ENUM_
LD_CM_CA	trace_read.h	/^  LD_CM_CA,$/;"	e	enum:TR_OPCODE_ENUM_
LD_CM_CG	trace_read.h	/^  LD_CM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
LD_CM_CS	trace_read.h	/^  LD_CM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
LD_CM_CU	trace_read.h	/^  LD_CM_CU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_CM_LU	trace_read.h	/^  LD_CM_LU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_GM_CA	trace_read.h	/^  LD_GM_CA,$/;"	e	enum:TR_OPCODE_ENUM_
LD_GM_CG	trace_read.h	/^  LD_GM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
LD_GM_CS	trace_read.h	/^  LD_GM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
LD_GM_CU	trace_read.h	/^  LD_GM_CU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_GM_LU	trace_read.h	/^  LD_GM_LU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_LM_CA	trace_read.h	/^  LD_LM_CA,$/;"	e	enum:TR_OPCODE_ENUM_
LD_LM_CG	trace_read.h	/^  LD_LM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
LD_LM_CS	trace_read.h	/^  LD_LM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
LD_LM_CU	trace_read.h	/^  LD_LM_CU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_LM_LU	trace_read.h	/^  LD_LM_LU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_NO_FORWARD	statsEnums.h	/^LD_NO_FORWARD,$/;"	e	enum:StatisticsEnum
LD_PM_CA	trace_read.h	/^  LD_PM_CA,$/;"	e	enum:TR_OPCODE_ENUM_
LD_PM_CG	trace_read.h	/^  LD_PM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
LD_PM_CS	trace_read.h	/^  LD_PM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
LD_PM_CU	trace_read.h	/^  LD_PM_CU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_PM_LU	trace_read.h	/^  LD_PM_LU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_SM_CA	trace_read.h	/^  LD_SM_CA,$/;"	e	enum:TR_OPCODE_ENUM_
LD_SM_CG	trace_read.h	/^  LD_SM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
LD_SM_CS	trace_read.h	/^  LD_SM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
LD_SM_CU	trace_read.h	/^  LD_SM_CU,$/;"	e	enum:TR_OPCODE_ENUM_
LD_SM_LU	trace_read.h	/^  LD_SM_LU,$/;"	e	enum:TR_OPCODE_ENUM_
LEFT	router.cc	51;"	d	file:
LINE_Stat	statistics.h	/^    LINE_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:LINE_Stat
LINE_Stat	statistics.h	/^class LINE_Stat : public AbstractStat$/;"	c
LOCAL	router.cc	50;"	d	file:
LOG2_DCACHE_LINE_SIZE	pref_common.h	57;"	d
LOG2_PREF_REGION_SIZE	pref_common.h	58;"	d
LT	router.cc	66;"	d	file:
MACSIM_H_INCLUDED	macsim.h	39;"	d
MAGIC_COMMENTS	knob.h	/^    static const char MAGIC_COMMENTS = '#'; \/**< enable comment in parameter file *\/$/;"	m	class:KnobsContainer
MAPI	macsim.cc	471;"	d	file:
MAP_H_INCLUDED	map.h	40;"	d
MAX2	utils.h	78;"	d
MAX_ADDR	global_defs.h	194;"	d
MAX_CTR	global_defs.h	188;"	d
MAX_DESTS	global_defs.h	181;"	d
MAX_DRAM_BANKS	global_defs.h	179;"	d
MAX_DST_NUM	trace_read.h	55;"	d
MAX_GPU_SCHED_SIZE	schedule_smc.h	/^    static const int MAX_GPU_SCHED_SIZE = 128; \/**< max sched table size *\/$/;"	m	class:schedule_smc_c
MAX_INT	global_defs.h	191;"	d
MAX_INT64	global_defs.h	190;"	d
MAX_MEM_REQ_TYPE	memreq_info.h	/^  MAX_MEM_REQ_TYPE,$/;"	e	enum:Mem_Req_Type_enum
MAX_NOC_STATE	memreq_info.h	/^  MAX_NOC_STATE,$/;"	e	enum:NOC_TYPE
MAX_NUM_BLOCKS	global_defs.h	172;"	d
MAX_NUM_CORES	global_defs.h	175;"	d
MAX_NUM_THREADS	global_defs.h	171;"	d
MAX_NUM_TOTAL_BLOCKS	global_defs.h	174;"	d
MAX_PUP	global_defs.h	169;"	d
MAX_SCHED_SIZE	schedule.h	/^    static const int MAX_SCHED_SIZE = 8192; \/**< maximum scheduler table size *\/$/;"	m	class:schedule_c
MAX_SCTR	global_defs.h	189;"	d
MAX_SIMULTANEOUS_STRINGS	global_defs.h	185;"	d
MAX_SRCS	global_defs.h	180;"	d
MAX_SRC_NUM	trace_read.h	54;"	d
MAX_STR_LENGTH	global_defs.h	184;"	d
MAX_TRACE_BUFFER_SIZE	global_defs.h	197;"	d
MAX_TR_OPCODE_NAME	global_defs.h	168;"	d
MAX_TR_OPCODE_NAME	trace_read.h	51;"	d
MAX_TR_REG	trace_read.h	50;"	d
MAX_UNS	global_defs.h	193;"	d
MAX_UNS64	global_defs.h	192;"	d
MAX_UOP_SRC_DEPS	global_defs.h	178;"	d
MC_RESP	memory.cc	72;"	d	file:
MC_ROUTER	router.h	53;"	d
MEMORY_H	memory.h	40;"	d
MEMORY_TYPE	memreq_info.h	/^enum MEMORY_TYPE {$/;"	g
MEMREQ_INFO_H_INCLUDED	memreq_info.h	40;"	d
MEM_ADDR_DEP	uop.h	/^  MEM_ADDR_DEP,$/;"	e	enum:Dep_Type_enum
MEM_DATA_DEP	uop.h	/^  MEM_DATA_DEP,$/;"	e	enum:Dep_Type_enum
MEM_DRAM_CMD	memreq_info.h	/^  MEM_DRAM_CMD,$/;"	e	enum:Mem_Req_State_enum
MEM_DRAM_DATA	memreq_info.h	/^  MEM_DRAM_DATA,$/;"	e	enum:Mem_Req_State_enum
MEM_DRAM_DONE	memreq_info.h	/^  MEM_DRAM_DONE,$/;"	e	enum:Mem_Req_State_enum
MEM_DRAM_START	memreq_info.h	/^  MEM_DRAM_START,$/;"	e	enum:Mem_Req_State_enum
MEM_EVICT	uop.h	/^  MEM_EVICT,                    \/\/!< a cache block eviction hint$/;"	e	enum:Mem_Type_enum
MEM_FILL_NEW	memreq_info.h	/^  MEM_FILL_NEW,$/;"	e	enum:Mem_Req_State_enum
MEM_FILL_WAIT_DONE	memreq_info.h	/^  MEM_FILL_WAIT_DONE,$/;"	e	enum:Mem_Req_State_enum
MEM_FILL_WAIT_FILL	memreq_info.h	/^  MEM_FILL_WAIT_FILL,$/;"	e	enum:Mem_Req_State_enum
MEM_GEN_OFF_PATH_VALS	map.cc	341;"	d	file:
MEM_INV	memreq_info.h	/^  MEM_INV,$/;"	e	enum:Mem_Req_State_enum
MEM_IN_NOC	memreq_info.h	/^  MEM_IN_NOC,$/;"	e	enum:Mem_Req_State_enum
MEM_L1	memreq_info.h	/^  MEM_L1 = 1,$/;"	e	enum:MEMORY_TYPE
MEM_L2	memreq_info.h	/^  MEM_L2,$/;"	e	enum:MEMORY_TYPE
MEM_L3	memreq_info.h	/^  MEM_L3,$/;"	e	enum:MEMORY_TYPE
MEM_LAST	memreq_info.h	/^  MEM_LAST,$/;"	e	enum:MEMORY_TYPE
MEM_LD	uop.h	/^  MEM_LD,                       \/\/!< a load instruction$/;"	e	enum:Mem_Type_enum
MEM_LD_CM	uop.h	/^  MEM_LD_CM,                    \/\/!< load from constant memory in PTX $/;"	e	enum:Mem_Type_enum
MEM_LD_GM	uop.h	/^  MEM_LD_GM,                    \/\/!< global memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_LD_LM	uop.h	/^  MEM_LD_LM,                    \/\/!< local memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_LD_PM	uop.h	/^  MEM_LD_PM,                    \/\/!< load from parameter memory in PTX$/;"	e	enum:Mem_Type_enum
MEM_LD_SM	uop.h	/^  MEM_LD_SM,                    \/\/!< shared memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_LD_TM	uop.h	/^  MEM_LD_TM,                    \/\/!< load from texture memory in PTX$/;"	e	enum:Mem_Type_enum
MEM_MAP_KEY	map.cc	60;"	d	file:
MEM_MC	memreq_info.h	/^  MEM_MC,$/;"	e	enum:MEMORY_TYPE
MEM_MERGED	memreq_info.h	/^  MEM_MERGED,$/;"	e	enum:Mem_Req_State_enum
MEM_NEW	memreq_info.h	/^  MEM_NEW,$/;"	e	enum:Mem_Req_State_enum
MEM_NOC_DONE	memreq_info.h	/^  MEM_NOC_DONE,$/;"	e	enum:Mem_Req_State_enum
MEM_NOC_START	memreq_info.h	/^  MEM_NOC_START,$/;"	e	enum:Mem_Req_State_enum
MEM_OUTQUEUE_NEW	memreq_info.h	/^  MEM_OUTQUEUE_NEW,$/;"	e	enum:Mem_Req_State_enum
MEM_OUT_FILL	memreq_info.h	/^  MEM_OUT_FILL,$/;"	e	enum:Mem_Req_State_enum
MEM_OUT_WB	memreq_info.h	/^  MEM_OUT_WB,$/;"	e	enum:Mem_Req_State_enum
MEM_PF	uop.h	/^  MEM_PF,                       \/\/!< a prefetch$/;"	e	enum:Mem_Type_enum
MEM_REQ_MISS_DFETCH_Q	statsEnums.h	/^MEM_REQ_MISS_DFETCH_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_DPRF_Q	statsEnums.h	/^MEM_REQ_MISS_DPRF_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_DSTORE_Q	statsEnums.h	/^MEM_REQ_MISS_DSTORE_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_HWP_PREF_Q	statsEnums.h	/^MEM_REQ_MISS_HWP_PREF_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_IFETCH_Q	statsEnums.h	/^MEM_REQ_MISS_IFETCH_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_SW_PREF_Q	statsEnums.h	/^MEM_REQ_MISS_SW_PREF_Q,$/;"	e	enum:StatisticsEnum
MEM_REQ_MISS_WB_Q	statsEnums.h	/^MEM_REQ_MISS_WB_Q,$/;"	e	enum:StatisticsEnum
MEM_ST	uop.h	/^  MEM_ST,                       \/\/!< a store instruction$/;"	e	enum:Mem_Type_enum
MEM_STALL_CYCLE	statsEnums.h	/^MEM_STALL_CYCLE,$/;"	e	enum:StatisticsEnum
MEM_STATE_MAX	memreq_info.h	/^  MEM_STATE_MAX,$/;"	e	enum:Mem_Req_State_enum
MEM_ST_GM	uop.h	/^  MEM_ST_GM,                    \/\/!< global memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_ST_LM	uop.h	/^  MEM_ST_LM,                    \/\/!< local memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_ST_SM	uop.h	/^  MEM_ST_SM,                    \/\/!< shared memory access in PTX $/;"	e	enum:Mem_Type_enum
MEM_SWPREF_NTA	uop.h	/^  MEM_SWPREF_NTA,$/;"	e	enum:Mem_Type_enum
MEM_SWPREF_T0	uop.h	/^  MEM_SWPREF_T0,$/;"	e	enum:Mem_Type_enum
MEM_SWPREF_T1	uop.h	/^  MEM_SWPREF_T1,$/;"	e	enum:Mem_Type_enum
MEM_SWPREF_T2	uop.h	/^  MEM_SWPREF_T2,$/;"	e	enum:Mem_Type_enum
MEM_WH	uop.h	/^  MEM_WH,                       \/\/!< a write hint$/;"	e	enum:Mem_Type_enum
MIN2	utils.h	77;"	d
MISS_TRAIN_STREAM	statsEnums.h	/^MISS_TRAIN_STREAM,$/;"	e	enum:StatisticsEnum
MIXED	router.cc	75;"	d	file:
MRT_DFETCH	memreq_info.h	/^  MRT_DFETCH,$/;"	e	enum:Mem_Req_Type_enum
MRT_DPRF	memreq_info.h	/^  MRT_DPRF,$/;"	e	enum:Mem_Req_Type_enum
MRT_DSTORE	memreq_info.h	/^  MRT_DSTORE,$/;"	e	enum:Mem_Req_Type_enum
MRT_IFETCH	memreq_info.h	/^  MRT_IFETCH,			$/;"	e	enum:Mem_Req_Type_enum
MRT_IPRF	memreq_info.h	/^  MRT_IPRF,$/;"	e	enum:Mem_Req_Type_enum
MRT_Prefetch	memory.h	51;"	d
MRT_SW_DPRF	memreq_info.h	/^  MRT_SW_DPRF,$/;"	e	enum:Mem_Req_Type_enum
MRT_SW_DPRF_NTA	memreq_info.h	/^  MRT_SW_DPRF_NTA,$/;"	e	enum:Mem_Req_Type_enum
MRT_SW_DPRF_T0	memreq_info.h	/^  MRT_SW_DPRF_T0,$/;"	e	enum:Mem_Req_Type_enum
MRT_SW_DPRF_T1	memreq_info.h	/^  MRT_SW_DPRF_T1,$/;"	e	enum:Mem_Req_Type_enum
MRT_SW_DPRF_T2	memreq_info.h	/^  MRT_SW_DPRF_T2,$/;"	e	enum:Mem_Req_Type_enum
MRT_WB	memreq_info.h	/^  MRT_WB,$/;"	e	enum:Mem_Req_Type_enum
MSHR_FULL	statsEnums.h	/^MSHR_FULL,$/;"	e	enum:StatisticsEnum
MT_fetch_scheduler	frontend.h	/^    int (frontend_c::*MT_fetch_scheduler)(void); \/**< current fetch scheduler *\/$/;"	m	class:frontend_c
M_STATE	memory.h	/^  M_STATE,$/;"	e	enum:COHERENCE_STATE
MemType_Prefetch	memory.h	50;"	d
Mem_Req_State	memreq_info.h	/^} Mem_Req_State;$/;"	t	typeref:enum:Mem_Req_State_enum
Mem_Req_State_enum	memreq_info.h	/^typedef enum Mem_Req_State_enum {$/;"	g
Mem_Req_Type	memreq_info.h	/^} Mem_Req_Type;$/;"	t	typeref:enum:Mem_Req_Type_enum
Mem_Req_Type_enum	memreq_info.h	/^typedef enum Mem_Req_Type_enum {$/;"	g
Mem_To_UL1	pref_common.h	/^  Mem_To_UL1,$/;"	e	enum:HWP_Type_Enum
Mem_Type	uop.h	/^} Mem_Type;$/;"	t	typeref:enum:Mem_Type_enum
Mem_Type_enum	uop.h	/^typedef enum Mem_Type_enum {$/;"	g
Mytid	macsim.h	/^		int Mytid; \/**< tid used by IRIS *\/$/;"	m	class:macsim_c
NEW_MEMORY_CLASS	memory.h	561;"	d
NEW_MEMORY_CLASS_ID	memory.h	568;"	d
NOC_ACK	memreq_info.h	/^  NOC_ACK,$/;"	e	enum:NOC_TYPE
NOC_AVG_ACTIVE_PACKET	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET,$/;"	e	enum:StatisticsEnum
NOC_AVG_ACTIVE_PACKET_BASE	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET_BASE,$/;"	e	enum:StatisticsEnum
NOC_AVG_ACTIVE_PACKET_BASE_CPU	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET_BASE_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_ACTIVE_PACKET_BASE_GPU	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET_BASE_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_ACTIVE_PACKET_CPU	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_ACTIVE_PACKET_GPU	statsEnums.h	/^NOC_AVG_ACTIVE_PACKET_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY	statsEnums.h	/^NOC_AVG_LATENCY,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY_BASE	statsEnums.h	/^NOC_AVG_LATENCY_BASE,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY_BASE_CPU	statsEnums.h	/^NOC_AVG_LATENCY_BASE_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY_BASE_GPU	statsEnums.h	/^NOC_AVG_LATENCY_BASE_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY_CPU	statsEnums.h	/^NOC_AVG_LATENCY_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_LATENCY_GPU	statsEnums.h	/^NOC_AVG_LATENCY_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_BASE	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_BASE,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_BASE_CPU	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_BASE_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_BASE_GPU	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_BASE_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_BASE_L3	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_BASE_L3,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_BASE_MC	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_BASE_MC,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_CPU	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_CPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_GPU	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_GPU,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_L3	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_L3,$/;"	e	enum:StatisticsEnum
NOC_AVG_WAIT_IN_ROUTER_MC	statsEnums.h	/^NOC_AVG_WAIT_IN_ROUTER_MC,$/;"	e	enum:StatisticsEnum
NOC_FILL	memreq_info.h	/^  NOC_FILL,$/;"	e	enum:NOC_TYPE
NOC_H	noc.h	40;"	d
NOC_IDLE_CHANNEL	statsEnums.h	/^NOC_IDLE_CHANNEL,$/;"	e	enum:StatisticsEnum
NOC_IDLE_CHANNEL_CPU	statsEnums.h	/^NOC_IDLE_CHANNEL_CPU,$/;"	e	enum:StatisticsEnum
NOC_IDLE_CHANNEL_GPU	statsEnums.h	/^NOC_IDLE_CHANNEL_GPU,$/;"	e	enum:StatisticsEnum
NOC_IDLE_CHANNEL_L3	statsEnums.h	/^NOC_IDLE_CHANNEL_L3,$/;"	e	enum:StatisticsEnum
NOC_IDLE_CHANNEL_MC	statsEnums.h	/^NOC_IDLE_CHANNEL_MC,$/;"	e	enum:StatisticsEnum
NOC_LAST	memreq_info.h	/^  NOC_LAST,$/;"	e	enum:NOC_TYPE
NOC_LINK_ACTIVE	statsEnums.h	/^NOC_LINK_ACTIVE,$/;"	e	enum:StatisticsEnum
NOC_NEW	memreq_info.h	/^  NOC_NEW,$/;"	e	enum:NOC_TYPE
NOC_NEW_WITH_DATA	memreq_info.h	/^  NOC_NEW_WITH_DATA,$/;"	e	enum:NOC_TYPE
NOC_TYPE	memreq_info.h	/^enum NOC_TYPE {$/;"	g
NOT_BAR	uop.h	/^  NOT_BAR       = 0x0,          \/\/!< not a barrier-causing instruction$/;"	e	enum:Bar_Type_enum
NOT_CF	uop.h	/^  NOT_CF,                       \/\/!< not a control flow instruction$/;"	e	enum:Cf_Type_enum
NOT_MEM	uop.h	/^  NOT_MEM,                      \/\/!< not a memory instruction$/;"	e	enum:Mem_Type_enum
NO_ROUTER	memory.cc	83;"	d	file:
NULL	global_defs.h	209;"	d
NUM_ACTIVE_BLOCKS	statsEnums.h	/^NUM_ACTIVE_BLOCKS,$/;"	e	enum:StatisticsEnum
NUM_ACTIVE_THREADS	statsEnums.h	/^NUM_ACTIVE_THREADS,$/;"	e	enum:StatisticsEnum
NUM_CF_TYPES	uop.h	/^  NUM_CF_TYPES,$/;"	e	enum:Cf_Type_enum
NUM_DEP_TYPES	uop.h	/^  NUM_DEP_TYPES,$/;"	e	enum:Dep_Type_enum
NUM_INT_REGS	global_defs.h	177;"	d
NUM_MEM_TYPES	uop.h	/^  NUM_MEM_TYPES,$/;"	e	enum:Mem_Type_enum
NUM_MUL_TRANS_CM_TM_DM	statsEnums.h	/^NUM_MUL_TRANS_CM_TM_DM,$/;"	e	enum:StatisticsEnum
NUM_MUL_TRANS_CM_TM_DM_INST	statsEnums.h	/^NUM_MUL_TRANS_CM_TM_DM_INST,$/;"	e	enum:StatisticsEnum
NUM_NO_FETCH_CYCLES	statsEnums.h	/^NUM_NO_FETCH_CYCLES,$/;"	e	enum:StatisticsEnum
NUM_NO_SCHED_CYCLE	statsEnums.h	/^NUM_NO_SCHED_CYCLE,$/;"	e	enum:StatisticsEnum
NUM_OP_STATES	uop.h	/^  NUM_OP_STATES,$/;"	e	enum:Uop_State_enum
NUM_REG_IDS	global_defs.h	176;"	d
NUM_REG_MAPS	inst_info.h	/^  NUM_REG_MAPS,$/;"	e	enum:Reg_Type_enum
NUM_REPEAT	statsEnums.h	/^NUM_REPEAT,$/;"	e	enum:StatisticsEnum
NUM_SAMPLES	statsEnums.h	/^NUM_SAMPLES,$/;"	e	enum:StatisticsEnum
NUM_SCHED_IDLE_CYCLE	statsEnums.h	/^NUM_SCHED_IDLE_CYCLE,$/;"	e	enum:StatisticsEnum
NUM_THREAD	statsEnums.h	/^NUM_THREAD,$/;"	e	enum:StatisticsEnum
NUM_UOP_TYPES	uop.h	/^  NUM_UOP_TYPES,$/;"	e	enum:Uop_Type_enum
NUM_WRITES	statsEnums.h	/^NUM_WRITES,$/;"	e	enum:StatisticsEnum
NUM_WRITE_ACKS	statsEnums.h	/^NUM_WRITE_ACKS,$/;"	e	enum:StatisticsEnum
N_BIT_MASK	utils.h	73;"	d
N_BIT_MASK	utils.h	75;"	d
N_BIT_MASK_64	utils.h	74;"	d
OLDEST_FIRST	router.cc	68;"	d	file:
OP_CAT_3DNOW	statsEnums.h	/^OP_CAT_3DNOW,$/;"	e	enum:StatisticsEnum
OP_CAT_AES	statsEnums.h	/^OP_CAT_AES,$/;"	e	enum:StatisticsEnum
OP_CAT_AVX	statsEnums.h	/^OP_CAT_AVX,$/;"	e	enum:StatisticsEnum
OP_CAT_BINARY	statsEnums.h	/^OP_CAT_BINARY,$/;"	e	enum:StatisticsEnum
OP_CAT_BITBYTE	statsEnums.h	/^OP_CAT_BITBYTE,$/;"	e	enum:StatisticsEnum
OP_CAT_BROADCAST	statsEnums.h	/^OP_CAT_BROADCAST,$/;"	e	enum:StatisticsEnum
OP_CAT_CALL	statsEnums.h	/^OP_CAT_CALL,$/;"	e	enum:StatisticsEnum
OP_CAT_CMOV	statsEnums.h	/^OP_CAT_CMOV,$/;"	e	enum:StatisticsEnum
OP_CAT_COND_BR	statsEnums.h	/^OP_CAT_COND_BR,$/;"	e	enum:StatisticsEnum
OP_CAT_CONVERT	statsEnums.h	/^OP_CAT_CONVERT,$/;"	e	enum:StatisticsEnum
OP_CAT_DATAXFER	statsEnums.h	/^OP_CAT_DATAXFER,$/;"	e	enum:StatisticsEnum
OP_CAT_DECIMAL	statsEnums.h	/^OP_CAT_DECIMAL,$/;"	e	enum:StatisticsEnum
OP_CAT_FCMOV	statsEnums.h	/^OP_CAT_FCMOV,$/;"	e	enum:StatisticsEnum
OP_CAT_FLAGOP	statsEnums.h	/^OP_CAT_FLAGOP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ABS	statsEnums.h	/^OP_CAT_GPU_ABS,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ABS64	statsEnums.h	/^OP_CAT_GPU_ABS64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ADD	statsEnums.h	/^OP_CAT_GPU_ADD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ADD64	statsEnums.h	/^OP_CAT_GPU_ADD64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ADDC	statsEnums.h	/^OP_CAT_GPU_ADDC,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_AND	statsEnums.h	/^OP_CAT_GPU_AND,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_AND64	statsEnums.h	/^OP_CAT_GPU_AND64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ATOM	statsEnums.h	/^OP_CAT_GPU_ATOM,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ATOM64	statsEnums.h	/^OP_CAT_GPU_ATOM64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BAR	statsEnums.h	/^OP_CAT_GPU_BAR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFE	statsEnums.h	/^OP_CAT_GPU_BFE,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFE64	statsEnums.h	/^OP_CAT_GPU_BFE64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFI	statsEnums.h	/^OP_CAT_GPU_BFI,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFI64	statsEnums.h	/^OP_CAT_GPU_BFI64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFIND	statsEnums.h	/^OP_CAT_GPU_BFIND,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BFIND64	statsEnums.h	/^OP_CAT_GPU_BFIND64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BRA	statsEnums.h	/^OP_CAT_GPU_BRA,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BREV	statsEnums.h	/^OP_CAT_GPU_BREV,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BREV64	statsEnums.h	/^OP_CAT_GPU_BREV64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_BRKPT	statsEnums.h	/^OP_CAT_GPU_BRKPT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CALL	statsEnums.h	/^OP_CAT_GPU_CALL,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CLZ	statsEnums.h	/^OP_CAT_GPU_CLZ,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CLZ64	statsEnums.h	/^OP_CAT_GPU_CLZ64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CNOT	statsEnums.h	/^OP_CAT_GPU_CNOT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CNOT64	statsEnums.h	/^OP_CAT_GPU_CNOT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_COPYSIGN	statsEnums.h	/^OP_CAT_GPU_COPYSIGN,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_COPYSIGN64	statsEnums.h	/^OP_CAT_GPU_COPYSIGN64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_COS	statsEnums.h	/^OP_CAT_GPU_COS,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CVT	statsEnums.h	/^OP_CAT_GPU_CVT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CVT64	statsEnums.h	/^OP_CAT_GPU_CVT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CVTA	statsEnums.h	/^OP_CAT_GPU_CVTA,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_CVTA64	statsEnums.h	/^OP_CAT_GPU_CVTA64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_DIV	statsEnums.h	/^OP_CAT_GPU_DIV,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_DIV64	statsEnums.h	/^OP_CAT_GPU_DIV64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_EN	statsEnums.h	/^OP_CAT_GPU_EN,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_EX2	statsEnums.h	/^OP_CAT_GPU_EX2,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_EXIT	statsEnums.h	/^OP_CAT_GPU_EXIT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_FMA	statsEnums.h	/^OP_CAT_GPU_FMA,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_FMA64	statsEnums.h	/^OP_CAT_GPU_FMA64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ISSPACEP	statsEnums.h	/^OP_CAT_GPU_ISSPACEP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_LD	statsEnums.h	/^OP_CAT_GPU_LD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_LD64	statsEnums.h	/^OP_CAT_GPU_LD64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_LDU	statsEnums.h	/^OP_CAT_GPU_LDU,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_LDU64	statsEnums.h	/^OP_CAT_GPU_LDU64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_LG2	statsEnums.h	/^OP_CAT_GPU_LG2,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MAD	statsEnums.h	/^OP_CAT_GPU_MAD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MAD24	statsEnums.h	/^OP_CAT_GPU_MAD24,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MAD64	statsEnums.h	/^OP_CAT_GPU_MAD64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MAX	statsEnums.h	/^OP_CAT_GPU_MAX,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MAX64	statsEnums.h	/^OP_CAT_GPU_MAX64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MEMBAR	statsEnums.h	/^OP_CAT_GPU_MEMBAR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MIN	statsEnums.h	/^OP_CAT_GPU_MIN,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MIN64	statsEnums.h	/^OP_CAT_GPU_MIN64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MOV	statsEnums.h	/^OP_CAT_GPU_MOV,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MOV64	statsEnums.h	/^OP_CAT_GPU_MOV64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MUL	statsEnums.h	/^OP_CAT_GPU_MUL,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MUL24	statsEnums.h	/^OP_CAT_GPU_MUL24,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_MUL64	statsEnums.h	/^OP_CAT_GPU_MUL64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_NEG	statsEnums.h	/^OP_CAT_GPU_NEG,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_NEG64	statsEnums.h	/^OP_CAT_GPU_NEG64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_NOT	statsEnums.h	/^OP_CAT_GPU_NOT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_NOT64	statsEnums.h	/^OP_CAT_GPU_NOT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_OR	statsEnums.h	/^OP_CAT_GPU_OR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_OR64	statsEnums.h	/^OP_CAT_GPU_OR64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_PHI	statsEnums.h	/^OP_CAT_GPU_PHI,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_PMEVENT	statsEnums.h	/^OP_CAT_GPU_PMEVENT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_POPC	statsEnums.h	/^OP_CAT_GPU_POPC,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_POPC64	statsEnums.h	/^OP_CAT_GPU_POPC64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_PREFETCH	statsEnums.h	/^OP_CAT_GPU_PREFETCH,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_PREFETCHU	statsEnums.h	/^OP_CAT_GPU_PREFETCHU,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_PRMT	statsEnums.h	/^OP_CAT_GPU_PRMT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RCP	statsEnums.h	/^OP_CAT_GPU_RCP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RCP64	statsEnums.h	/^OP_CAT_GPU_RCP64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RECONVERGE	statsEnums.h	/^OP_CAT_GPU_RECONVERGE,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RED	statsEnums.h	/^OP_CAT_GPU_RED,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RED64	statsEnums.h	/^OP_CAT_GPU_RED64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_REM	statsEnums.h	/^OP_CAT_GPU_REM,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_REM64	statsEnums.h	/^OP_CAT_GPU_REM64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RET	statsEnums.h	/^OP_CAT_GPU_RET,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RSQRT	statsEnums.h	/^OP_CAT_GPU_RSQRT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_RSQRT64	statsEnums.h	/^OP_CAT_GPU_RSQRT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SAD	statsEnums.h	/^OP_CAT_GPU_SAD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SAD64	statsEnums.h	/^OP_CAT_GPU_SAD64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SELP	statsEnums.h	/^OP_CAT_GPU_SELP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SELP64	statsEnums.h	/^OP_CAT_GPU_SELP64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SET	statsEnums.h	/^OP_CAT_GPU_SET,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SET64	statsEnums.h	/^OP_CAT_GPU_SET64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SETP	statsEnums.h	/^OP_CAT_GPU_SETP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SETP64	statsEnums.h	/^OP_CAT_GPU_SETP64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SHL	statsEnums.h	/^OP_CAT_GPU_SHL,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SHL64	statsEnums.h	/^OP_CAT_GPU_SHL64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SHR	statsEnums.h	/^OP_CAT_GPU_SHR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SHR64	statsEnums.h	/^OP_CAT_GPU_SHR64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SIN	statsEnums.h	/^OP_CAT_GPU_SIN,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SLCT	statsEnums.h	/^OP_CAT_GPU_SLCT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SLCT64	statsEnums.h	/^OP_CAT_GPU_SLCT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SQRT	statsEnums.h	/^OP_CAT_GPU_SQRT,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SQRT64	statsEnums.h	/^OP_CAT_GPU_SQRT64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ST	statsEnums.h	/^OP_CAT_GPU_ST,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_ST64	statsEnums.h	/^OP_CAT_GPU_ST64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUB	statsEnums.h	/^OP_CAT_GPU_SUB,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUB64	statsEnums.h	/^OP_CAT_GPU_SUB64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUBC	statsEnums.h	/^OP_CAT_GPU_SUBC,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SULD	statsEnums.h	/^OP_CAT_GPU_SULD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SULD64	statsEnums.h	/^OP_CAT_GPU_SULD64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUQ	statsEnums.h	/^OP_CAT_GPU_SUQ,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SURED	statsEnums.h	/^OP_CAT_GPU_SURED,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SURED64	statsEnums.h	/^OP_CAT_GPU_SURED64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUST	statsEnums.h	/^OP_CAT_GPU_SUST,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_SUST64	statsEnums.h	/^OP_CAT_GPU_SUST64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TESTP	statsEnums.h	/^OP_CAT_GPU_TESTP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TESTP64	statsEnums.h	/^OP_CAT_GPU_TESTP64,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TEX	statsEnums.h	/^OP_CAT_GPU_TEX,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TLD4	statsEnums.h	/^OP_CAT_GPU_TLD4,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TRAP	statsEnums.h	/^OP_CAT_GPU_TRAP,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_TXQ	statsEnums.h	/^OP_CAT_GPU_TXQ,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VABSDIFF	statsEnums.h	/^OP_CAT_GPU_VABSDIFF,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VADD	statsEnums.h	/^OP_CAT_GPU_VADD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VMAD	statsEnums.h	/^OP_CAT_GPU_VMAD,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VMAX	statsEnums.h	/^OP_CAT_GPU_VMAX,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VMIN	statsEnums.h	/^OP_CAT_GPU_VMIN,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VOTE	statsEnums.h	/^OP_CAT_GPU_VOTE,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VSET	statsEnums.h	/^OP_CAT_GPU_VSET,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VSHL	statsEnums.h	/^OP_CAT_GPU_VSHL,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VSHR	statsEnums.h	/^OP_CAT_GPU_VSHR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_VSUB	statsEnums.h	/^OP_CAT_GPU_VSUB,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_XOR	statsEnums.h	/^OP_CAT_GPU_XOR,$/;"	e	enum:StatisticsEnum
OP_CAT_GPU_XOR64	statsEnums.h	/^OP_CAT_GPU_XOR64,$/;"	e	enum:StatisticsEnum
OP_CAT_INTERRUPT	statsEnums.h	/^OP_CAT_INTERRUPT,$/;"	e	enum:StatisticsEnum
OP_CAT_INVALID	statsEnums.h	/^OP_CAT_INVALID,$/;"	e	enum:StatisticsEnum
OP_CAT_IO	statsEnums.h	/^OP_CAT_IO,$/;"	e	enum:StatisticsEnum
OP_CAT_IOSTRINGOP	statsEnums.h	/^OP_CAT_IOSTRINGOP,$/;"	e	enum:StatisticsEnum
OP_CAT_LDU_GM	statsEnums.h	/^OP_CAT_LDU_GM,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_CM_CA	statsEnums.h	/^OP_CAT_LD_CM_CA,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_CM_CG	statsEnums.h	/^OP_CAT_LD_CM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_CM_CS	statsEnums.h	/^OP_CAT_LD_CM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_CM_CU	statsEnums.h	/^OP_CAT_LD_CM_CU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_CM_LU	statsEnums.h	/^OP_CAT_LD_CM_LU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_GM_CA	statsEnums.h	/^OP_CAT_LD_GM_CA,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_GM_CG	statsEnums.h	/^OP_CAT_LD_GM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_GM_CS	statsEnums.h	/^OP_CAT_LD_GM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_GM_CU	statsEnums.h	/^OP_CAT_LD_GM_CU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_GM_LU	statsEnums.h	/^OP_CAT_LD_GM_LU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_LM_CA	statsEnums.h	/^OP_CAT_LD_LM_CA,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_LM_CG	statsEnums.h	/^OP_CAT_LD_LM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_LM_CS	statsEnums.h	/^OP_CAT_LD_LM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_LM_CU	statsEnums.h	/^OP_CAT_LD_LM_CU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_LM_LU	statsEnums.h	/^OP_CAT_LD_LM_LU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_PM_CA	statsEnums.h	/^OP_CAT_LD_PM_CA,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_PM_CG	statsEnums.h	/^OP_CAT_LD_PM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_PM_CS	statsEnums.h	/^OP_CAT_LD_PM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_PM_CU	statsEnums.h	/^OP_CAT_LD_PM_CU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_PM_LU	statsEnums.h	/^OP_CAT_LD_PM_LU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_SM_CA	statsEnums.h	/^OP_CAT_LD_SM_CA,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_SM_CG	statsEnums.h	/^OP_CAT_LD_SM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_SM_CS	statsEnums.h	/^OP_CAT_LD_SM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_SM_CU	statsEnums.h	/^OP_CAT_LD_SM_CU,$/;"	e	enum:StatisticsEnum
OP_CAT_LD_SM_LU	statsEnums.h	/^OP_CAT_LD_SM_LU,$/;"	e	enum:StatisticsEnum
OP_CAT_LOGICAL	statsEnums.h	/^OP_CAT_LOGICAL,$/;"	e	enum:StatisticsEnum
OP_CAT_MISC	statsEnums.h	/^OP_CAT_MISC,$/;"	e	enum:StatisticsEnum
OP_CAT_MMX	statsEnums.h	/^OP_CAT_MMX,$/;"	e	enum:StatisticsEnum
OP_CAT_NOP	statsEnums.h	/^OP_CAT_NOP,$/;"	e	enum:StatisticsEnum
OP_CAT_PCLMULQDQ	statsEnums.h	/^OP_CAT_PCLMULQDQ,$/;"	e	enum:StatisticsEnum
OP_CAT_POP	statsEnums.h	/^OP_CAT_POP,$/;"	e	enum:StatisticsEnum
OP_CAT_PREFETCH	statsEnums.h	/^OP_CAT_PREFETCH,$/;"	e	enum:StatisticsEnum
OP_CAT_PREFETCH_NTA	statsEnums.h	/^OP_CAT_PREFETCH_NTA,$/;"	e	enum:StatisticsEnum
OP_CAT_PREFETCH_T0	statsEnums.h	/^OP_CAT_PREFETCH_T0,$/;"	e	enum:StatisticsEnum
OP_CAT_PREFETCH_T1	statsEnums.h	/^OP_CAT_PREFETCH_T1,$/;"	e	enum:StatisticsEnum
OP_CAT_PREFETCH_T2	statsEnums.h	/^OP_CAT_PREFETCH_T2,$/;"	e	enum:StatisticsEnum
OP_CAT_PREF_GM_L1	statsEnums.h	/^OP_CAT_PREF_GM_L1,$/;"	e	enum:StatisticsEnum
OP_CAT_PREF_GM_L2	statsEnums.h	/^OP_CAT_PREF_GM_L2,$/;"	e	enum:StatisticsEnum
OP_CAT_PREF_LM_L1	statsEnums.h	/^OP_CAT_PREF_LM_L1,$/;"	e	enum:StatisticsEnum
OP_CAT_PREF_LM_L2	statsEnums.h	/^OP_CAT_PREF_LM_L2,$/;"	e	enum:StatisticsEnum
OP_CAT_PREF_UNIFORM	statsEnums.h	/^OP_CAT_PREF_UNIFORM,$/;"	e	enum:StatisticsEnum
OP_CAT_PUSH	statsEnums.h	/^OP_CAT_PUSH,$/;"	e	enum:StatisticsEnum
OP_CAT_RET	statsEnums.h	/^OP_CAT_RET,$/;"	e	enum:StatisticsEnum
OP_CAT_ROTATE	statsEnums.h	/^OP_CAT_ROTATE,$/;"	e	enum:StatisticsEnum
OP_CAT_SEGOP	statsEnums.h	/^OP_CAT_SEGOP,$/;"	e	enum:StatisticsEnum
OP_CAT_SEMAPHORE	statsEnums.h	/^OP_CAT_SEMAPHORE,$/;"	e	enum:StatisticsEnum
OP_CAT_SHIFT	statsEnums.h	/^OP_CAT_SHIFT,$/;"	e	enum:StatisticsEnum
OP_CAT_SSE	statsEnums.h	/^OP_CAT_SSE,$/;"	e	enum:StatisticsEnum
OP_CAT_STRINGOP	statsEnums.h	/^OP_CAT_STRINGOP,$/;"	e	enum:StatisticsEnum
OP_CAT_STTNI	statsEnums.h	/^OP_CAT_STTNI,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_GM_CG	statsEnums.h	/^OP_CAT_ST_GM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_GM_CS	statsEnums.h	/^OP_CAT_ST_GM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_GM_WB	statsEnums.h	/^OP_CAT_ST_GM_WB,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_GM_WT	statsEnums.h	/^OP_CAT_ST_GM_WT,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_LM_CG	statsEnums.h	/^OP_CAT_ST_LM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_LM_CS	statsEnums.h	/^OP_CAT_ST_LM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_LM_WB	statsEnums.h	/^OP_CAT_ST_LM_WB,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_LM_WT	statsEnums.h	/^OP_CAT_ST_LM_WT,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_SM_CG	statsEnums.h	/^OP_CAT_ST_SM_CG,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_SM_CS	statsEnums.h	/^OP_CAT_ST_SM_CS,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_SM_WB	statsEnums.h	/^OP_CAT_ST_SM_WB,$/;"	e	enum:StatisticsEnum
OP_CAT_ST_SM_WT	statsEnums.h	/^OP_CAT_ST_SM_WT,$/;"	e	enum:StatisticsEnum
OP_CAT_SYSCALL	statsEnums.h	/^OP_CAT_SYSCALL,$/;"	e	enum:StatisticsEnum
OP_CAT_SYSRET	statsEnums.h	/^OP_CAT_SYSRET,$/;"	e	enum:StatisticsEnum
OP_CAT_SYSTEM	statsEnums.h	/^OP_CAT_SYSTEM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_DATA_XFER_GM	statsEnums.h	/^OP_CAT_TR_DATA_XFER_GM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_DATA_XFER_LM	statsEnums.h	/^OP_CAT_TR_DATA_XFER_LM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_DATA_XFER_SM	statsEnums.h	/^OP_CAT_TR_DATA_XFER_SM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_DIV	statsEnums.h	/^OP_CAT_TR_DIV,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_FDIV	statsEnums.h	/^OP_CAT_TR_FDIV,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_FMUL	statsEnums.h	/^OP_CAT_TR_FMUL,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_LAST	statsEnums.h	/^OP_CAT_TR_LAST,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_CM	statsEnums.h	/^OP_CAT_TR_MEM_LD_CM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_GM	statsEnums.h	/^OP_CAT_TR_MEM_LD_GM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_LM	statsEnums.h	/^OP_CAT_TR_MEM_LD_LM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_PM	statsEnums.h	/^OP_CAT_TR_MEM_LD_PM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_SM	statsEnums.h	/^OP_CAT_TR_MEM_LD_SM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_LD_TM	statsEnums.h	/^OP_CAT_TR_MEM_LD_TM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_ST_GM	statsEnums.h	/^OP_CAT_TR_MEM_ST_GM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_ST_LM	statsEnums.h	/^OP_CAT_TR_MEM_ST_LM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MEM_ST_SM	statsEnums.h	/^OP_CAT_TR_MEM_ST_SM,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_MUL	statsEnums.h	/^OP_CAT_TR_MUL,$/;"	e	enum:StatisticsEnum
OP_CAT_TR_NOP	statsEnums.h	/^OP_CAT_TR_NOP,$/;"	e	enum:StatisticsEnum
OP_CAT_UNCOND_BR	statsEnums.h	/^OP_CAT_UNCOND_BR,$/;"	e	enum:StatisticsEnum
OP_CAT_VTX	statsEnums.h	/^OP_CAT_VTX,$/;"	e	enum:StatisticsEnum
OP_CAT_WIDENOP	statsEnums.h	/^OP_CAT_WIDENOP,$/;"	e	enum:StatisticsEnum
OP_CAT_X87_ALU	statsEnums.h	/^OP_CAT_X87_ALU,$/;"	e	enum:StatisticsEnum
OP_CAT_XSAVE	statsEnums.h	/^OP_CAT_XSAVE,$/;"	e	enum:StatisticsEnum
OP_CAT_XSAVEOPT	statsEnums.h	/^OP_CAT_XSAVEOPT,$/;"	e	enum:StatisticsEnum
OS_ALLOCATE	uop.h	/^  OS_ALLOCATE,$/;"	e	enum:Uop_State_enum
OS_DCACHE_ACCESS	uop.h	/^  OS_DCACHE_ACCESS,$/;"	e	enum:Uop_State_enum
OS_DCACHE_BEGIN	uop.h	/^  OS_DCACHE_BEGIN,$/;"	e	enum:Uop_State_enum
OS_DCACHE_HIT	uop.h	/^  OS_DCACHE_HIT,$/;"	e	enum:Uop_State_enum
OS_DCACHE_MEM_ACCESS_DENIED	uop.h	/^  OS_DCACHE_MEM_ACCESS_DENIED,$/;"	e	enum:Uop_State_enum
OS_DONE	uop.h	/^  OS_DONE,                      \/\/!< uop is finished   executing, awaiting retirement$/;"	e	enum:Uop_State_enum
OS_EXEC	uop.h	/^  OS_EXEC,$/;"	e	enum:Uop_State_enum
OS_EXEC_BEGIN	uop.h	/^  OS_EXEC_BEGIN,$/;"	e	enum:Uop_State_enum
OS_FETCHED	uop.h	/^  OS_FETCHED,                   \/\/!< uop has been   fetched, awaiting issue$/;"	e	enum:Uop_State_enum
OS_ISSUED	uop.h	/^  OS_ISSUED,                    \/\/!< uop has been    issued, waiting for its sources$/;"	e	enum:Uop_State_enum
OS_MERGED	uop.h	/^  OS_MERGED,$/;"	e	enum:Uop_State_enum
OS_MISS	uop.h	/^  OS_MISS,                      \/\/!< uop has missed in the dcache$/;"	e	enum:Uop_State_enum
OS_SCHEDULE	uop.h	/^  OS_SCHEDULE,$/;"	e	enum:Uop_State_enum
OS_SCHEDULED	uop.h	/^  OS_SCHEDULED,                 \/\/!< uop has been scheduled, awaiting complection$/;"	e	enum:Uop_State_enum
OS_SCHEDULE_DONE	uop.h	/^  OS_SCHEDULE_DONE,$/;"	e	enum:Uop_State_enum
OS_WAIT_MEM	uop.h	/^  OS_WAIT_MEM,                  \/\/!< uop is waiting for a port or a miss_buffer entry$/;"	e	enum:Uop_State_enum
PERCENT_Stat	statistics.h	/^    PERCENT_Stat(const string& str, const string& outputfilename, long ID, $/;"	f	class:PERCENT_Stat
PERCENT_Stat	statistics.h	/^class PERCENT_Stat : public AbstractStat$/;"	c
PERFECT_TARGET_PRED	statsEnums.h	/^PERFECT_TARGET_PRED,$/;"	e	enum:StatisticsEnum
PER_1000_INST_Stat	statistics.h	/^    PER_1000_INST_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:PER_1000_INST_Stat
PER_1000_INST_Stat	statistics.h	/^class PER_1000_INST_Stat : public AbstractStat$/;"	c
PER_1000_PRET_INST_Stat	statistics.h	/^    PER_1000_PRET_INST_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:PER_1000_PRET_INST_Stat
PER_1000_PRET_INST_Stat	statistics.h	/^class PER_1000_PRET_INST_Stat : public AbstractStat$/;"	c
PER_CORE_STATS_ENUM_FIRST	statsEnums.h	5;"	d
PER_CORE_STATS_ENUM_START	statsEnums.h	4;"	d
PER_CYCLE_Stat	statistics.h	/^    PER_CYCLE_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:PER_CYCLE_Stat
PER_CYCLE_Stat	statistics.h	/^class PER_CYCLE_Stat : public AbstractStat$/;"	c
PER_INST_Stat	statistics.h	/^    PER_INST_Stat(const string& str, const string& outputfilename, long ID):$/;"	f	class:PER_INST_Stat
PER_INST_Stat	statistics.h	/^class PER_INST_Stat : public AbstractStat$/;"	c
PHT_INIT_VALUE	bp_gshare.cc	51;"	d	file:
PIN_CF_BR	trace_read.h	/^  PIN_CF_BR,                    \/**< an unconditional branch *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_CALL	trace_read.h	/^  PIN_CF_CALL,                  \/**< a call *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_CBR	trace_read.h	/^  PIN_CF_CBR,                   \/**< a conditional branch *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_IBR	trace_read.h	/^  PIN_CF_IBR,                   \/**< an indirect branch *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_ICALL	trace_read.h	/^  PIN_CF_ICALL,                 \/**< an indirect call *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_ICBR	trace_read.h	/^  PIN_CF_ICBR$/;"	e	enum:CF_TYPE_enum
PIN_CF_ICO	trace_read.h	/^  PIN_CF_ICO,                   \/**< an indirect jump to co-routine *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_RET	trace_read.h	/^  PIN_CF_RET,                   \/**< a return *\/$/;"	e	enum:CF_TYPE_enum
PIN_CF_SYS	trace_read.h	/^  PIN_CF_SYS,$/;"	e	enum:CF_TYPE_enum
PIN_NOT_CF	trace_read.h	/^  PIN_NOT_CF,                   \/**< not a control flow instruction *\/$/;"	e	enum:CF_TYPE_enum
PORT_H_INCLUDED	port.h	40;"	d
POWER_BLOCK_STATES_R	statsEnums.h	/^POWER_BLOCK_STATES_R,$/;"	e	enum:StatisticsEnum
POWER_BLOCK_STATES_W	statsEnums.h	/^POWER_BLOCK_STATES_W,$/;"	e	enum:StatisticsEnum
POWER_BR_PRED_R	statsEnums.h	/^POWER_BR_PRED_R,$/;"	e	enum:StatisticsEnum
POWER_BR_PRED_W	statsEnums.h	/^POWER_BR_PRED_W,$/;"	e	enum:StatisticsEnum
POWER_CONST_CACHE_R	statsEnums.h	/^POWER_CONST_CACHE_R,$/;"	e	enum:StatisticsEnum
POWER_CONST_CACHE_R_TAG	statsEnums.h	/^POWER_CONST_CACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_CONST_CACHE_W	statsEnums.h	/^POWER_CONST_CACHE_W,$/;"	e	enum:StatisticsEnum
POWER_CONST_CACHE_W_TAG	statsEnums.h	/^POWER_CONST_CACHE_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_CONTROL_REGISTER_R	statsEnums.h	/^POWER_CONTROL_REGISTER_R,$/;"	e	enum:StatisticsEnum
POWER_CONTROL_REGISTER_W	statsEnums.h	/^POWER_CONTROL_REGISTER_W,$/;"	e	enum:StatisticsEnum
POWER_CORE_EVENT	statistics.h	1151;"	d
POWER_CORE_EVENT_M	statistics.h	1152;"	d
POWER_CORE_EVENT_N	statistics.h	1153;"	d
POWER_DATA_TLB_R	statsEnums.h	/^POWER_DATA_TLB_R,$/;"	e	enum:StatisticsEnum
POWER_DATA_TLB_R_TAG	statsEnums.h	/^POWER_DATA_TLB_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_DATA_TLB_W	statsEnums.h	/^POWER_DATA_TLB_W,$/;"	e	enum:StatisticsEnum
POWER_DATA_TLB_W_TAG	statsEnums.h	/^POWER_DATA_TLB_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_LINEFILL_BUF_R	statsEnums.h	/^POWER_DCACHE_LINEFILL_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_LINEFILL_BUF_R_TAG	statsEnums.h	/^POWER_DCACHE_LINEFILL_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_LINEFILL_BUF_W	statsEnums.h	/^POWER_DCACHE_LINEFILL_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_LINEFILL_BUF_W_TAG	statsEnums.h	/^POWER_DCACHE_LINEFILL_BUF_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_MISS_BUF_R	statsEnums.h	/^POWER_DCACHE_MISS_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_MISS_BUF_R_TAG	statsEnums.h	/^POWER_DCACHE_MISS_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_MISS_BUF_W	statsEnums.h	/^POWER_DCACHE_MISS_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_MISS_BUF_W_TAG	statsEnums.h	/^POWER_DCACHE_MISS_BUF_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_R	statsEnums.h	/^POWER_DCACHE_R,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_R_TAG	statsEnums.h	/^POWER_DCACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_W	statsEnums.h	/^POWER_DCACHE_W,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_WB_BUF_R	statsEnums.h	/^POWER_DCACHE_WB_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_WB_BUF_R_TAG	statsEnums.h	/^POWER_DCACHE_WB_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_WB_BUF_W	statsEnums.h	/^POWER_DCACHE_WB_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_DCACHE_WB_BUF_W_TAG	statsEnums.h	/^POWER_DCACHE_WB_BUF_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_DEP_CHECK_LOGIC_R	statsEnums.h	/^POWER_DEP_CHECK_LOGIC_R,$/;"	e	enum:StatisticsEnum
POWER_EVENT	statistics.h	1154;"	d
POWER_EVENT_M	statistics.h	1155;"	d
POWER_EVENT_N	statistics.h	1156;"	d
POWER_EXEC_BYPASS	statsEnums.h	/^POWER_EXEC_BYPASS,$/;"	e	enum:StatisticsEnum
POWER_EX_ALU_R	statsEnums.h	/^POWER_EX_ALU_R,$/;"	e	enum:StatisticsEnum
POWER_EX_FPU_R	statsEnums.h	/^POWER_EX_FPU_R,$/;"	e	enum:StatisticsEnum
POWER_EX_MUL_R	statsEnums.h	/^POWER_EX_MUL_R,$/;"	e	enum:StatisticsEnum
POWER_EX_SFU_R	statsEnums.h	/^POWER_EX_SFU_R,$/;"	e	enum:StatisticsEnum
POWER_FETCH_QUEUE_R	statsEnums.h	/^POWER_FETCH_QUEUE_R,$/;"	e	enum:StatisticsEnum
POWER_FETCH_QUEUE_W	statsEnums.h	/^POWER_FETCH_QUEUE_W,$/;"	e	enum:StatisticsEnum
POWER_FLAG_REGISTER_R	statsEnums.h	/^POWER_FLAG_REGISTER_R,$/;"	e	enum:StatisticsEnum
POWER_FLAG_REGISTER_W	statsEnums.h	/^POWER_FLAG_REGISTER_W,$/;"	e	enum:StatisticsEnum
POWER_FP_REGFILE_R	statsEnums.h	/^POWER_FP_REGFILE_R,$/;"	e	enum:StatisticsEnum
POWER_FP_REGFILE_W	statsEnums.h	/^POWER_FP_REGFILE_W,$/;"	e	enum:StatisticsEnum
POWER_FP_REGISTER_R	statsEnums.h	/^POWER_FP_REGISTER_R,$/;"	e	enum:StatisticsEnum
POWER_FP_REGISTER_W	statsEnums.h	/^POWER_FP_REGISTER_W,$/;"	e	enum:StatisticsEnum
POWER_FP_RENAME_R	statsEnums.h	/^POWER_FP_RENAME_R,$/;"	e	enum:StatisticsEnum
POWER_FP_RENAME_W	statsEnums.h	/^POWER_FP_RENAME_W,$/;"	e	enum:StatisticsEnum
POWER_FREELIST_R	statsEnums.h	/^POWER_FREELIST_R,$/;"	e	enum:StatisticsEnum
POWER_FREELIST_W	statsEnums.h	/^POWER_FREELIST_W,$/;"	e	enum:StatisticsEnum
POWER_GP_REGISTER_R	statsEnums.h	/^POWER_GP_REGISTER_R,$/;"	e	enum:StatisticsEnum
POWER_GP_REGISTER_W	statsEnums.h	/^POWER_GP_REGISTER_W,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_CONF	statsEnums.h	/^POWER_ICACHE_CONF,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_MISS_BUF_R	statsEnums.h	/^POWER_ICACHE_MISS_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_MISS_BUF_R_TAG	statsEnums.h	/^POWER_ICACHE_MISS_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_MISS_BUF_W	statsEnums.h	/^POWER_ICACHE_MISS_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_MISS_BUF_W_TAG	statsEnums.h	/^POWER_ICACHE_MISS_BUF_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_R	statsEnums.h	/^POWER_ICACHE_R,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_R_TAG	statsEnums.h	/^POWER_ICACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_TOT_ACC	statsEnums.h	/^POWER_ICACHE_TOT_ACC,$/;"	e	enum:StatisticsEnum
POWER_ICACHE_W	statsEnums.h	/^POWER_ICACHE_W,$/;"	e	enum:StatisticsEnum
POWER_INST_COMMIT_SEL_LOGIC_R	statsEnums.h	/^POWER_INST_COMMIT_SEL_LOGIC_R,$/;"	e	enum:StatisticsEnum
POWER_INST_COMMIT_SEL_LOGIC_W	statsEnums.h	/^POWER_INST_COMMIT_SEL_LOGIC_W,$/;"	e	enum:StatisticsEnum
POWER_INST_DECODER_R	statsEnums.h	/^POWER_INST_DECODER_R,$/;"	e	enum:StatisticsEnum
POWER_INST_DECODER_W	statsEnums.h	/^POWER_INST_DECODER_W,$/;"	e	enum:StatisticsEnum
POWER_INST_ISSUE_SEL_LOGIC_R	statsEnums.h	/^POWER_INST_ISSUE_SEL_LOGIC_R,$/;"	e	enum:StatisticsEnum
POWER_INST_ISSUE_SEL_LOGIC_W	statsEnums.h	/^POWER_INST_ISSUE_SEL_LOGIC_W,$/;"	e	enum:StatisticsEnum
POWER_INST_QUEUE_R	statsEnums.h	/^POWER_INST_QUEUE_R,$/;"	e	enum:StatisticsEnum
POWER_INST_QUEUE_W	statsEnums.h	/^POWER_INST_QUEUE_W,$/;"	e	enum:StatisticsEnum
POWER_INT_REGFILE_R	statsEnums.h	/^POWER_INT_REGFILE_R,$/;"	e	enum:StatisticsEnum
POWER_INT_REGFILE_W	statsEnums.h	/^POWER_INT_REGFILE_W,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_LINEFILL_BUF_R	statsEnums.h	/^POWER_L2CACHE_LINEFILL_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_LINEFILL_BUF_R_TAG	statsEnums.h	/^POWER_L2CACHE_LINEFILL_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_LINEFILL_BUF_W	statsEnums.h	/^POWER_L2CACHE_LINEFILL_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_R	statsEnums.h	/^POWER_L2CACHE_R,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_R_TAG	statsEnums.h	/^POWER_L2CACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_W	statsEnums.h	/^POWER_L2CACHE_W,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_WB_BUF_R	statsEnums.h	/^POWER_L2CACHE_WB_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_WB_BUF_R_TAG	statsEnums.h	/^POWER_L2CACHE_WB_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L2CACHE_WB_BUF_W	statsEnums.h	/^POWER_L2CACHE_WB_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_LINEFILL_BUF_R	statsEnums.h	/^POWER_L3CACHE_LINEFILL_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_LINEFILL_BUF_R_TAG	statsEnums.h	/^POWER_L3CACHE_LINEFILL_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_LINEFILL_BUF_W	statsEnums.h	/^POWER_L3CACHE_LINEFILL_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_R	statsEnums.h	/^POWER_L3CACHE_R,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_R_TAG	statsEnums.h	/^POWER_L3CACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_W	statsEnums.h	/^POWER_L3CACHE_W,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_WB_BUF_R	statsEnums.h	/^POWER_L3CACHE_WB_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_WB_BUF_R_TAG	statsEnums.h	/^POWER_L3CACHE_WB_BUF_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_L3CACHE_WB_BUF_W	statsEnums.h	/^POWER_L3CACHE_WB_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_LOAD_BYPASS	statsEnums.h	/^POWER_LOAD_BYPASS,$/;"	e	enum:StatisticsEnum
POWER_LOAD_QUEUE_R	statsEnums.h	/^POWER_LOAD_QUEUE_R,$/;"	e	enum:StatisticsEnum
POWER_LOAD_QUEUE_R_TAG	statsEnums.h	/^POWER_LOAD_QUEUE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_LOAD_QUEUE_W	statsEnums.h	/^POWER_LOAD_QUEUE_W,$/;"	e	enum:StatisticsEnum
POWER_LOAD_QUEUE_W_TAG	statsEnums.h	/^POWER_LOAD_QUEUE_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_MC_R	statsEnums.h	/^POWER_MC_R,$/;"	e	enum:StatisticsEnum
POWER_MC_W	statsEnums.h	/^POWER_MC_W,$/;"	e	enum:StatisticsEnum
POWER_MICRO_OP_SEQ_R	statsEnums.h	/^POWER_MICRO_OP_SEQ_R,$/;"	e	enum:StatisticsEnum
POWER_MICRO_OP_SEQ_W	statsEnums.h	/^POWER_MICRO_OP_SEQ_W,$/;"	e	enum:StatisticsEnum
POWER_OPERAND_DECODER_R	statsEnums.h	/^POWER_OPERAND_DECODER_R,$/;"	e	enum:StatisticsEnum
POWER_OPERAND_DECODER_W	statsEnums.h	/^POWER_OPERAND_DECODER_W,$/;"	e	enum:StatisticsEnum
POWER_PAYLOAD_RAM_R	statsEnums.h	/^POWER_PAYLOAD_RAM_R,$/;"	e	enum:StatisticsEnum
POWER_PAYLOAD_RAM_W	statsEnums.h	/^POWER_PAYLOAD_RAM_W,$/;"	e	enum:StatisticsEnum
POWER_PIPELINE	statsEnums.h	/^POWER_PIPELINE,$/;"	e	enum:StatisticsEnum
POWER_RAS_R	statsEnums.h	/^POWER_RAS_R,$/;"	e	enum:StatisticsEnum
POWER_RAS_W	statsEnums.h	/^POWER_RAS_W,$/;"	e	enum:StatisticsEnum
POWER_REG_RENAMING_TABLE_R	statsEnums.h	/^POWER_REG_RENAMING_TABLE_R,$/;"	e	enum:StatisticsEnum
POWER_REG_RENAMING_TABLE_W	statsEnums.h	/^POWER_REG_RENAMING_TABLE_W,$/;"	e	enum:StatisticsEnum
POWER_REORDER_BUF_R	statsEnums.h	/^POWER_REORDER_BUF_R,$/;"	e	enum:StatisticsEnum
POWER_REORDER_BUF_W	statsEnums.h	/^POWER_REORDER_BUF_W,$/;"	e	enum:StatisticsEnum
POWER_RESERVATION_STATION_R	statsEnums.h	/^POWER_RESERVATION_STATION_R,$/;"	e	enum:StatisticsEnum
POWER_RESERVATION_STATION_R_TAG	statsEnums.h	/^POWER_RESERVATION_STATION_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_RESERVATION_STATION_W	statsEnums.h	/^POWER_RESERVATION_STATION_W,$/;"	e	enum:StatisticsEnum
POWER_RESERVATION_STATION_W_TAG	statsEnums.h	/^POWER_RESERVATION_STATION_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_SEGMENT_REGISTER_R	statsEnums.h	/^POWER_SEGMENT_REGISTER_R,$/;"	e	enum:StatisticsEnum
POWER_SEGMENT_REGISTER_W	statsEnums.h	/^POWER_SEGMENT_REGISTER_W,$/;"	e	enum:StatisticsEnum
POWER_SHARED_MEM_R	statsEnums.h	/^POWER_SHARED_MEM_R,$/;"	e	enum:StatisticsEnum
POWER_SHARED_MEM_R_TAG	statsEnums.h	/^POWER_SHARED_MEM_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_SHARED_MEM_W	statsEnums.h	/^POWER_SHARED_MEM_W,$/;"	e	enum:StatisticsEnum
POWER_SHARED_MEM_W_TAG	statsEnums.h	/^POWER_SHARED_MEM_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_STORE_QUEUE_R	statsEnums.h	/^POWER_STORE_QUEUE_R,$/;"	e	enum:StatisticsEnum
POWER_STORE_QUEUE_R_TAG	statsEnums.h	/^POWER_STORE_QUEUE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_STORE_QUEUE_W	statsEnums.h	/^POWER_STORE_QUEUE_W,$/;"	e	enum:StatisticsEnum
POWER_STORE_QUEUE_W_TAG	statsEnums.h	/^POWER_STORE_QUEUE_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_TEXTURE_CACHE_R	statsEnums.h	/^POWER_TEXTURE_CACHE_R,$/;"	e	enum:StatisticsEnum
POWER_TEXTURE_CACHE_R_TAG	statsEnums.h	/^POWER_TEXTURE_CACHE_R_TAG,$/;"	e	enum:StatisticsEnum
POWER_TEXTURE_CACHE_W	statsEnums.h	/^POWER_TEXTURE_CACHE_W,$/;"	e	enum:StatisticsEnum
POWER_TEXTURE_CACHE_W_TAG	statsEnums.h	/^POWER_TEXTURE_CACHE_W_TAG,$/;"	e	enum:StatisticsEnum
POWER_UOP_QUEUE_R	statsEnums.h	/^POWER_UOP_QUEUE_R,$/;"	e	enum:StatisticsEnum
POWER_UOP_QUEUE_W	statsEnums.h	/^POWER_UOP_QUEUE_W,$/;"	e	enum:StatisticsEnum
PQUEUE_H_INCLUDED	pqueue.h	54;"	d
PREFETCH_LAST_SCHEDULE	statsEnums.h	/^PREFETCH_LAST_SCHEDULE,$/;"	e	enum:StatisticsEnum
PREFETCH_NTA	trace_read.h	/^  PREFETCH_NTA,$/;"	e	enum:TR_OPCODE_ENUM_
PREFETCH_T0	trace_read.h	/^  PREFETCH_T0,$/;"	e	enum:TR_OPCODE_ENUM_
PREFETCH_T1	trace_read.h	/^  PREFETCH_T1,$/;"	e	enum:TR_OPCODE_ENUM_
PREFETCH_T2	trace_read.h	/^  PREFETCH_T2,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_ACC1_HT_HP	statsEnums.h	/^PREF_ACC1_HT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC1_HT_LP	statsEnums.h	/^PREF_ACC1_HT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC1_LT_HP	statsEnums.h	/^PREF_ACC1_LT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC1_LT_LP	statsEnums.h	/^PREF_ACC1_LT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC2_HT_HP	statsEnums.h	/^PREF_ACC2_HT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC2_HT_LP	statsEnums.h	/^PREF_ACC2_HT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC2_LT_HP	statsEnums.h	/^PREF_ACC2_LT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC2_LT_LP	statsEnums.h	/^PREF_ACC2_LT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC3_HT_HP	statsEnums.h	/^PREF_ACC3_HT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC3_HT_LP	statsEnums.h	/^PREF_ACC3_HT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC3_LT_HP	statsEnums.h	/^PREF_ACC3_LT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC3_LT_LP	statsEnums.h	/^PREF_ACC3_LT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC4_HT_HP	statsEnums.h	/^PREF_ACC4_HT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC4_HT_LP	statsEnums.h	/^PREF_ACC4_HT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC4_LT_HP	statsEnums.h	/^PREF_ACC4_LT_HP,$/;"	e	enum:StatisticsEnum
PREF_ACC4_LT_LP	statsEnums.h	/^PREF_ACC4_LT_LP,$/;"	e	enum:StatisticsEnum
PREF_ACC_1	statsEnums.h	/^PREF_ACC_1,$/;"	e	enum:StatisticsEnum
PREF_ACC_10	statsEnums.h	/^PREF_ACC_10,$/;"	e	enum:StatisticsEnum
PREF_ACC_2	statsEnums.h	/^PREF_ACC_2,$/;"	e	enum:StatisticsEnum
PREF_ACC_3	statsEnums.h	/^PREF_ACC_3,$/;"	e	enum:StatisticsEnum
PREF_ACC_4	statsEnums.h	/^PREF_ACC_4,$/;"	e	enum:StatisticsEnum
PREF_ACC_5	statsEnums.h	/^PREF_ACC_5,$/;"	e	enum:StatisticsEnum
PREF_ACC_6	statsEnums.h	/^PREF_ACC_6,$/;"	e	enum:StatisticsEnum
PREF_ACC_7	statsEnums.h	/^PREF_ACC_7,$/;"	e	enum:StatisticsEnum
PREF_ACC_8	statsEnums.h	/^PREF_ACC_8,$/;"	e	enum:StatisticsEnum
PREF_ACC_9	statsEnums.h	/^PREF_ACC_9,$/;"	e	enum:StatisticsEnum
PREF_ACC_OUT	pref_common.h	/^    FILE * PREF_ACC_OUT; \/**< prefetch accuracy information output stream *\/$/;"	m	class:hwp_common_c
PREF_BASE_H	pref.h	39;"	d
PREF_COMMON_H	pref_common.h	40;"	d
PREF_DEGFB_FILE	pref_common.h	/^    FILE * PREF_DEGFB_FILE; \/**< prefetch degree (with feedback) output stream *\/$/;"	m	class:hwp_common_c
PREF_DISTANCE_1	statsEnums.h	/^PREF_DISTANCE_1,$/;"	e	enum:StatisticsEnum
PREF_DISTANCE_2	statsEnums.h	/^PREF_DISTANCE_2,$/;"	e	enum:StatisticsEnum
PREF_DISTANCE_3	statsEnums.h	/^PREF_DISTANCE_3,$/;"	e	enum:StatisticsEnum
PREF_DISTANCE_4	statsEnums.h	/^PREF_DISTANCE_4,$/;"	e	enum:StatisticsEnum
PREF_DISTANCE_5	statsEnums.h	/^PREF_DISTANCE_5,$/;"	e	enum:StatisticsEnum
PREF_DL0REQ_QUEUE_FULL	statsEnums.h	/^PREF_DL0REQ_QUEUE_FULL,$/;"	e	enum:StatisticsEnum
PREF_DL0REQ_QUEUE_HIT_BY_DEMAND	statsEnums.h	/^PREF_DL0REQ_QUEUE_HIT_BY_DEMAND,$/;"	e	enum:StatisticsEnum
PREF_DL0REQ_QUEUE_MATCHED_REQ	statsEnums.h	/^PREF_DL0REQ_QUEUE_MATCHED_REQ,$/;"	e	enum:StatisticsEnum
PREF_FACTORY_H	pref_factory.h	39;"	d
PREF_GM_L1	trace_read.h	/^  PREF_GM_L1,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_GM_L2	trace_read.h	/^  PREF_GM_L2,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_HIT_BY_DEMAND_DFETCH	statsEnums.h	/^PREF_HIT_BY_DEMAND_DFETCH,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_DEMAND_DPRF	statsEnums.h	/^PREF_HIT_BY_DEMAND_DPRF,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_DEMAND_DSTORE	statsEnums.h	/^PREF_HIT_BY_DEMAND_DSTORE,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_DEMAND_IFETCH	statsEnums.h	/^PREF_HIT_BY_DEMAND_IFETCH,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_DEMAND_IPREF	statsEnums.h	/^PREF_HIT_BY_DEMAND_IPREF,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_DEMAND_WB	statsEnums.h	/^PREF_HIT_BY_DEMAND_WB,$/;"	e	enum:StatisticsEnum
PREF_HIT_BY_PREF	statsEnums.h	/^PREF_HIT_BY_PREF,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_DFETCH	statsEnums.h	/^PREF_HIT_DEMAND_DFETCH,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_DPRF	statsEnums.h	/^PREF_HIT_DEMAND_DPRF,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_DSTORE	statsEnums.h	/^PREF_HIT_DEMAND_DSTORE,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_IFETCH	statsEnums.h	/^PREF_HIT_DEMAND_IFETCH,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_IPREF	statsEnums.h	/^PREF_HIT_DEMAND_IPREF,$/;"	e	enum:StatisticsEnum
PREF_HIT_DEMAND_WB	statsEnums.h	/^PREF_HIT_DEMAND_WB,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_0	statsEnums.h	/^PREF_HYBRID_SEL_0,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_1	statsEnums.h	/^PREF_HYBRID_SEL_1,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_2	statsEnums.h	/^PREF_HYBRID_SEL_2,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_3	statsEnums.h	/^PREF_HYBRID_SEL_3,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_4	statsEnums.h	/^PREF_HYBRID_SEL_4,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_5	statsEnums.h	/^PREF_HYBRID_SEL_5,$/;"	e	enum:StatisticsEnum
PREF_HYBRID_SEL_6	statsEnums.h	/^PREF_HYBRID_SEL_6,$/;"	e	enum:StatisticsEnum
PREF_L2_FILL	statsEnums.h	/^PREF_L2_FILL,$/;"	e	enum:StatisticsEnum
PREF_LM_L1	trace_read.h	/^  PREF_LM_L1,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_LM_L2	trace_read.h	/^  PREF_LM_L2,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_PFPOL	statsEnums.h	/^PREF_PFPOL,$/;"	e	enum:StatisticsEnum
PREF_PHASE_OVERWRITE_PAGE	statsEnums.h	/^PREF_PHASE_OVERWRITE_PAGE,$/;"	e	enum:StatisticsEnum
PREF_POL_1	statsEnums.h	/^PREF_POL_1,$/;"	e	enum:StatisticsEnum
PREF_POL_10	statsEnums.h	/^PREF_POL_10,$/;"	e	enum:StatisticsEnum
PREF_POL_2	statsEnums.h	/^PREF_POL_2,$/;"	e	enum:StatisticsEnum
PREF_POL_3	statsEnums.h	/^PREF_POL_3,$/;"	e	enum:StatisticsEnum
PREF_POL_4	statsEnums.h	/^PREF_POL_4,$/;"	e	enum:StatisticsEnum
PREF_POL_5	statsEnums.h	/^PREF_POL_5,$/;"	e	enum:StatisticsEnum
PREF_POL_6	statsEnums.h	/^PREF_POL_6,$/;"	e	enum:StatisticsEnum
PREF_POL_7	statsEnums.h	/^PREF_POL_7,$/;"	e	enum:StatisticsEnum
PREF_POL_8	statsEnums.h	/^PREF_POL_8,$/;"	e	enum:StatisticsEnum
PREF_POL_9	statsEnums.h	/^PREF_POL_9,$/;"	e	enum:StatisticsEnum
PREF_REGION_EVICT	statsEnums.h	/^PREF_REGION_EVICT,$/;"	e	enum:StatisticsEnum
PREF_REGION_SENT	statsEnums.h	/^PREF_REGION_SENT,$/;"	e	enum:StatisticsEnum
PREF_REGION_USEFUL	statsEnums.h	/^PREF_REGION_USEFUL,$/;"	e	enum:StatisticsEnum
PREF_REQ_QUE_FULL	statsEnums.h	/^PREF_REQ_QUE_FULL,$/;"	e	enum:StatisticsEnum
PREF_SEND_TO_MEM_REQ	statsEnums.h	/^PREF_SEND_TO_MEM_REQ,$/;"	e	enum:StatisticsEnum
PREF_SEND_TO_MEM_REQ_FAIL	statsEnums.h	/^PREF_SEND_TO_MEM_REQ_FAIL,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_1	statsEnums.h	/^PREF_TIMELY_1,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_10	statsEnums.h	/^PREF_TIMELY_10,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_2	statsEnums.h	/^PREF_TIMELY_2,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_3	statsEnums.h	/^PREF_TIMELY_3,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_4	statsEnums.h	/^PREF_TIMELY_4,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_5	statsEnums.h	/^PREF_TIMELY_5,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_6	statsEnums.h	/^PREF_TIMELY_6,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_7	statsEnums.h	/^PREF_TIMELY_7,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_8	statsEnums.h	/^PREF_TIMELY_8,$/;"	e	enum:StatisticsEnum
PREF_TIMELY_9	statsEnums.h	/^PREF_TIMELY_9,$/;"	e	enum:StatisticsEnum
PREF_TRACE_OUT	pref_common.h	/^    FILE * PREF_TRACE_OUT; \/**< prefetch trace output stream *\/$/;"	m	class:hwp_common_c
PREF_TRACKERS_NUM	pref_common.h	56;"	d
PREF_UL2REQ_QUEUE_FULL	statsEnums.h	/^PREF_UL2REQ_QUEUE_FULL,$/;"	e	enum:StatisticsEnum
PREF_UL2REQ_QUEUE_HIT_BY_DEMAND	statsEnums.h	/^PREF_UL2REQ_QUEUE_HIT_BY_DEMAND,$/;"	e	enum:StatisticsEnum
PREF_UL2REQ_QUEUE_MATCHED_REQ	statsEnums.h	/^PREF_UL2REQ_QUEUE_MATCHED_REQ,$/;"	e	enum:StatisticsEnum
PREF_UL2REQ_QUEUE_SENTREQ	statsEnums.h	/^PREF_UL2REQ_QUEUE_SENTREQ,$/;"	e	enum:StatisticsEnum
PREF_UL2REQ_SEND_QUEUE_STALL	statsEnums.h	/^PREF_UL2REQ_SEND_QUEUE_STALL,$/;"	e	enum:StatisticsEnum
PREF_UNIFORM	trace_read.h	/^  PREF_UNIFORM,$/;"	e	enum:TR_OPCODE_ENUM_
PREF_UNUSED_EVICT	statsEnums.h	/^PREF_UNUSED_EVICT,$/;"	e	enum:StatisticsEnum
PREF_UPDATE_COUNT	statsEnums.h	/^PREF_UPDATE_COUNT,$/;"	e	enum:StatisticsEnum
PREV_UOP_DEP	uop.h	/^  PREV_UOP_DEP,$/;"	e	enum:Dep_Type_enum
PROCESS_MANAGER_H	process_manager.h	41;"	d
PROC_REQ	memory.cc	68;"	d	file:
PROGRESS_ERROR	statsEnums.h	/^PROGRESS_ERROR,$/;"	e	enum:StatisticsEnum
PTX_BLOCK_BAR	uop.h	/^  PTX_BLOCK_BAR = 0x3,          \/\/!< synchronizations with a block $/;"	e	enum:Bar_Type_enum
ProcessorStatistics	statistics.cc	/^ProcessorStatistics::ProcessorStatistics(macsim_c* simBase)$/;"	f	class:ProcessorStatistics
ProcessorStatistics	statistics.h	/^class ProcessorStatistics$/;"	c
QUOTE	knob.h	57;"	d
Quad	global_types.h	/^typedef int64              Quad;$/;"	t
RATIO_Stat	statistics.h	/^    RATIO_Stat(const string& str, const string& outputfilename, long ID,$/;"	f	class:RATIO_Stat
RATIO_Stat	statistics.h	/^class RATIO_Stat : public AbstractStat$/;"	c
RC	router.cc	62;"	d	file:
READONLY_CACHE_H	readonly_cache.h	41;"	d
REG_DATA_DEP	uop.h	/^  REG_DATA_DEP,$/;"	e	enum:Dep_Type_enum
REMOVE_REDUNDANT_STREAM_STAT	statsEnums.h	/^REMOVE_REDUNDANT_STREAM_STAT,$/;"	e	enum:StatisticsEnum
REPLACE_OLD_STREAM	statsEnums.h	/^REPLACE_OLD_STREAM,$/;"	e	enum:StatisticsEnum
REPORT	debug_macros.h	62;"	d
REPORT	debug_macros.h	71;"	d
REP_MOV_MEM_SIZE_MAX	trace_read.h	52;"	d
REP_MOV_MEM_SIZE_MAX_NEW	trace_read.h	53;"	d
REQ_SEND_QUEUE_STALL	statsEnums.h	/^REQ_SEND_QUEUE_STALL,$/;"	e	enum:StatisticsEnum
RETIRE_CONFIG	config.h	168;"	d
RETIRE_H_INCLUDED	retire.h	40;"	d
RETIRE_INTERFACE_ARGS	retire.h	75;"	d
RETIRE_INTERFACE_CAST	retire.h	99;"	d
RETIRE_INTERFACE_DECL	retire.h	63;"	d
RETIRE_INTERFACE_INIT	retire.cc	/^retire_c::retire_c(RETIRE_INTERFACE_PARAMS(), macsim_c* simBase) : RETIRE_INTERFACE_INIT() $/;"	f
RETIRE_INTERFACE_INIT	retire.h	87;"	d
RETIRE_INTERFACE_PARAMS	retire.h	51;"	d
RIGHT	router.cc	52;"	d	file:
ROB_CONFIG	config.h	146;"	d
ROB_H_INCLUDED	rob.h	39;"	d
ROUND_ROBIN	router.cc	69;"	d	file:
ROUTER_H	router.h	40;"	d
Reg_Type	inst_info.h	/^} Reg_Type;$/;"	t	typeref:enum:Reg_Type_enum
Reg_Type_enum	inst_info.h	/^typedef enum Reg_Type_enum {$/;"	g
SA	router.cc	64;"	d	file:
SAT_DEC	bp_gshare.cc	56;"	d	file:
SAT_INC	bp_gshare.cc	55;"	d	file:
SCHEDULE_H_INCLUDED	schedule.h	39;"	d
SCHEDULE_INTERFACE_ARGS	schedule.h	74;"	d
SCHEDULE_INTERFACE_CAST	schedule.h	100;"	d
SCHEDULE_INTERFACE_DECL	schedule.h	61;"	d
SCHEDULE_INTERFACE_INIT	schedule.h	87;"	d
SCHEDULE_INTERFACE_PARAMS	schedule.h	48;"	d
SCHEDULE_IO_H_INCLUDED	schedule_io.h	39;"	d
SCHEDULE_ORIG_GPU_H_INCLUDED	schedule_smc.h	39;"	d
SCHEDULE_ORIG_H_INCLUDED	schedule_ooo.h	39;"	d
SCHED_CONFIG	config.h	225;"	d
SCHED_FAILED_NO_PORTS	statsEnums.h	/^SCHED_FAILED_NO_PORTS,$/;"	e	enum:StatisticsEnum
SCHED_FAILED_OPERANDS_NOT_READY	statsEnums.h	/^SCHED_FAILED_OPERANDS_NOT_READY,$/;"	e	enum:StatisticsEnum
SCHED_FAILED_REASON_SUCCESS	statsEnums.h	/^SCHED_FAILED_REASON_SUCCESS,$/;"	e	enum:StatisticsEnum
SCHED_FAIL_NO_AVAILABLE_PORTS	schedule.h	/^  SCHED_FAIL_NO_AVAILABLE_PORTS,$/;"	e	enum:SCHED_FAIL_TYPE
SCHED_FAIL_NO_MEM_REQ_SLOTS	schedule.h	/^  SCHED_FAIL_NO_MEM_REQ_SLOTS$/;"	e	enum:SCHED_FAIL_TYPE
SCHED_FAIL_OPERANDS_NOT_READY	schedule.h	/^  SCHED_FAIL_OPERANDS_NOT_READY,$/;"	e	enum:SCHED_FAIL_TYPE
SCHED_FAIL_TYPE	schedule.h	/^enum SCHED_FAIL_TYPE$/;"	g
SCHED_SUCCESS	schedule.h	/^  SCHED_SUCCESS,$/;"	e	enum:SCHED_FAIL_TYPE
SECTION_BAR	process_manager.h	/^  SECTION_BAR                   \/**< barrier *\/$/;"	e	enum:Section_Type_enum
SECTION_COMP	process_manager.h	/^  SECTION_COMP,                 \/**< computation *\/$/;"	e	enum:Section_Type_enum
SECTION_INVALID	process_manager.h	/^  SECTION_INVALID = 0,$/;"	e	enum:Section_Type_enum
SECTION_MEM	process_manager.h	/^  SECTION_MEM,                  \/**< memory *\/$/;"	e	enum:Section_Type_enum
SHARED_MEM_ACCESS	statsEnums.h	/^SHARED_MEM_ACCESS,$/;"	e	enum:StatisticsEnum
SHARED_MEM_INST	statsEnums.h	/^SHARED_MEM_INST,$/;"	e	enum:StatisticsEnum
SM_COAL_INST	statsEnums.h	/^SM_COAL_INST,$/;"	e	enum:StatisticsEnum
SM_COAL_INST_MUL_TRANS	statsEnums.h	/^SM_COAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
SM_COAL_INST_SINGLE_TRANS	statsEnums.h	/^SM_COAL_INST_SINGLE_TRANS,$/;"	e	enum:StatisticsEnum
SM_UNCOAL_INST	statsEnums.h	/^SM_UNCOAL_INST,$/;"	e	enum:StatisticsEnum
SPEC_REG	inst_info.h	/^  SPEC_REG, \/**< Special register *\/$/;"	e	enum:Reg_Type_enum
ST	router.cc	65;"	d	file:
STATS_H_INCLUDED	statistics.h	59;"	d
STAT_CORE_EVENT	statistics.h	1122;"	d
STAT_CORE_EVENT_M	statistics.h	1126;"	d
STAT_CORE_EVENT_N	statistics.h	1130;"	d
STAT_EVENT	statistics.h	1135;"	d
STAT_EVENT_M	statistics.h	1140;"	d
STAT_EVENT_N	statistics.h	1145;"	d
STREAM_BUFFER_REQ	statsEnums.h	/^STREAM_BUFFER_REQ,$/;"	e	enum:StatisticsEnum
STREAM_ENTER_RA	statsEnums.h	/^STREAM_ENTER_RA,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_0	statsEnums.h	/^STREAM_LENGTH_0,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_10	statsEnums.h	/^STREAM_LENGTH_10,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_100_P	statsEnums.h	/^STREAM_LENGTH_100_P,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_20	statsEnums.h	/^STREAM_LENGTH_20,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_30	statsEnums.h	/^STREAM_LENGTH_30,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_40	statsEnums.h	/^STREAM_LENGTH_40,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_50	statsEnums.h	/^STREAM_LENGTH_50,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_60	statsEnums.h	/^STREAM_LENGTH_60,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_70	statsEnums.h	/^STREAM_LENGTH_70,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_80	statsEnums.h	/^STREAM_LENGTH_80,$/;"	e	enum:StatisticsEnum
STREAM_LENGTH_90	statsEnums.h	/^STREAM_LENGTH_90,$/;"	e	enum:StatisticsEnum
STREAM_REQ_QUEUE_HIT_BY_DEMAND	statsEnums.h	/^STREAM_REQ_QUEUE_HIT_BY_DEMAND,$/;"	e	enum:StatisticsEnum
STREAM_TRAIN_CREATE	statsEnums.h	/^STREAM_TRAIN_CREATE,$/;"	e	enum:StatisticsEnum
STRIDE_REGION	pref_stride.h	45;"	d
ST_GM_CG	trace_read.h	/^  ST_GM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
ST_GM_CS	trace_read.h	/^  ST_GM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
ST_GM_WB	trace_read.h	/^  ST_GM_WB,$/;"	e	enum:TR_OPCODE_ENUM_
ST_GM_WT	trace_read.h	/^  ST_GM_WT,$/;"	e	enum:TR_OPCODE_ENUM_
ST_LM_CG	trace_read.h	/^  ST_LM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
ST_LM_CS	trace_read.h	/^  ST_LM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
ST_LM_WB	trace_read.h	/^  ST_LM_WB,$/;"	e	enum:TR_OPCODE_ENUM_
ST_LM_WT	trace_read.h	/^  ST_LM_WT,$/;"	e	enum:TR_OPCODE_ENUM_
ST_SM_CG	trace_read.h	/^  ST_SM_CG,$/;"	e	enum:TR_OPCODE_ENUM_
ST_SM_CS	trace_read.h	/^  ST_SM_CS,$/;"	e	enum:TR_OPCODE_ENUM_
ST_SM_WB	trace_read.h	/^  ST_SM_WB,$/;"	e	enum:TR_OPCODE_ENUM_
ST_SM_WT	trace_read.h	/^  ST_SM_WT,$/;"	e	enum:TR_OPCODE_ENUM_
SW_MANAGED_CACHE_H	sw_managed_cache.h	40;"	d
S_STATE	memory.h	/^  S_STATE,$/;"	e	enum:COHERENCE_STATE
Section_Type_enum	process_manager.h	/^enum Section_Type_enum$/;"	g
StatisticsEnum	statsEnums.h	/^enum StatisticsEnum$/;"	g
StatisticsEnumEnd	statsEnums.h	/^	StatisticsEnumEnd$/;"	e	enum:StatisticsEnum
StatsEnums_Included	statsEnums.h	2;"	d
TAIL	router.cc	58;"	d	file:
TEXTURE_CACHE_ACCESS	statsEnums.h	/^TEXTURE_CACHE_ACCESS,$/;"	e	enum:StatisticsEnum
TEXTURE_CACHE_HIT	statsEnums.h	/^TEXTURE_CACHE_HIT,$/;"	e	enum:StatisticsEnum
TEXTURE_CACHE_MISS	statsEnums.h	/^TEXTURE_CACHE_MISS,$/;"	e	enum:StatisticsEnum
TEXTURE_CACHE_NO_EXECUTE	statsEnums.h	/^TEXTURE_CACHE_NO_EXECUTE,$/;"	e	enum:StatisticsEnum
THREAD_ID_MASK	process_manager.cc	93;"	d	file:
TM_COAL_INST	statsEnums.h	/^TM_COAL_INST,$/;"	e	enum:StatisticsEnum
TM_COAL_INST_MUL_TRANS	statsEnums.h	/^TM_COAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
TM_COAL_INST_SINGLE_TRANS	statsEnums.h	/^TM_COAL_INST_SINGLE_TRANS,$/;"	e	enum:StatisticsEnum
TM_UNCOAL_INST	statsEnums.h	/^TM_UNCOAL_INST,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_APPL0	statsEnums.h	/^TOTAL_CAGE_APPL0,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_APPL1	statsEnums.h	/^TOTAL_CAGE_APPL1,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_APPL2	statsEnums.h	/^TOTAL_CAGE_APPL2,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_APPL3	statsEnums.h	/^TOTAL_CAGE_APPL3,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_APPL4	statsEnums.h	/^TOTAL_CAGE_APPL4,$/;"	e	enum:StatisticsEnum
TOTAL_CAGE_PERIOD	statsEnums.h	/^TOTAL_CAGE_PERIOD,$/;"	e	enum:StatisticsEnum
TOTAL_DRAM	statsEnums.h	/^TOTAL_DRAM,$/;"	e	enum:StatisticsEnum
TOTAL_DRAM_MERGE	statsEnums.h	/^TOTAL_DRAM_MERGE,$/;"	e	enum:StatisticsEnum
TOTAL_MEMORY	statsEnums.h	/^TOTAL_MEMORY,$/;"	e	enum:StatisticsEnum
TOTAL_MEMORY_MERGE	statsEnums.h	/^TOTAL_MEMORY_MERGE,$/;"	e	enum:StatisticsEnum
TOTAL_PACKET_CPU	statsEnums.h	/^TOTAL_PACKET_CPU,$/;"	e	enum:StatisticsEnum
TOTAL_PACKET_GPU	statsEnums.h	/^TOTAL_PACKET_GPU,$/;"	e	enum:StatisticsEnum
TOTAL_WB	statsEnums.h	/^TOTAL_WB,$/;"	e	enum:StatisticsEnum
TOTAL_WRITES	statsEnums.h	/^TOTAL_WRITES,$/;"	e	enum:StatisticsEnum
TOTAL_WRITE_ACKS	statsEnums.h	/^TOTAL_WRITE_ACKS,$/;"	e	enum:StatisticsEnum
TRACE_H_INCLUDED	trace_read.h	40;"	d
TRACE_READ_COUNT	statsEnums.h	/^TRACE_READ_COUNT,$/;"	e	enum:StatisticsEnum
TRACE_SIZE	trace_read.h	56;"	d
TR_DATA_XFER_GM	trace_read.h	/^  TR_DATA_XFER_GM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_DATA_XFER_LM	trace_read.h	/^  TR_DATA_XFER_LM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_DATA_XFER_SM	trace_read.h	/^  TR_DATA_XFER_SM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_DIV	trace_read.h	/^  TR_DIV,$/;"	e	enum:TR_OPCODE_ENUM_
TR_FDIV	trace_read.h	/^  TR_FDIV,$/;"	e	enum:TR_OPCODE_ENUM_
TR_FMUL	trace_read.h	/^  TR_FMUL,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_CM	trace_read.h	/^  TR_MEM_LD_CM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_GM	trace_read.h	/^  TR_MEM_LD_GM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_LM	trace_read.h	/^  TR_MEM_LD_LM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_PM	trace_read.h	/^  TR_MEM_LD_PM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_SM	trace_read.h	/^  TR_MEM_LD_SM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_LD_TM	trace_read.h	/^  TR_MEM_LD_TM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_ST_GM	trace_read.h	/^  TR_MEM_ST_GM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_ST_LM	trace_read.h	/^  TR_MEM_ST_LM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MEM_ST_SM	trace_read.h	/^  TR_MEM_ST_SM,$/;"	e	enum:TR_OPCODE_ENUM_
TR_MUL	trace_read.h	/^  TR_MUL,$/;"	e	enum:TR_OPCODE_ENUM_
TR_NOP	trace_read.h	/^  TR_NOP,$/;"	e	enum:TR_OPCODE_ENUM_
TR_OPCODE_ENUM	trace_read.h	/^} TR_OPCODE_ENUM;$/;"	t	typeref:enum:TR_OPCODE_ENUM_
TR_OPCODE_ENUM_	trace_read.h	/^typedef enum TR_OPCODE_ENUM_ {$/;"	g
TR_OPCODE_LAST	trace_read.h	/^  TR_OPCODE_LAST,$/;"	e	enum:TR_OPCODE_ENUM_
TR_REG_TMP0	trace_read.h	/^  TR_REG_TMP0 = 167$/;"	e	enum:TR_TEMP_TEMP_ENUM_
TR_TEMP_TEMP_ENUM	trace_read.h	/^} TR_TEMP_TEMP_ENUM;$/;"	t	typeref:enum:TR_TEMP_TEMP_ENUM_
TR_TEMP_TEMP_ENUM_	trace_read.h	/^typedef enum TR_TEMP_TEMP_ENUM_ {$/;"	g
ToString	utils.h	64;"	d
TraceBuffer	global_defs.h	/^typedef struct TraceBuffer_ TraceBuffer;$/;"	t	typeref:struct:TraceBuffer_
UL1_To_DL0	pref_common.h	/^  UL1_To_DL0,$/;"	e	enum:HWP_Type_Enum
ULINK	memory.cc	78;"	d	file:
UNCOAL_INST	statsEnums.h	/^UNCOAL_INST,$/;"	e	enum:StatisticsEnum
UNCOAL_INST_MUL_TRANS	statsEnums.h	/^UNCOAL_INST_MUL_TRANS,$/;"	e	enum:StatisticsEnum
UNIT_LARGE	global_types.h	/^  UNIT_LARGE \/**< large core *\/$/;"	e	enum:_Unit_Type_enum
UNIT_MEDIUM	global_types.h	/^  UNIT_MEDIUM, \/**< medium core *\/$/;"	e	enum:_Unit_Type_enum
UNIT_SMALL	global_types.h	/^  UNIT_SMALL = 0, \/**< small core *\/$/;"	e	enum:_Unit_Type_enum
UOP_BYTE	uop.h	/^  UOP_BYTE,                     \/\/!< byte manipulation$/;"	e	enum:Uop_Type_enum
UOP_CF	uop.h	/^  UOP_CF,                       \/\/!< change of flow$/;"	e	enum:Uop_Type_enum
UOP_CMOV	uop.h	/^  UOP_CMOV,                     \/\/!< conditional move$/;"	e	enum:Uop_Type_enum
UOP_COUNT	statsEnums.h	/^UOP_COUNT,$/;"	e	enum:StatisticsEnum
UOP_COUNT_TOT	statsEnums.h	/^UOP_COUNT_TOT,$/;"	e	enum:StatisticsEnum
UOP_FADD	uop.h	/^  UOP_FADD,                     \/\/!< floating point add$/;"	e	enum:Uop_Type_enum
UOP_FBIT	uop.h	/^  UOP_FBIT,                     \/\/!< floating point bit$/;"	e	enum:Uop_Type_enum
UOP_FCF	uop.h	/^  UOP_FCF,$/;"	e	enum:Uop_Type_enum
UOP_FCMOV	uop.h	/^  UOP_FCMOV,                    \/\/!< floating point cond move$/;"	e	enum:Uop_Type_enum
UOP_FCMP	uop.h	/^  UOP_FCMP,                     \/\/!< floating point compare$/;"	e	enum:Uop_Type_enum
UOP_FCVT	uop.h	/^  UOP_FCVT,                     \/\/!< floating point convert$/;"	e	enum:Uop_Type_enum
UOP_FDIV	uop.h	/^  UOP_FDIV,                     \/\/!< floating point divide$/;"	e	enum:Uop_Type_enum
UOP_FMEM	uop.h	/^  UOP_FMEM,                     \/\/!< fp memory instruction$/;"	e	enum:Uop_Type_enum
UOP_FMUL	uop.h	/^  UOP_FMUL,                     \/\/!< floating point multiply$/;"	e	enum:Uop_Type_enum
UOP_GPU_ABS	uop.h	/^  UOP_GPU_ABS,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ABS64	uop.h	/^  UOP_GPU_ABS64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ADD	uop.h	/^  UOP_GPU_ADD, $/;"	e	enum:Uop_Type_enum
UOP_GPU_ADD64	uop.h	/^  UOP_GPU_ADD64, $/;"	e	enum:Uop_Type_enum
UOP_GPU_ADDC	uop.h	/^	UOP_GPU_ADDC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_AND	uop.h	/^	UOP_GPU_AND,$/;"	e	enum:Uop_Type_enum
UOP_GPU_AND64	uop.h	/^	UOP_GPU_AND64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ATOM	uop.h	/^	UOP_GPU_ATOM,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ATOM64	uop.h	/^	UOP_GPU_ATOM64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BAR	uop.h	/^	UOP_GPU_BAR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFE	uop.h	/^	UOP_GPU_BFE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFE64	uop.h	/^	UOP_GPU_BFE64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFI	uop.h	/^	UOP_GPU_BFI,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFI64	uop.h	/^	UOP_GPU_BFI64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFIND	uop.h	/^	UOP_GPU_BFIND,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BFIND64	uop.h	/^	UOP_GPU_BFIND64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BRA	uop.h	/^	UOP_GPU_BRA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BREV	uop.h	/^	UOP_GPU_BREV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BREV64	uop.h	/^	UOP_GPU_BREV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_BRKPT	uop.h	/^	UOP_GPU_BRKPT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CALL	uop.h	/^	UOP_GPU_CALL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CLZ	uop.h	/^	UOP_GPU_CLZ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CLZ64	uop.h	/^	UOP_GPU_CLZ64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CNOT	uop.h	/^	UOP_GPU_CNOT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CNOT64	uop.h	/^	UOP_GPU_CNOT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_COPYSIGN	uop.h	/^	UOP_GPU_COPYSIGN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_COPYSIGN64	uop.h	/^	UOP_GPU_COPYSIGN64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_COS	uop.h	/^	UOP_GPU_COS,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CVT	uop.h	/^	UOP_GPU_CVT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CVT64	uop.h	/^	UOP_GPU_CVT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CVTA	uop.h	/^	UOP_GPU_CVTA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_CVTA64	uop.h	/^	UOP_GPU_CVTA64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_DIV	uop.h	/^	UOP_GPU_DIV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_DIV64	uop.h	/^	UOP_GPU_DIV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_EX2	uop.h	/^	UOP_GPU_EX2,$/;"	e	enum:Uop_Type_enum
UOP_GPU_EXIT	uop.h	/^	UOP_GPU_EXIT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FABS	uop.h	/^  UOP_GPU_FABS,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FABS64	uop.h	/^  UOP_GPU_FABS64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FADD	uop.h	/^  UOP_GPU_FADD, $/;"	e	enum:Uop_Type_enum
UOP_GPU_FADD64	uop.h	/^  UOP_GPU_FADD64, $/;"	e	enum:Uop_Type_enum
UOP_GPU_FADDC	uop.h	/^	UOP_GPU_FADDC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FAND	uop.h	/^	UOP_GPU_FAND,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FAND64	uop.h	/^	UOP_GPU_FAND64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FATOM	uop.h	/^	UOP_GPU_FATOM,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FATOM64	uop.h	/^	UOP_GPU_FATOM64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBAR	uop.h	/^	UOP_GPU_FBAR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFE	uop.h	/^	UOP_GPU_FBFE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFE64	uop.h	/^	UOP_GPU_FBFE64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFI	uop.h	/^	UOP_GPU_FBFI,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFI64	uop.h	/^	UOP_GPU_FBFI64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFIND	uop.h	/^	UOP_GPU_FBFIND,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBFIND64	uop.h	/^	UOP_GPU_FBFIND64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBRA	uop.h	/^	UOP_GPU_FBRA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBREV	uop.h	/^	UOP_GPU_FBREV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBREV64	uop.h	/^	UOP_GPU_FBREV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FBRKPT	uop.h	/^	UOP_GPU_FBRKPT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCALL	uop.h	/^	UOP_GPU_FCALL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCLZ	uop.h	/^	UOP_GPU_FCLZ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCLZ64	uop.h	/^	UOP_GPU_FCLZ64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCNOT	uop.h	/^	UOP_GPU_FCNOT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCNOT64	uop.h	/^	UOP_GPU_FCNOT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCOPYSIGN	uop.h	/^	UOP_GPU_FCOPYSIGN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCOPYSIGN64	uop.h	/^	UOP_GPU_FCOPYSIGN64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCOS	uop.h	/^	UOP_GPU_FCOS,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCVT	uop.h	/^	UOP_GPU_FCVT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCVT64	uop.h	/^	UOP_GPU_FCVT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCVTA	uop.h	/^	UOP_GPU_FCVTA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FCVTA64	uop.h	/^	UOP_GPU_FCVTA64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FDIV	uop.h	/^	UOP_GPU_FDIV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FDIV64	uop.h	/^	UOP_GPU_FDIV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FEX2	uop.h	/^	UOP_GPU_FEX2,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FEXIT	uop.h	/^	UOP_GPU_FEXIT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FFMA	uop.h	/^	UOP_GPU_FFMA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FFMA64	uop.h	/^	UOP_GPU_FFMA64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FISSPACEP	uop.h	/^	UOP_GPU_FISSPACEP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FLD	uop.h	/^	UOP_GPU_FLD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FLD64	uop.h	/^	UOP_GPU_FLD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FLDU	uop.h	/^	UOP_GPU_FLDU,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FLDU64	uop.h	/^	UOP_GPU_FLDU64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FLG2	uop.h	/^	UOP_GPU_FLG2,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMA	uop.h	/^	UOP_GPU_FMA,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMA64	uop.h	/^	UOP_GPU_FMA64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMAD	uop.h	/^	UOP_GPU_FMAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMAD24	uop.h	/^	UOP_GPU_FMAD24,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMAD64	uop.h	/^	UOP_GPU_FMAD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMAX	uop.h	/^	UOP_GPU_FMAX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMAX64	uop.h	/^	UOP_GPU_FMAX64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMEMBAR	uop.h	/^	UOP_GPU_FMEMBAR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMIN	uop.h	/^	UOP_GPU_FMIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMIN64	uop.h	/^	UOP_GPU_FMIN64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMOV	uop.h	/^	UOP_GPU_FMOV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMOV64	uop.h	/^	UOP_GPU_FMOV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMUL	uop.h	/^	UOP_GPU_FMUL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMUL24	uop.h	/^	UOP_GPU_FMUL24,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FMUL64	uop.h	/^	UOP_GPU_FMUL64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FNEG	uop.h	/^	UOP_GPU_FNEG,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FNEG64	uop.h	/^	UOP_GPU_FNEG64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FNOT	uop.h	/^	UOP_GPU_FNOT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FNOT64	uop.h	/^	UOP_GPU_FNOT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FOR	uop.h	/^	UOP_GPU_FOR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FOR64	uop.h	/^	UOP_GPU_FOR64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPHI	uop.h	/^  UOP_GPU_FPHI,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPMEVENT	uop.h	/^	UOP_GPU_FPMEVENT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPOPC	uop.h	/^	UOP_GPU_FPOPC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPOPC64	uop.h	/^	UOP_GPU_FPOPC64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPREFETCH	uop.h	/^	UOP_GPU_FPREFETCH,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPREFETCHU	uop.h	/^	UOP_GPU_FPREFETCHU,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FPRMT	uop.h	/^	UOP_GPU_FPRMT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRCP	uop.h	/^	UOP_GPU_FRCP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRCP64	uop.h	/^	UOP_GPU_FRCP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRECONVERGE	uop.h	/^  UOP_GPU_FRECONVERGE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRED	uop.h	/^	UOP_GPU_FRED,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRED64	uop.h	/^	UOP_GPU_FRED64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FREM	uop.h	/^	UOP_GPU_FREM,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FREM64	uop.h	/^	UOP_GPU_FREM64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRET	uop.h	/^	UOP_GPU_FRET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRSQRT	uop.h	/^	UOP_GPU_FRSQRT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FRSQRT64	uop.h	/^	UOP_GPU_FRSQRT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSAD	uop.h	/^	UOP_GPU_FSAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSAD64	uop.h	/^	UOP_GPU_FSAD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSELP	uop.h	/^	UOP_GPU_FSELP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSELP64	uop.h	/^	UOP_GPU_FSELP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSET	uop.h	/^	UOP_GPU_FSET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSET64	uop.h	/^	UOP_GPU_FSET64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSETP	uop.h	/^	UOP_GPU_FSETP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSETP64	uop.h	/^	UOP_GPU_FSETP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSHL	uop.h	/^	UOP_GPU_FSHL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSHL64	uop.h	/^	UOP_GPU_FSHL64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSHR	uop.h	/^	UOP_GPU_FSHR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSHR64	uop.h	/^	UOP_GPU_FSHR64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSIN	uop.h	/^	UOP_GPU_FSIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSLCT	uop.h	/^	UOP_GPU_FSLCT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSLCT64	uop.h	/^	UOP_GPU_FSLCT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSQRT	uop.h	/^	UOP_GPU_FSQRT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSQRT64	uop.h	/^	UOP_GPU_FSQRT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FST	uop.h	/^	UOP_GPU_FST,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FST64	uop.h	/^	UOP_GPU_FST64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUB	uop.h	/^	UOP_GPU_FSUB,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUB64	uop.h	/^	UOP_GPU_FSUB64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUBC	uop.h	/^	UOP_GPU_FSUBC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSULD	uop.h	/^	UOP_GPU_FSULD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSULD64	uop.h	/^	UOP_GPU_FSULD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUQ	uop.h	/^	UOP_GPU_FSUQ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSURED	uop.h	/^	UOP_GPU_FSURED,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSURED64	uop.h	/^	UOP_GPU_FSURED64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUST	uop.h	/^	UOP_GPU_FSUST,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FSUST64	uop.h	/^	UOP_GPU_FSUST64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTESTP	uop.h	/^  UOP_GPU_FTESTP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTESTP64	uop.h	/^  UOP_GPU_FTESTP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTEX	uop.h	/^  UOP_GPU_FTEX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTLD4	uop.h	/^  UOP_GPU_FTLD4,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTRAP	uop.h	/^  UOP_GPU_FTRAP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FTXQ	uop.h	/^  UOP_GPU_FTXQ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVABSDIFF	uop.h	/^  UOP_GPU_FVABSDIFF,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVADD	uop.h	/^  UOP_GPU_FVADD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVMAD	uop.h	/^  UOP_GPU_FVMAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVMAX	uop.h	/^  UOP_GPU_FVMAX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVMIN	uop.h	/^  UOP_GPU_FVMIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVOTE	uop.h	/^  UOP_GPU_FVOTE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVSET	uop.h	/^  UOP_GPU_FVSET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVSHL	uop.h	/^  UOP_GPU_FVSHL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVSHR	uop.h	/^  UOP_GPU_FVSHR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FVSUB	uop.h	/^  UOP_GPU_FVSUB,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FXOR	uop.h	/^  UOP_GPU_FXOR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_FXOR64	uop.h	/^  UOP_GPU_FXOR64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ISSPACEP	uop.h	/^	UOP_GPU_ISSPACEP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_LD	uop.h	/^	UOP_GPU_LD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_LD64	uop.h	/^	UOP_GPU_LD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_LDU	uop.h	/^	UOP_GPU_LDU,$/;"	e	enum:Uop_Type_enum
UOP_GPU_LDU64	uop.h	/^	UOP_GPU_LDU64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_LG2	uop.h	/^	UOP_GPU_LG2,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MAD	uop.h	/^	UOP_GPU_MAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MAD24	uop.h	/^	UOP_GPU_MAD24,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MAD64	uop.h	/^	UOP_GPU_MAD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MAX	uop.h	/^	UOP_GPU_MAX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MAX64	uop.h	/^	UOP_GPU_MAX64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MEMBAR	uop.h	/^	UOP_GPU_MEMBAR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MIN	uop.h	/^	UOP_GPU_MIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MIN64	uop.h	/^	UOP_GPU_MIN64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MOV	uop.h	/^	UOP_GPU_MOV,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MOV64	uop.h	/^	UOP_GPU_MOV64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MUL	uop.h	/^	UOP_GPU_MUL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MUL24	uop.h	/^	UOP_GPU_MUL24,$/;"	e	enum:Uop_Type_enum
UOP_GPU_MUL64	uop.h	/^	UOP_GPU_MUL64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_NEG	uop.h	/^	UOP_GPU_NEG,$/;"	e	enum:Uop_Type_enum
UOP_GPU_NEG64	uop.h	/^	UOP_GPU_NEG64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_NOT	uop.h	/^	UOP_GPU_NOT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_NOT64	uop.h	/^	UOP_GPU_NOT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_OR	uop.h	/^	UOP_GPU_OR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_OR64	uop.h	/^	UOP_GPU_OR64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_PHI	uop.h	/^  UOP_GPU_PHI,$/;"	e	enum:Uop_Type_enum
UOP_GPU_PMEVENT	uop.h	/^	UOP_GPU_PMEVENT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_POPC	uop.h	/^	UOP_GPU_POPC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_POPC64	uop.h	/^	UOP_GPU_POPC64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_PREFETCH	uop.h	/^	UOP_GPU_PREFETCH,$/;"	e	enum:Uop_Type_enum
UOP_GPU_PREFETCHU	uop.h	/^	UOP_GPU_PREFETCHU,$/;"	e	enum:Uop_Type_enum
UOP_GPU_PRMT	uop.h	/^	UOP_GPU_PRMT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RCP	uop.h	/^	UOP_GPU_RCP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RCP64	uop.h	/^	UOP_GPU_RCP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RECONVERGE	uop.h	/^  UOP_GPU_RECONVERGE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RED	uop.h	/^	UOP_GPU_RED,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RED64	uop.h	/^	UOP_GPU_RED64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_REM	uop.h	/^	UOP_GPU_REM,$/;"	e	enum:Uop_Type_enum
UOP_GPU_REM64	uop.h	/^	UOP_GPU_REM64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RET	uop.h	/^	UOP_GPU_RET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RSQRT	uop.h	/^	UOP_GPU_RSQRT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_RSQRT64	uop.h	/^	UOP_GPU_RSQRT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SAD	uop.h	/^	UOP_GPU_SAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SAD64	uop.h	/^	UOP_GPU_SAD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SELP	uop.h	/^	UOP_GPU_SELP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SELP64	uop.h	/^	UOP_GPU_SELP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SET	uop.h	/^	UOP_GPU_SET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SET64	uop.h	/^	UOP_GPU_SET64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SETP	uop.h	/^	UOP_GPU_SETP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SETP64	uop.h	/^	UOP_GPU_SETP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SHL	uop.h	/^	UOP_GPU_SHL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SHL64	uop.h	/^	UOP_GPU_SHL64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SHR	uop.h	/^	UOP_GPU_SHR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SHR64	uop.h	/^	UOP_GPU_SHR64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SIN	uop.h	/^	UOP_GPU_SIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SLCT	uop.h	/^	UOP_GPU_SLCT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SLCT64	uop.h	/^	UOP_GPU_SLCT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SQRT	uop.h	/^	UOP_GPU_SQRT,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SQRT64	uop.h	/^	UOP_GPU_SQRT64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ST	uop.h	/^	UOP_GPU_ST,$/;"	e	enum:Uop_Type_enum
UOP_GPU_ST64	uop.h	/^	UOP_GPU_ST64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUB	uop.h	/^	UOP_GPU_SUB,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUB64	uop.h	/^	UOP_GPU_SUB64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUBC	uop.h	/^	UOP_GPU_SUBC,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SULD	uop.h	/^	UOP_GPU_SULD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SULD64	uop.h	/^	UOP_GPU_SULD64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUQ	uop.h	/^	UOP_GPU_SUQ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SURED	uop.h	/^	UOP_GPU_SURED,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SURED64	uop.h	/^	UOP_GPU_SURED64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUST	uop.h	/^	UOP_GPU_SUST,$/;"	e	enum:Uop_Type_enum
UOP_GPU_SUST64	uop.h	/^	UOP_GPU_SUST64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TESTP	uop.h	/^  UOP_GPU_TESTP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TESTP64	uop.h	/^  UOP_GPU_TESTP64,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TEX	uop.h	/^  UOP_GPU_TEX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TLD4	uop.h	/^  UOP_GPU_TLD4,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TRAP	uop.h	/^  UOP_GPU_TRAP,$/;"	e	enum:Uop_Type_enum
UOP_GPU_TXQ	uop.h	/^  UOP_GPU_TXQ,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VABSDIFF	uop.h	/^  UOP_GPU_VABSDIFF,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VADD	uop.h	/^  UOP_GPU_VADD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VMAD	uop.h	/^  UOP_GPU_VMAD,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VMAX	uop.h	/^  UOP_GPU_VMAX,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VMIN	uop.h	/^  UOP_GPU_VMIN,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VOTE	uop.h	/^  UOP_GPU_VOTE,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VSET	uop.h	/^  UOP_GPU_VSET,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VSHL	uop.h	/^  UOP_GPU_VSHL,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VSHR	uop.h	/^  UOP_GPU_VSHR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_VSUB	uop.h	/^  UOP_GPU_VSUB,$/;"	e	enum:Uop_Type_enum
UOP_GPU_XOR	uop.h	/^  UOP_GPU_XOR,$/;"	e	enum:Uop_Type_enum
UOP_GPU_XOR64	uop.h	/^  UOP_GPU_XOR64,$/;"	e	enum:Uop_Type_enum
UOP_H_INCLUDED	uop.h	39;"	d
UOP_IADD	uop.h	/^  UOP_IADD,                     \/\/!< integer add$/;"	e	enum:Uop_Type_enum
UOP_ICMP	uop.h	/^  UOP_ICMP,                     \/\/!< integer compare$/;"	e	enum:Uop_Type_enum
UOP_IMEM	uop.h	/^  UOP_IMEM,                     \/\/!< int memory instruction$/;"	e	enum:Uop_Type_enum
UOP_IMUL	uop.h	/^  UOP_IMUL,                     \/\/!< integer multiply$/;"	e	enum:Uop_Type_enum
UOP_INV	uop.h	/^  UOP_INV,                      \/\/!< invalid opcode$/;"	e	enum:Uop_Type_enum
UOP_LD	uop.h	/^  UOP_LD,                       \/\/!< load memory instruction$/;"	e	enum:Uop_Type_enum
UOP_LDA	uop.h	/^  UOP_LDA,                      \/\/!< load address$/;"	e	enum:Uop_Type_enum
UOP_LOGIC	uop.h	/^  UOP_LOGIC,                    \/\/!< logical$/;"	e	enum:Uop_Type_enum
UOP_MM	uop.h	/^  UOP_MM,                       \/\/!< multimedia instructions$/;"	e	enum:Uop_Type_enum
UOP_NOP	uop.h	/^  UOP_NOP,                      \/\/!< is a decoded nop$/;"	e	enum:Uop_Type_enum
UOP_SHIFT	uop.h	/^  UOP_SHIFT,                    \/\/!< shift$/;"	e	enum:Uop_Type_enum
UOP_SPEC	uop.h	/^  UOP_SPEC,                     \/\/!< something weird (rpcc)$/;"	e	enum:Uop_Type_enum
UOP_SSE	uop.h	/^  UOP_SSE,$/;"	e	enum:Uop_Type_enum
UOP_ST	uop.h	/^  UOP_ST,                       \/\/!< store memory instruction$/;"	e	enum:Uop_Type_enum
UP	router.cc	53;"	d	file:
UQuad	global_types.h	/^typedef uns64              UQuad;$/;"	t
UTILS_H_INCLUDED	utils.h	41;"	d
Unit_Type	global_types.h	/^} Unit_Type;$/;"	t	typeref:enum:_Unit_Type_enum
Uop_Dispatch_Latency	schedule_smc.cc	/^struct Uop_Dispatch_Latency$/;"	s	file:
Uop_LatencyBinding_Init	exec.cc	/^struct Uop_LatencyBinding_Init$/;"	s	file:
Uop_State	uop.h	/^} Uop_State;$/;"	t	typeref:enum:Uop_State_enum
Uop_State_enum	uop.h	/^typedef enum Uop_State_enum {$/;"	g
Uop_Type	uop.h	/^} Uop_Type;$/;"	t	typeref:enum:Uop_Type_enum
Uop_Type_enum	uop.h	/^typedef enum Uop_Type_enum {$/;"	g
VCA	router.cc	63;"	d	file:
WATTCH_CORE_EVENT	statistics.h	1110;"	d
WATTCH_CORE_EVENT_N	statistics.h	1113;"	d
WATTCH_GLOBAL_EVENT	statistics.h	1116;"	d
WATTCH_GLOBAL_EVENT_N	statistics.h	1119;"	d
WRITE_STATUS	assert_macros.h	57;"	d
XED_CATEGORY_3DNOW	trace_read.h	/^  XED_CATEGORY_3DNOW,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_AES	trace_read.h	/^  XED_CATEGORY_AES,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_AVX	trace_read.h	/^  XED_CATEGORY_AVX,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_BINARY	trace_read.h	/^  XED_CATEGORY_BINARY,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_BITBYTE	trace_read.h	/^  XED_CATEGORY_BITBYTE,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_BROADCAST	trace_read.h	/^  XED_CATEGORY_BROADCAST,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_CALL	trace_read.h	/^  XED_CATEGORY_CALL,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_CMOV	trace_read.h	/^  XED_CATEGORY_CMOV,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_COND_BR	trace_read.h	/^  XED_CATEGORY_COND_BR,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_CONVERT	trace_read.h	/^  XED_CATEGORY_CONVERT,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_DATAXFER	trace_read.h	/^  XED_CATEGORY_DATAXFER,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_DECIMAL	trace_read.h	/^  XED_CATEGORY_DECIMAL,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_FCMOV	trace_read.h	/^  XED_CATEGORY_FCMOV,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_FLAGOP	trace_read.h	/^  XED_CATEGORY_FLAGOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_INTERRUPT	trace_read.h	/^  XED_CATEGORY_INTERRUPT,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_INVALID	trace_read.h	/^  XED_CATEGORY_INVALID,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_IO	trace_read.h	/^  XED_CATEGORY_IO,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_IOSTRINGOP	trace_read.h	/^  XED_CATEGORY_IOSTRINGOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_LOGICAL	trace_read.h	/^  XED_CATEGORY_LOGICAL,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_MISC	trace_read.h	/^  XED_CATEGORY_MISC,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_MMX	trace_read.h	/^  XED_CATEGORY_MMX,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_NOP	trace_read.h	/^  XED_CATEGORY_NOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_PCLMULQDQ	trace_read.h	/^  XED_CATEGORY_PCLMULQDQ,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_POP	trace_read.h	/^  XED_CATEGORY_POP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_PREFETCH	trace_read.h	/^  XED_CATEGORY_PREFETCH,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_PUSH	trace_read.h	/^  XED_CATEGORY_PUSH,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_RET	trace_read.h	/^  XED_CATEGORY_RET,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_ROTATE	trace_read.h	/^  XED_CATEGORY_ROTATE,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SEGOP	trace_read.h	/^  XED_CATEGORY_SEGOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SEMAPHORE	trace_read.h	/^  XED_CATEGORY_SEMAPHORE,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SHIFT	trace_read.h	/^  XED_CATEGORY_SHIFT,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SSE	trace_read.h	/^  XED_CATEGORY_SSE,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_STRINGOP	trace_read.h	/^  XED_CATEGORY_STRINGOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_STTNI	trace_read.h	/^  XED_CATEGORY_STTNI,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SYSCALL	trace_read.h	/^  XED_CATEGORY_SYSCALL,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SYSRET	trace_read.h	/^  XED_CATEGORY_SYSRET,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_SYSTEM	trace_read.h	/^  XED_CATEGORY_SYSTEM,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_UNCOND_BR	trace_read.h	/^  XED_CATEGORY_UNCOND_BR,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_VTX	trace_read.h	/^  XED_CATEGORY_VTX,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_WIDENOP	trace_read.h	/^  XED_CATEGORY_WIDENOP,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_X87_ALU	trace_read.h	/^  XED_CATEGORY_X87_ALU,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_XSAVE	trace_read.h	/^  XED_CATEGORY_XSAVE,$/;"	e	enum:TR_OPCODE_ENUM_
XED_CATEGORY_XSAVEOPT	trace_read.h	/^  XED_CATEGORY_XSAVEOPT,$/;"	e	enum:TR_OPCODE_ENUM_
_ALL_STATS_C_INCLUDED_	all_stats.h	2;"	d
_DEBUG	debug_macros.h	100;"	d
_DEBUG	debug_macros.h	111;"	d
_DEBUG_IRIS	memreq_info.h	53;"	d
_Unit_Type_enum	global_types.h	/^typedef enum _Unit_Type_enum$/;"	g
__ALL_KNOBS_H_INCLUDED__	all_knobs.h	2;"	d
__ASSERT_H__	assert_macros.h	42;"	d
__DEBUG_MACROS_H__	debug_macros.h	115;"	d
__PREF_STRIDE_H__	pref_stride.h	39;"	d
abstract_knob_c	knob.h	/^    abstract_knob_c() {  }$/;"	f	class:abstract_knob_c
abstract_knob_c	knob.h	/^    abstract_knob_c(string name, string value, string parentName): m_name(name),$/;"	f	class:abstract_knob_c
abstract_knob_c	knob.h	/^class abstract_knob_c$/;"	c
access	memory.cc	/^int dcu_c::access(uop_c* uop)$/;"	f	class:dcu_c
access	memory.cc	/^int memory_c::access(uop_c* uop)$/;"	f	class:memory_c
access_cache	cache.cc	/^void* cache_c::access_cache(Addr addr, Addr *line_addr, bool update_repl, int appl_id) $/;"	f	class:cache_c
access_cache	memory.cc	/^dcache_data_s* dcu_c::access_cache(Addr addr, Addr *line_addr, bool update, int appl_id)$/;"	f	class:dcu_c
access_cache	memory.cc	/^dcache_data_s* memory_c::access_cache(int core_id, Addr addr, Addr *line_addr, \\$/;"	f	class:memory_c
access_icache	frontend.cc	/^bool frontend_c::access_icache(int tid, Addr fetch_addr, frontend_s* fetch_data)$/;"	f	class:frontend_c
acquire_data_bus	dram.cc	/^Counter dram_controller_c::acquire_data_bus(int channel_id, int req_size, bool gpu_req)$/;"	f	class:dram_controller_c
acquire_entry	utils.h	/^    T* acquire_entry(macsim_c* m_simBase) $/;"	f	class:pool_c
acquire_entry	utils.h	/^    T* acquire_entry(void)$/;"	f	class:pool_c
addDistribution	statistics.h	/^    void addDistribution(DIST_Stat* pStat)$/;"	f	class:CoreStatistics
addDistribution	statistics.h	/^    void addDistribution(DIST_Stat* pStat)$/;"	f	class:GlobalStatistics
addMember	statistics.h	/^    void addMember(long memberID)$/;"	f	class:DIST_Stat
addStatistic	statistics.h	/^    void addStatistic(AbstractStat* pStat)$/;"	f	class:CoreStatistics
addStatistic	statistics.h	/^    void addStatistic(AbstractStat* pStat)$/;"	f	class:GlobalStatistics
add_application	core.cc	/^void core_c::add_application(int tid, process_s *process)$/;"	f	class:core_c
add_src_from_map_entry	map.cc	/^void map_c::add_src_from_map_entry(uop_c *uop, int src_num, map_entry_c *map_entry, $/;"	f	class:map_c
add_src_from_uop	map.cc	/^void map_c::add_src_from_uop (uop_c *uop, uop_c *src_uop, Dep_Type type) $/;"	f	class:map_c
add_store_deps	map.cc	/^uop_c* map_c::add_store_deps(uop_c * uop) $/;"	f	class:map_c
adjustKnobValues	knob.cc	/^void KnobsContainer::adjustKnobValues()$/;"	f	class:KnobsContainer
adjust_req	memory.cc	/^void memory_c::adjust_req(mem_req_s* req, Mem_Req_Type type, Addr addr, int size, \\$/;"	f	class:memory_c
advance	pqueue.h	/^    bool advance()$/;"	f	class:pqueue_c
advance	schedule.cc	/^void schedule_c::advance(int q_index)$/;"	f	class:schedule_c
advance	schedule_smc.cc	/^void schedule_smc_c::advance(int q_index) {$/;"	f	class:schedule_smc_c
advance_queues	core.cc	/^void core_c::advance_queues(void)$/;"	f	class:core_c
all_knobs_c	all_knobs.cc	/^all_knobs_c::all_knobs_c() {$/;"	f	class:all_knobs_c
all_knobs_c	all_knobs.h	/^class all_knobs_c {$/;"	c
all_stats_c	all_stats.cc	/^all_stats_c::all_stats_c(ProcessorStatistics* procStat) {$/;"	f	class:all_stats_c
all_stats_c	all_stats.h	/^class all_stats_c {$/;"	c
alloc_fp_reg	rob.cc	/^void rob_c::alloc_fp_reg()$/;"	f	class:rob_c
alloc_int_reg	rob.cc	/^void rob_c::alloc_int_reg()$/;"	f	class:rob_c
alloc_lb	rob.h	/^    void alloc_lb() $/;"	f	class:rob_c
alloc_sb	rob.h	/^    void alloc_sb() $/;"	f	class:rob_c
allocate	bug_detector.cc	/^void bug_detector_c::allocate(uop_c *uop)$/;"	f	class:bug_detector_c
allocate	uop.cc	/^void uop_c::allocate()$/;"	f	class:uop_c
allocate_c	allocate.cc	/^allocate_c::allocate_c(int core_id, pqueue_c<int *> *q_frontend, pqueue_c<int> **alloc_q, $/;"	f	class:allocate_c
allocate_c	allocate.h	/^class allocate_c$/;"	c
allocate_new_entry	memory.cc	/^mem_req_s* memory_c::allocate_new_entry(int core_id)$/;"	f	class:memory_c
allocate_noc	bug_detector.cc	/^void bug_detector_c::allocate_noc(mem_req_s* req)$/;"	f	class:bug_detector_c
allocate_pref	pref_factory.cc	/^void pref_factory_c::allocate_pref($/;"	f	class:pref_factory_c
allocate_retire_data	retire.cc	/^void retire_c::allocate_retire_data(int tid)$/;"	f	class:retire_c
allocate_thread_data	core.cc	/^void core_c::allocate_thread_data(int tid)$/;"	f	class:core_c
applyComandLineArguments	knob.cc	/^bool KnobsContainer::applyComandLineArguments(int argc, char** argv, char** invalidParam)$/;"	f	class:KnobsContainer
applyParamFile	knob.cc	/^void KnobsContainer::applyParamFile(const string& filename)$/;"	f	class:KnobsContainer
applyValuesToKnobs	knob.cc	/^void KnobsContainer::applyValuesToKnobs(map<string, string, ltstr_s>& ValuesMap)$/;"	f	class:KnobsContainer
avail_data_bus	dram.cc	/^bool dram_controller_c::avail_data_bus(int channel_id)$/;"	f	class:dram_controller_c
avg_power	macsim.h	/^		double avg_power; \/**< average power *\/$/;"	m	class:macsim_c
back	rob.h	/^    uop_c* back() $/;"	f	class:rob_c
bank_id	memory.cc	/^int dcu_c::bank_id(Addr addr)$/;"	f	class:dcu_c
bank_id	memory.cc	/^int memory_c::bank_id(int core_id, Addr addr)$/;"	f	class:memory_c
bank_schedule	dram.cc	/^void dram_controller_c::bank_schedule()$/;"	f	class:dram_controller_c
bank_schedule_complete	dram.cc	/^void dram_controller_c::bank_schedule_complete(void)$/;"	f	class:dram_controller_c
bank_schedule_new	dram.cc	/^void dram_controller_c::bank_schedule_new(void)$/;"	f	class:dram_controller_c
base_addr	memory.cc	/^Addr dcu_c::base_addr(Addr addr)$/;"	f	class:dcu_c
base_addr	memory.cc	/^Addr memory_c::base_addr(int core_id, Addr addr)$/;"	f	class:memory_c
base_cache_line	cache.cc	/^Addr cache_c::base_cache_line(Addr addr) $/;"	f	class:cache_c
base_cache_line	readonly_cache.cc	/^Addr readonly_cache_c::base_cache_line(Addr addr)$/;"	f	class:readonly_cache_c
base_cache_line	sw_managed_cache.cc	/^Addr sw_managed_cache_c::base_cache_line(Addr addr)$/;"	f	class:sw_managed_cache_c
block_schedule_info_s	global_defs.h	/^typedef struct block_schedule_info_s block_schedule_info_s;$/;"	t	typeref:struct:block_schedule_info_s
block_schedule_info_s	process_manager.cc	/^block_schedule_info_s::block_schedule_info_s()$/;"	f	class:block_schedule_info_s
block_schedule_info_s	process_manager.h	/^typedef struct block_schedule_info_s {$/;"	s
block_schedule_info_s	process_manager.h	/^} block_schedule_info_s; $/;"	t	typeref:struct:block_schedule_info_s
bp_data_c	bp.cc	/^bp_data_c::bp_data_c(int core_id, macsim_c* simBase) $/;"	f	class:bp_data_c
bp_data_c	bp.h	/^class bp_data_c$/;"	c
bp_dir_base_c	bp.cc	/^bp_dir_base_c::bp_dir_base_c(macsim_c* simBase) $/;"	f	class:bp_dir_base_c
bp_dir_base_c	bp.h	/^class bp_dir_base_c $/;"	c
bp_gshare_c	bp_gshare.cc	/^bp_gshare_c::bp_gshare_c(macsim_c* simBase) : bp_dir_base_c(simBase)$/;"	f	class:bp_gshare_c
bp_gshare_c	bp_gshare.h	/^class bp_gshare_c : public bp_dir_base_c $/;"	c
bp_recovery_info_c	bp.cc	/^bp_recovery_info_c::bp_recovery_info_c()$/;"	f	class:bp_recovery_info_c
bp_recovery_info_c	bp.h	/^class bp_recovery_info_c $/;"	c
bp_targ_c	bp_targ.cc	/^bp_targ_c::bp_targ_c(uns core_id_arg, macsim_c* simBase) $/;"	f	class:bp_targ_c
bp_targ_c	bp_targ.h	/^class bp_targ_c$/;"	c
br_exec	exec.cc	/^void exec_c::br_exec(uop_c *uop)$/;"	f	class:exec_c
breakpoint	utils.cc	/^void breakpoint (const char file [], const int line)$/;"	f
btb	bp_targ.h	/^     cache_c* btb; \/**< BTB *\/$/;"	m	class:bp_targ_c
btb_access	frontend.cc	/^bool frontend_c::btb_access(uop_c *uop)$/;"	f	class:frontend_c
bug_detector_c	bug_detector.cc	/^bug_detector_c::bug_detector_c(macsim_c* simBase)$/;"	f	class:bug_detector_c
bug_detector_c	bug_detector.h	/^class bug_detector_c $/;"	c
cache_c	cache.cc	/^cache_c::cache_c(string name, int num_set, int assoc, int line_size, $/;"	f	class:cache_c
cache_c	cache.h	/^class cache_c $/;"	c
cache_entry_c	cache.cc	/^cache_entry_c::cache_entry_c()$/;"	f	class:cache_entry_c
cache_entry_c	cache.h	/^class cache_entry_c $/;"	c
cache_fill_line	readonly_cache.cc	/^bool readonly_cache_c::cache_fill_line(mem_req_s *req)$/;"	f	class:readonly_cache_c
cache_line_size	readonly_cache.cc	/^uns8 readonly_cache_c::cache_line_size(void)$/;"	f	class:readonly_cache_c
cache_line_size	sw_managed_cache.cc	/^uns8 sw_managed_cache_c::cache_line_size(void)$/;"	f	class:sw_managed_cache_c
cache_partition_framework_c	utils.cc	/^cache_partition_framework_c::cache_partition_framework_c(macsim_c* simBase)$/;"	f	class:cache_partition_framework_c
cache_partition_framework_c	utils.h	/^class cache_partition_framework_c$/;"	c
cache_set_c	cache.cc	/^cache_set_c::cache_set_c(int assoc)$/;"	f	class:cache_set_c
cache_set_c	cache.h	/^class cache_set_c$/;"	c
channel_schedule	dram.cc	/^void dram_controller_c::channel_schedule(void)$/;"	f	class:dram_controller_c
channel_schedule_cmd	dram.cc	/^void dram_controller_c::channel_schedule_cmd(void)$/;"	f	class:dram_controller_c
channel_schedule_data	dram.cc	/^void dram_controller_c::channel_schedule_data(void)$/;"	f	class:dram_controller_c
check_br_ready	frontend.cc	/^bool frontend_c::check_br_ready(int fetch_id) $/;"	f	class:frontend_c
check_channel	router.cc	/^void router_c::check_channel(void)$/;"	f	class:router_c
check_fetch_ready	frontend.cc	/^bool frontend_c::check_fetch_ready(int tid)$/;"	f	class:frontend_c
check_forward_progress	core.cc	/^void core_c::check_forward_progress()$/;"	f	class:core_c
check_heartbeat	core.cc	/^void core_c::check_heartbeat(bool final)$/;"	f	class:core_c
check_load_ready	frontend.cc	/^bool frontend_c::check_load_ready(int fetch_id) $/;"	f	class:frontend_c
check_srcs	schedule.cc	/^bool schedule_c::check_srcs(int entry)$/;"	f	class:schedule_c
check_srcs_smc	schedule_smc.cc	/^bool schedule_smc_c::check_srcs_smc(int thread_id, int entry)$/;"	f	class:schedule_smc_c
check_starvation	router.cc	/^void router_c::check_starvation(void)$/;"	f	class:router_c
clear	knob.cc	/^void KnobsContainer::clear()$/;"	f	class:KnobsContainer
clear	knob.h	/^    void clear() {m_TokensVector.clear();}$/;"	f	class:KnobEntryTokenizer
clear	utils.h	/^    void clear(void)$/;"	f	class:hash_c
clear_ports	exec.cc	/^void exec_c::clear_ports()$/;"	f	class:exec_c
clone	statistics.h	/^    CoreStatistics* clone(unsigned int cloneCoreID, macsim_c* simBase)$/;"	f	class:CoreStatistics
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:COUNT_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:DISTMember_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:DIST_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:PERCENT_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:PER_1000_INST_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:PER_1000_PRET_INST_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:PER_CYCLE_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:PER_INST_Stat
clone	statistics.h	/^    virtual AbstractStat* clone(unsigned int coreID)$/;"	f	class:RATIO_Stat
compute_power	macsim.cc	/^void macsim_c::compute_power(void)$/;"	f	class:macsim_c
convert_dyn_uop	trace_read.cc	/^void trace_read_c::convert_dyn_uop(inst_info_s *info, trace_info_s *pi, trace_uop_s *trace_uop, $/;"	f	class:trace_read_c
convert_info_uop	trace_read.cc	/^void trace_read_c::convert_info_uop(inst_info_s *info, trace_uop_s *trace_uop)$/;"	f	class:trace_read_c
convert_pinuop_to_t_uop	trace_read.cc	/^inst_info_s* trace_read_c::convert_pinuop_to_t_uop(trace_info_s *pi, trace_uop_s **trace_uop, $/;"	f	class:trace_read_c
convert_t_uop_to_info	trace_read.cc	/^void trace_read_c::convert_t_uop_to_info(trace_uop_s *t_uop, inst_info_s *info)$/;"	f	class:trace_read_c
core	statistics.h	/^    inline CoreStatistics& core(unsigned int coreID) const$/;"	f	class:ProcessorStatistics
core_c	core.cc	/^core_c::core_c (int c_id, macsim_c* simBase, Unit_Type type)$/;"	f	class:core_c
core_c	core.h	/^class core_c$/;"	c
core_heartbeat	core.cc	/^void core_c::core_heartbeat(bool final) $/;"	f	class:core_c
core_id	pref.h	/^    int           core_id;      \/**< core id *\/$/;"	m	class:pref_base_c
core_id	pref_common.h	/^    int core_id; \/**< core id *\/$/;"	m	class:hwp_common_c
core_id	pref_common.h	/^  int  core_id;                 \/**< core_id *\/$/;"	m	struct:pref_mem_req_s
count	pref_stride.h	/^  int     count; \/**< count *\/$/;"	m	struct:stride_index_table_entry_struct
counter_t	global_types.h	/^typedef uns64 counter_t;  $/;"	t
createEntryFromtext	knob.cc	/^void KnobsContainer::createEntryFromtext(const string& text)$/;"	f	class:KnobsContainer
create_network_interface	dram.cc	/^void dram_controller_c::create_network_interface(void)$/;"	f	class:dram_controller_c
create_network_interface	memory.cc	/^bool dcu_c::create_network_interface(int mclass)$/;"	f	class:dcu_c
create_newentry	pref_stride.cc	/^void pref_stride_c::create_newentry (int idx, Addr line_addr, Addr region_tag)$/;"	f	class:pref_stride_c
create_process	process_manager.cc	/^int process_manager_c::create_process(string appl)	$/;"	f	class:process_manager_c
create_process	process_manager.cc	/^int process_manager_c::create_process(string appl, int repeat, int pid)$/;"	f	class:process_manager_c
create_router	macsim.cc	/^router_c* macsim_c::create_router(int type)$/;"	f	class:macsim_c
create_router	router.cc	/^router_c* router_wrapper_c::create_router(int type)$/;"	f	class:router_wrapper_c
create_thread	process_manager.cc	/^thread_s *process_manager_c::create_thread(process_s* process, int tid, bool main)$/;"	f	class:process_manager_c
create_thread_node	process_manager.cc	/^void process_manager_c::create_thread_node(process_s* process, int tid, bool main)$/;"	f	class:process_manager_c
create_trace_info	core.cc	/^void core_c::create_trace_info(int tid, thread_s* thread)$/;"	f	class:core_c
credit_c	router.cc	/^credit_c::credit_c()$/;"	f	class:credit_c
credit_c	router.h	/^class credit_c$/;"	c
curr_late	pref_common.h	/^  Counter curr_late;            \/**< num of current period late prefetches *\/$/;"	m	struct:pref_info_s
curr_sent	pref_common.h	/^  Counter curr_sent;            \/**< num of current period sent prefetches *\/$/;"	m	struct:pref_info_s
curr_state	pref_stride.h	/^  uns     curr_state; \/**< current state *\/$/;"	m	struct:stride_index_table_entry_struct
curr_useful	pref_common.h	/^  Counter curr_useful;          \/**< num of current period Useful prefetches *\/$/;"	m	struct:pref_info_s
cycle_evict	pref_common.h	/^  Counter cycle_evict;  \/**< When was it evicted - used only for prefetched lines *\/$/;"	m	struct:pref_region_line_status_s
dc_frfcfs_c	dram.cc	/^dc_frfcfs_c::dc_frfcfs_c(macsim_c* simBase): dram_controller_c(simBase) {$/;"	f	class:dc_frfcfs_c
dc_frfcfs_c	dram.h	/^class dc_frfcfs_c : public dram_controller_c$/;"	c
dcache_data_s	memory.h	/^typedef struct dcache_data_s {$/;"	s
dcache_data_s	memory.h	/^} dcache_data_s;$/;"	t	typeref:struct:dcache_data_s
dcache_fill_line_wrapper	memory.cc	/^bool dcache_fill_line_wrapper(mem_req_s* req)$/;"	f
dcache_write_ack_wrapper	memory.cc	/^bool dcache_write_ack_wrapper(mem_req_s* req)$/;"	f
dcu_c	memory.cc	/^dcu_c::dcu_c(int id, Unit_Type type, int level, memory_c* mem, int noc_id, dcu_c** next,\\$/;"	f	class:dcu_c
dcu_c	memory.h	/^class dcu_c$/;"	c
dealloc_fp_reg	rob.cc	/^void rob_c::dealloc_fp_reg()$/;"	f	class:rob_c
dealloc_int_reg	rob.cc	/^void rob_c::dealloc_int_reg()$/;"	f	class:rob_c
dealloc_lb	rob.h	/^    void dealloc_lb() $/;"	f	class:rob_c
dealloc_sb	rob.h	/^    void dealloc_sb() $/;"	f	class:rob_c
deallocate	bug_detector.cc	/^void bug_detector_c::deallocate(uop_c *uop)$/;"	f	class:bug_detector_c
deallocate_memory	macsim.cc	/^void macsim_c::deallocate_memory(void)$/;"	f	class:macsim_c
deallocate_noc	bug_detector.cc	/^void bug_detector_c::deallocate_noc(mem_req_s* req)$/;"	f	class:bug_detector_c
deallocate_thread_data	core.cc	/^void core_c::deallocate_thread_data(int tid)$/;"	f	class:core_c
dec_index	rob.h	/^    int dec_index(int index) $/;"	f	class:rob_c
default_bp	bp.cc	/^bp_dir_base_c *default_bp(macsim_c* simBase) $/;"	f
default_llc	memory.cc	/^cache_c *default_llc(macsim_c* m_simBase)$/;"	f
default_mem	memory.cc	/^memory_c *default_mem(macsim_c* m_simBase) $/;"	f
delay_packet	dram.cc	/^void dram_controller_c::delay_packet()$/;"	f	class:dram_controller_c
delete_application	core.cc	/^void core_c::delete_application(int appl_id)$/;"	f	class:core_c
delete_map	map.cc	/^void map_c::delete_map(int tid)$/;"	f	class:map_c
delete_store_hash_entry	map.cc	/^void map_c::delete_store_hash_entry(uop_c *uop) $/;"	f	class:map_c
delete_store_hash_entry_wrapper	map.cc	/^void delete_store_hash_entry_wrapper (map_c *map, uop_c *uop) {$/;"	f
delete_table	utils.cc	/^void multi_key_map_c::delete_table(int key1)$/;"	f	class:multi_key_map_c
dequeue	pqueue.h	/^    T dequeue(int64_t *priority = 0)$/;"	f	class:pqueue_c
display	knob.h	/^    virtual void display(ostream& os)$/;"	f	class:KnobTemplate
display	knob.h	/^    virtual void display(ostream& os)$/;"	f	class:abstract_knob_c
displayAll	statistics.h	/^    void displayAll()$/;"	f	class:CoreStatistics
displayAll	statistics.h	/^    void displayAll()$/;"	f	class:GlobalStatistics
done	memory.cc	/^bool dcu_c::done(mem_req_s* req)$/;"	f	class:dcu_c
done	memory.cc	/^bool memory_c::done(mem_req_s* req)$/;"	f	class:memory_c
done	pref.h	/^    bool done;                  \/**< Enable done function *\/$/;"	m	class:pref_base_c
done_func	pref.h	/^    void done_func() {}$/;"	f	class:pref_dummy_c
done_func	pref_stride.h	/^    void done_func() {}$/;"	f	class:pref_stride_c
dprint_count	trace_read.h	/^    uint32_t  dprint_count; \/**< dumped instruction count *\/$/;"	m	class:trace_read_c
dprint_inst	trace_read.cc	/^void trace_read_c::dprint_inst(trace_info_s *t_info, int core_id, int thread_id) $/;"	f	class:trace_read_c
dprint_output	trace_read.h	/^    ofstream* dprint_output; \/**< dump output file stream *\/$/;"	m	class:trace_read_c
dram_controller_c	dram.cc	/^dram_controller_c::dram_controller_c(macsim_c* simBase)$/;"	f	class:dram_controller_c
dram_controller_c	dram.h	/^class dram_controller_c$/;"	c
dram_req_priority	dram.cc	/^int dram_controller_c::dram_req_priority[DRAM_REQ_PRIORITY_COUNT] = $/;"	m	class:dram_controller_c	file:
dram_req_priority	dram.h	/^    static int dram_req_priority[DRAM_REQ_PRIORITY_COUNT]; \/**< dram request priority *\/$/;"	m	class:dram_controller_c
dram_state	dram.cc	/^const char* dram_controller_c::dram_state[DRAM_STATE_COUNT] = {$/;"	m	class:dram_controller_c	file:
dram_state	dram.h	/^    static const char* dram_state[DRAM_STATE_COUNT]; \/**< dram state string *\/$/;"	m	class:dram_controller_c
dramsim_instance	dram.h	/^    DRAMSim::MultiChannelMemorySystem* dramsim_instance; \/**< dramsim2 instance *\/$/;"	m	class:dram_controller_c
drb_entry_s	dram.cc	/^drb_entry_s::drb_entry_s(macsim_c* simBase)$/;"	f	class:drb_entry_s
drb_entry_s	dram.h	/^typedef struct drb_entry_s {$/;"	s
drb_entry_s	dram.h	/^} drb_entry_s;$/;"	t	typeref:struct:drb_entry_s
dyn_degree	pref_common.h	/^  uns     dyn_degree;           \/**< dynamic prefetch degree *\/$/;"	m	struct:pref_info_s
enabled	pref_common.h	/^  bool    enabled;              \/**< Is the prefetcher enabled *\/$/;"	m	struct:pref_info_s
enqueue	pqueue.h	/^    bool enqueue(int64_t priority, const T& data)$/;"	f	class:pqueue_c
entries	rob.h	/^    inline int entries() $/;"	f	class:rob_c
evict_onPF	pref_common.h	/^  bool    evict_onPF;   \/**< Line(Demand) evicted due to a Prefetch *\/$/;"	m	struct:pref_region_line_status_s
evict_prefetch	memory.cc	/^mem_req_s* memory_c::evict_prefetch(int core_id)$/;"	f	class:memory_c
exec	exec.cc	/^bool exec_c::exec(int thread_id, int entry, uop_c* uop)$/;"	f	class:exec_c
exec_c	exec.h	/^class exec_c$/;"	c
expand_pool	utils.h	/^    void expand_pool(macsim_c* m_simBase)$/;"	f	class:pool_c
expand_pool	utils.h	/^    void expand_pool(void)$/;"	f	class:pool_c
fcfs_controller	dram.cc	/^dram_controller_c* fcfs_controller(macsim_c* simBase)$/;"	f
fetch	frontend.cc	/^int frontend_c::fetch(void)$/;"	f	class:frontend_c
fetch_block	process_manager.cc	/^thread_trace_info_node_s *process_manager_c::fetch_block(int block_id)$/;"	f	class:process_manager_c
fetch_factory_c	fetch_factory.cc	/^fetch_factory_c::fetch_factory_c() : m_func(NULL)$/;"	f	class:fetch_factory_c
fetch_factory_c	fetch_factory.h	/^class fetch_factory_c$/;"	c
fetch_rr	frontend.cc	/^int frontend_c::fetch_rr(void)$/;"	f	class:frontend_c
fetch_thread	process_manager.cc	/^thread_trace_info_node_s *process_manager_c::fetch_thread(void)$/;"	f	class:process_manager_c
file_tag_fopen	utils.cc	/^FILE *file_tag_fopen (std::string path, char const *const mode, macsim_c* m_simBase)$/;"	f
fill	memory.cc	/^bool dcu_c::fill(mem_req_s* req)$/;"	f	class:dcu_c
final_heartbeat	core.cc	/^void core_c::final_heartbeat(int thread_id) $/;"	f	class:core_c
finalize	macsim.cc	/^void macsim_c::finalize()$/;"	f	class:macsim_c
find	utils.cc	/^int multi_key_map_c::find(int key1, int key2)$/;"	f	class:multi_key_map_c
find_min_lru	cache.cc	/^Counter cache_c::find_min_lru(int set) $/;"	f	class:cache_c
find_replacement_line	cache.cc	/^cache_entry_c* cache_c::find_replacement_line(int set, int appl_id) $/;"	f	class:cache_c
find_replacement_line_from_same_type	cache.cc	/^cache_entry_c* cache_c::find_replacement_line_from_same_type(int set, int appl_id, $/;"	f	class:cache_c
find_tag_and_set	cache.cc	/^void cache_c::find_tag_and_set(Addr addr, Addr *tag, int *set) $/;"	f	class:cache_c
fini_sim	macsim.cc	/^void macsim_c::fini_sim(void)$/;"	f	class:macsim_c
flit_c	router.cc	/^flit_c::flit_c()$/;"	f	class:flit_c
flit_c	router.h	/^class flit_c$/;"	c
flush	pqueue.h	/^    void flush()$/;"	f	class:pqueue_c
flush_prefetch	dram.cc	/^void dram_controller_c::flush_prefetch(int bid)$/;"	f	class:dram_controller_c
flush_prefetch	memory.cc	/^void memory_c::flush_prefetch(int core_id)$/;"	f	class:memory_c
fp_ALLOCQ	uop.h	/^  fp_ALLOCQ,$/;"	e	enum:Iaq_Type_enum
free	uop.cc	/^uop_c* uop_c::free()$/;"	f	class:uop_c
free_req	memory.cc	/^void memory_c::free_req(int core_id, mem_req_s* req)$/;"	f	class:memory_c
free_rob	rob_smc.cc	/^void smc_rob_c::free_rob(int thread_id) $/;"	f	class:smc_rob_c
free_write_req	memory.cc	/^void memory_c::free_write_req(mem_req_s* req)$/;"	f	class:memory_c
frfcfs_controller	dram.cc	/^dram_controller_c* frfcfs_controller(macsim_c* simBase)$/;"	f
front	rob.h	/^    uop_c* front() $/;"	f	class:rob_c
front_rob	rob.h	/^    int front_rob() $/;"	f	class:rob_c
frontend_c	frontend.h	/^class frontend_c$/;"	c
frontend_s	frontend.h	/^typedef struct frontend_s {$/;"	s
frontend_s	frontend.h	/^} frontend_s;$/;"	t	typeref:struct:frontend_s
full	memory.cc	/^bool dcu_c::full(void)$/;"	f	class:dcu_c
full	memory.cc	/^bool queue_c::full()$/;"	f	class:queue_c
g_cf_type_name	uop.cc	/^const char *uop_c::g_cf_type_name[NUM_CF_TYPES] = {$/;"	m	class:uop_c	file:
g_cf_type_name	uop.h	/^    static const char *g_cf_type_name[NUM_CF_TYPES]; \/**< branch type string *\/$/;"	m	class:uop_c
g_dep_type_name	uop.cc	/^const char *uop_c::g_dep_type_name[NUM_DEP_TYPES] = {$/;"	m	class:uop_c	file:
g_dep_type_name	uop.h	/^    static const char *g_dep_type_name[NUM_DEP_TYPES]; \/**< uop dependence type string *\/$/;"	m	class:uop_c
g_mem_priority	memory.cc	/^int g_mem_priority[] = {$/;"	v
g_mem_type_name	uop.cc	/^const char *uop_c::g_mem_type_name[NUM_MEM_TYPES] = {$/;"	m	class:uop_c	file:
g_mem_type_name	uop.h	/^    static const char *g_mem_type_name[NUM_MEM_TYPES]; \/**< uop memory type string *\/$/;"	m	class:uop_c
g_mem_type_names	trace_read.cc	/^const char *trace_read_c::g_mem_type_names[20] = {$/;"	m	class:trace_read_c	file:
g_mem_type_names	trace_read.h	/^    static const char *g_mem_type_names[20]; \/**< memeory request type string *\/$/;"	m	class:trace_read_c
g_mystatus	macsim.h	/^		FILE *g_mystatus; \/**< default status stream *\/$/;"	m	class:macsim_c
g_mystderr	macsim.h	/^		FILE *g_mystderr;	\/**< default error stream *\/$/;"	m	class:macsim_c
g_mystdout	macsim.h	/^		FILE *g_mystdout;	\/**< default output stream *\/$/;"	m	class:macsim_c
g_optype_names	trace_read.cc	/^const char *trace_read_c::g_optype_names[37] = {$/;"	m	class:trace_read_c	file:
g_optype_names	trace_read.h	/^    static const char *g_optype_names[37]; \/**< opcode type string *\/$/;"	m	class:trace_read_c
g_total_cpu_packet	router.cc	/^int g_total_cpu_packet = 0;$/;"	v
g_total_gpu_packet	router.cc	/^int g_total_gpu_packet = 0;$/;"	v
g_total_packet	router.cc	/^int g_total_packet = 0;$/;"	v
g_tr_cf_names	trace_read.cc	/^const char* trace_read_c::g_tr_cf_names[10] = {$/;"	m	class:trace_read_c	file:
g_tr_cf_names	trace_read.h	/^    static const char* g_tr_cf_names[10]; \/**< cf type string *\/$/;"	m	class:trace_read_c
g_tr_opcode_names	trace_read.cc	/^const char* trace_read_c::g_tr_opcode_names[MAX_TR_OPCODE_NAME] = {$/;"	m	class:trace_read_c	file:
g_tr_opcode_names	trace_read.h	/^    static const char* g_tr_opcode_names[MAX_TR_OPCODE_NAME]; \/**< opcode name string *\/$/;"	m	class:trace_read_c
g_tr_reg_names	trace_read.cc	/^const char* trace_read_c::g_tr_reg_names[MAX_TR_REG] = {$/;"	m	class:trace_read_c	file:
g_tr_reg_names	trace_read.h	/^    static const char *g_tr_reg_names[MAX_TR_REG]; \/**< register name string *\/$/;"	m	class:trace_read_c
g_uop_state_name	uop.cc	/^const char *uop_c::g_uop_state_name[NUM_OP_STATES] = {$/;"	m	class:uop_c	file:
g_uop_state_name	uop.h	/^    static const char *g_uop_state_name[NUM_OP_STATES]; \/**< uop state string *\/$/;"	m	class:uop_c
g_uop_type_name	uop.cc	/^const char *uop_c::g_uop_type_name[NUM_UOP_TYPES] = {$/;"	m	class:uop_c	file:
g_uop_type_name	uop.h	/^    static const char *g_uop_type_name[NUM_UOP_TYPES]; \/**< uop type string *\/$/;"	m	class:uop_c
gen_ALLOCQ	uop.h	/^  gen_ALLOCQ = 0,$/;"	e	enum:Iaq_Type_enum
get	fetch_factory.cc	/^fetch_factory_c *fetch_factory_c::get()$/;"	f	class:fetch_factory_c
get	pref_factory.cc	/^pref_factory_c *pref_factory_c::get()$/;"	f	class:pref_factory_c
getAllKnobs	knob.cc	/^all_knobs_c* KnobsContainer::getAllKnobs() {$/;"	f	class:KnobsContainer
getCoreWideStat	statistics.cc	/^AbstractStat& getCoreWideStat(int coreID, long statID, ProcessorStatistics* m_ProcStat)$/;"	f
getCount	statistics.h	/^    inline unsigned long long getCount()$/;"	f	class:AbstractStat
getCycleCount	statistics.cc	/^unsigned int getCycleCount()$/;"	f
getGLobalStat	statistics.cc	/^AbstractStat& getGLobalStat(long statID, ProcessorStatistics* m_ProcStat)$/;"	f
getInstructionCount	statistics.cc	/^unsigned int getInstructionCount()$/;"	f
getName	knob.h	/^    inline string getName() const { return m_name; }$/;"	f	class:abstract_knob_c
getName	statistics.h	/^    const string& getName()$/;"	f	class:AbstractStat
getOutputFilename	statistics.h	/^    const string& getOutputFilename()$/;"	f	class:AbstractStat
getOutputStream	statistics.cc	/^ofstream* getOutputStream(const string& filename, macsim_c* m_simBase)$/;"	f
getParentName	knob.h	/^    inline string getParentName() const {return m_parentName;}$/;"	f	class:abstract_knob_c
getPseudoRetiredInstructionCount	statistics.cc	/^unsigned int getPseudoRetiredInstructionCount()$/;"	f
getTokens	knob.cc	/^void KnobEntryTokenizer::getTokens(vector<string>& array)$/;"	f	class:KnobEntryTokenizer
getValue	knob.h	/^    inline const T getValue() const { return m_value; }$/;"	f	class:KnobTemplate
getValue	knob.h	/^    inline const string getValue()const {return m_value;}$/;"	f	class:KnobTemplate
getValueString	knob.h	/^    inline string getValueString() const { return m_valueString; }$/;"	f	class:abstract_knob_c
get_appl_id	core.cc	/^int core_c::get_appl_id()$/;"	f	class:core_c
get_appl_id	core.cc	/^int core_c::get_appl_id(int tid)$/;"	f	class:core_c
get_appl_type	utils.h	/^    inline bool get_appl_type(int appl_id)$/;"	f	class:cache_partition_framework_c
get_bank_busy_array	exec.h	/^    bool** get_bank_busy_array(void) { return &m_bank_busy; }$/;"	f	class:exec_c
get_bank_num	cache.cc	/^int cache_c::get_bank_num(Addr addr) $/;"	f	class:cache_c
get_const_cache	core.h	/^    readonly_cache_c* get_const_cache(void) { return m_const_cache; }$/;"	f	class:core_c
get_core_type	core.h	/^    string get_core_type(void) { return m_core_type; }$/;"	f	class:core_c
get_cycle_count	core.h	/^    Counter get_cycle_count(void) {return m_core_cycle_count;}$/;"	f	class:core_c
get_dst_id	memory.cc	/^int memory_c::get_dst_id(int level, int id)$/;"	f	class:memory_c
get_dst_router_id	memory.cc	/^int memory_c::get_dst_router_id(int level, int id)$/;"	f	class:memory_c
get_frontend	core.h	/^    frontend_c* get_frontend(void) { return m_frontend;}$/;"	f	class:core_c
get_gcd	macsim.cc	/^int get_gcd(int a, int b)$/;"	f
get_id	router.cc	/^int router_c::get_id(void)$/;"	f	class:router_c
get_instrs_retired	retire.h	/^    inline Counter get_instrs_retired(int thread_id) {$/;"	f	class:retire_c
get_latency	exec.cc	/^int exec_c::get_latency(Uop_Type uop_type)$/;"	f	class:exec_c
get_lcm	macsim.cc	/^int get_lcm(int a, int b)$/;"	f
get_level_id	memory.cc	/^void memory_c::get_level_id(int noc_id, int* level, int* id)$/;"	f	class:memory_c
get_map	core.h	/^    map_c* get_map() { return m_map; }$/;"	f	class:core_c
get_max_threads_per_core	core.h	/^    int get_max_threads_per_core() { return m_max_threads_per_core; }$/;"	f	class:core_c
get_n_uops_in_ready_order	rob_smc.cc	/^vector<uop_c *>* smc_rob_c::get_n_uops_in_ready_order(int n, Counter core_cycle) $/;"	f	class:smc_rob_c
get_next_set_bit64	utils.cc	/^int get_next_set_bit64(uns64 val, uns pos)$/;"	f
get_num_avail_entry	memory.cc	/^int memory_c::get_num_avail_entry(int core_id)$/;"	f	class:memory_c
get_num_fp_regs	rob.h	/^    int get_num_fp_regs() $/;"	f	class:rob_c
get_num_int_regs	rob.h	/^    int get_num_int_regs() $/;"	f	class:rob_c
get_num_lb	rob.h	/^    int get_num_lb() $/;"	f	class:rob_c
get_num_sb	rob.h	/^    int get_num_sb() $/;"	f	class:rob_c
get_num_set_bits64	utils.cc	/^int get_num_set_bits64(uns64 val)$/;"	f
get_ovc_occupancy	router.cc	/^int router_c::get_ovc_occupancy(int port, bool type)$/;"	f	class:router_c
get_performance_mask	utils.h	/^    inline bool get_performance_mask(int appl_id)$/;"	f	class:cache_partition_framework_c
get_performance_mask	utils.h	/^    inline bool get_performance_mask(void)$/;"	f	class:cache_partition_framework_c
get_periodic_inst_count	retire.h	/^    int get_periodic_inst_count(void)$/;"	f	class:retire_c
get_psel_mask	utils.h	/^    inline bool get_psel_mask(int appl_id)$/;"	f	class:cache_partition_framework_c
get_psel_mask	utils.h	/^    inline bool get_psel_mask(void)$/;"	f	class:cache_partition_framework_c
get_read_port	memory.cc	/^bool dcu_c::get_read_port(int bank_id)$/;"	f	class:dcu_c
get_read_port	memory.cc	/^bool memory_c::get_read_port(int core_id, int bank_id)$/;"	f	class:memory_c
get_read_port	port.cc	/^bool port_c::get_read_port (Counter cycle_count)$/;"	f	class:port_c
get_retire	core.h	/^    retire_c* get_retire(void) { return m_retire; }$/;"	f	class:core_c
get_shared_memory	core.h	/^    sw_managed_cache_c* get_shared_memory(void) { return m_shared_memory; }$/;"	f	class:core_c
get_texture_cache	core.h	/^    readonly_cache_c* get_texture_cache(void) { return m_texture_cache; }$/;"	f	class:core_c
get_thread_rob	rob_smc.cc	/^rob_c* smc_rob_c::get_thread_rob(int thread_id) $/;"	f	class:smc_rob_c
get_thread_rob_id	rob_smc.cc	/^int smc_rob_c::get_thread_rob_id(int thread_id) $/;"	f	class:smc_rob_c
get_total_insts_retired	retire.cc	/^Counter retire_c::get_total_insts_retired() $/;"	f	class:retire_c
get_trace_info	core.cc	/^thread_s* core_c::get_trace_info(int tid)$/;"	f	class:core_c
get_unique_uop_num	core.h	/^    Counter get_unique_uop_num() { return m_unique_uop_num; }$/;"	f	class:core_c
get_uop_pool	frontend.h	/^    pool_c<uop_c>* get_uop_pool() { return m_uop_pool; }$/;"	f	class:frontend_c
get_uops_from_traces	trace_read.cc	/^bool trace_read_c::get_uops_from_traces(int core_id, uop_c *uop, int sim_thread_id)$/;"	f	class:trace_read_c
get_uops_retired	retire.cc	/^Counter retire_c::get_uops_retired(int thread_id) $/;"	f	class:retire_c
get_write_port	port.cc	/^bool port_c::get_write_port (Counter cycle_count)$/;"	f	class:port_c
globalStats	statistics.cc	/^GlobalStatistics* ProcessorStatistics::globalStats()$/;"	f	class:ProcessorStatistics
global_unique_thread_id	process_manager.cc	/^static int global_unique_thread_id = 0;$/;"	v	file:
gpu_allocq_entry_s	allocate_smc.h	/^  gpu_allocq_entry_s() : m_thread_id(-1), m_rob_entry(-1)$/;"	f	struct:gpu_allocq_entry_s
gpu_allocq_entry_s	allocate_smc.h	/^  gpu_allocq_entry_s(int init_val) : m_thread_id(init_val), m_rob_entry(init_val)$/;"	f	struct:gpu_allocq_entry_s
gpu_allocq_entry_s	allocate_smc.h	/^typedef struct gpu_allocq_entry_s$/;"	s
gpu_allocq_entry_s	allocate_smc.h	/^} gpu_allocq_entry_s;$/;"	t	typeref:struct:gpu_allocq_entry_s
gpu_allocq_entry_s	global_defs.h	/^typedef struct gpu_allocq_entry_s gpu_allocq_entry_s; $/;"	t	typeref:struct:gpu_allocq_entry_s
handle_coherence	memory.cc	/^void memory_c::handle_coherence(int level, bool hit, bool store, Addr addr, dcu_c* cache)$/;"	f	class:memory_c
hash_c	utils.h	/^    hash_c() $/;"	f	class:hash_c
hash_c	utils.h	/^    hash_c(pool_c<T>* pool)$/;"	f	class:hash_c
hash_c	utils.h	/^    hash_c(string name)$/;"	f	class:hash_c
hash_c	utils.h	/^class hash_c$/;"	c
hash_table_access	utils.h	/^    T* hash_table_access(int64 key)$/;"	f	class:hash_c
hash_table_access_create	utils.h	/^    T* hash_table_access_create(int64 key, bool* new_entry)$/;"	f	class:hash_c
hash_table_access_create	utils.h	/^    T* hash_table_access_create(int64 key, bool* new_entry, macsim_c* simBase)$/;"	f	class:hash_c
hash_table_access_delete	utils.h	/^    bool hash_table_access_delete(int64 key)$/;"	f	class:hash_c
heartbeat_s	core.h	/^class heartbeat_s {$/;"	c
hexstr64	utils.cc	/^const char *hexstr64 (uns64 value)$/;"	f
hexstr64s	utils.cc	/^const char *hexstr64s (uns64 value)$/;"	f
hwp_common	pref.h	/^    hwp_common_c *hwp_common;   \/**< pointer to prefetcher framework *\/$/;"	m	class:pref_base_c
hwp_common_c	pref_common.cc	/^hwp_common_c::hwp_common_c()$/;"	f	class:hwp_common_c
hwp_common_c	pref_common.cc	/^hwp_common_c::hwp_common_c(int cid, Unit_Type type, macsim_c* simBase)$/;"	f	class:hwp_common_c
hwp_common_c	pref_common.h	/^class hwp_common_c $/;"	c
hwp_info	pref.h	/^    pref_info_s*  hwp_info;     \/**< prefetcher information structure *\/$/;"	m	class:pref_base_c
hwp_type	pref.h	/^    HWP_Type      hwp_type;     \/**< prefetcher type *\/$/;"	m	class:pref_base_c
hybrid_lastsent	pref_common.h	/^  Counter hybrid_lastsent;      \/**< This helps maintain a better indication of recent history *\/$/;"	m	struct:pref_info_s
hybrid_lastuseful	pref_common.h	/^  Counter hybrid_lastuseful;    \/**< used for Hybrid *\/$/;"	m	struct:pref_info_s
icache_data_c	frontend.h	/^class icache_data_c$/;"	c
icache_fill_line	frontend.cc	/^bool frontend_c::icache_fill_line(mem_req_s *req)$/;"	f	class:frontend_c
icache_fill_line_wrapper	frontend.cc	/^bool icache_fill_line_wrapper(mem_req_s *req)$/;"	f
id	pref_common.h	/^  uns8    id;                   \/**< This prefetcher's id *\/$/;"	m	struct:pref_info_s
inc	statistics.h	/^    inline void inc()$/;"	f	class:AbstractStat
inc	statistics.h	/^    inline void inc(unsigned int delta)$/;"	f	class:AbstractStat
inc_and_get_unique_uop_num	core.h	/^    Counter inc_and_get_unique_uop_num() { return ++m_unique_uop_num; }$/;"	f	class:core_c
inc_core_cycle_count	core.h	/^    void inc_core_cycle_count(void) { m_core_cycle_count++; }$/;"	f	class:core_c
inc_index	rob.h	/^    int inc_index(int index) $/;"	f	class:rob_c
index_table	pref_stride.h	/^    stride_index_table_entry_s  *index_table; \/**< prefetch table *\/$/;"	m	class:pref_stride_c
init	core.cc	/^void core_c::init(void)$/;"	f	class:core_c
init	dram.cc	/^void dram_controller_c::init(int id, int noc_id)$/;"	f	class:dram_controller_c
init	frontend.cc	/^void frontend_s::init()$/;"	f	class:frontend_s
init	memory.cc	/^void dcu_c::init(int next_id, int prev_id, bool done, bool coupled_up, bool coupled_down, \\$/;"	f	class:dcu_c
init	memory.cc	/^void memory_c::init(void)$/;"	f	class:memory_c
init	pref.h	/^    bool init;                  \/**< Enable init function *\/$/;"	m	class:pref_base_c
init	router.cc	/^void flit_c::init(void)$/;"	f	class:flit_c
init	router.cc	/^void router_c::init(int total_router, int* total_packet, pool_c<flit_c>* flit_pool, pool_c<credit_c>* credit_pool)$/;"	f	class:router_c
init	router.cc	/^void router_wrapper_c::init(void)$/;"	f	class:router_wrapper_c
init	uop.cc	/^void uop_c::init()$/;"	f	class:uop_c
initFromString	knob.h	/^    virtual void initFromString(const string& strVal)$/;"	f	class:KnobTemplate
init_clock_domain	macsim.cc	/^void macsim_c::init_clock_domain(void)$/;"	f	class:macsim_c
init_cores	macsim.cc	/^void macsim_c::init_cores(int num_max_core)$/;"	f	class:macsim_c
init_func	pref.h	/^    void init_func(int a) {}$/;"	f	class:pref_dummy_c
init_func	pref_stride.cc	/^void pref_stride_c::init_func(int core_id)$/;"	f	class:pref_stride_c
init_iris_config	macsim.cc	/^void macsim_c::init_iris_config(map<string, string> &params)  \/\/passed g_iris_params here$/;"	f	class:macsim_c
init_knobs	macsim.cc	/^void macsim_c::init_knobs(int argc, char** argv)$/;"	f	class:macsim_c
init_memory	macsim.cc	/^void macsim_c::init_memory(void)$/;"	f	class:macsim_c
init_mesh	router.cc	/^void router_wrapper_c::init_mesh(void)$/;"	f	class:router_wrapper_c
init_network	macsim.cc	/^void macsim_c::init_network(void)$/;"	f	class:macsim_c
init_new_req	memory.cc	/^void memory_c::init_new_req(mem_req_s* req, Mem_Req_Type type, Addr addr, int size, \\$/;"	f	class:memory_c
init_output_streams	macsim.cc	/^void macsim_c::init_output_streams()$/;"	f	class:macsim_c
init_per_core_stats	statistics.cc	/^void init_per_core_stats(unsigned num_cores, macsim_c* simBase)$/;"	f
init_pin_convert	trace_read.cc	/^void trace_read_c::init_pin_convert(void)$/;"	f	class:trace_read_c
init_port	port.cc	/^void port_c::init_port(string name, uns read, uns write, bool writes_prevent_reads)$/;"	f	class:port_c
init_ring	router.cc	/^void router_wrapper_c::init_ring(void)$/;"	f	class:router_wrapper_c
init_sim	macsim.cc	/^void macsim_c::init_sim(void)$/;"	f	class:macsim_c
init_simple_topology	router.cc	/^void router_wrapper_c::init_simple_topology(void)$/;"	f	class:router_wrapper_c
initialize	all_stats.cc	/^void all_stats_c::initialize(ProcessorStatistics* m_ProcessorStats, CoreStatistics* m_coreStatsTemplate) {$/;"	f	class:all_stats_c
initialize	macsim.cc	/^void macsim_c::initialize(int argc, char** argv) $/;"	f	class:macsim_c
initialize	map.cc	/^void map_data_c::initialize()$/;"	f	class:map_data_c
initialize_cache_line	cache.cc	/^void cache_c::initialize_cache_line(cache_entry_c *ins_line, Addr tag, Addr addr, int appl_id,$/;"	f	class:cache_c
inject_packet	router.cc	/^bool router_c::inject_packet(mem_req_s* req)$/;"	f	class:router_c
insert	memory.cc	/^bool dcu_c::insert(mem_req_s* req)$/;"	f	class:dcu_c
insert	noc.cc	/^bool noc_c::insert(int src, int dst, int msg, mem_req_s* req)$/;"	f	class:noc_c
insert	utils.cc	/^int multi_key_map_c::insert(int key1, int key2)$/;"	f	class:multi_key_map_c
insertKnob	knob.cc	/^void KnobsContainer::insertKnob(abstract_knob_c* pKnob)$/;"	f	class:KnobsContainer
insert_block	process_manager.cc	/^void process_manager_c::insert_block(thread_trace_info_node_s *incoming)$/;"	f	class:process_manager_c
insert_cache	cache.cc	/^void *cache_c::insert_cache(Addr addr, Addr *line_addr, Addr *updated_line, int appl_id,$/;"	f	class:cache_c
insert_credit	router.cc	/^void router_c::insert_credit(credit_c* credit)$/;"	f	class:router_c
insert_into_router_req_buffer	router.cc	/^void router_wrapper_c::insert_into_router_req_buffer(int router_id, mem_req_s *req)$/;"	f	class:router_wrapper_c
insert_new_req	dram.cc	/^bool dram_controller_c::insert_new_req(mem_req_s* mem_req)$/;"	f	class:dram_controller_c
insert_packet	router.cc	/^void router_c::insert_packet(flit_c* flit, int port, int vc)$/;"	f	class:router_c
insert_req_in_drb	dram.cc	/^void dram_controller_c::insert_req_in_drb(mem_req_s* mem_req, int bid, int rid, int cid)$/;"	f	class:dram_controller_c
insert_thread	process_manager.cc	/^void process_manager_c::insert_thread(thread_trace_info_node_s *incoming)$/;"	f	class:process_manager_c
inst_info_s	inst_info.h	/^    inst_info_s()$/;"	f	class:inst_info_s
inst_info_s	inst_info.h	/^class inst_info_s$/;"	c
instance	fetch_factory.cc	/^fetch_factory_c *fetch_factory_c::instance = 0;$/;"	m	class:fetch_factory_c	file:
instance	fetch_factory.h	/^    static fetch_factory_c *instance; \/**< singleton fetch factory object *\/$/;"	m	class:fetch_factory_c
instance	pref_factory.cc	/^pref_factory_c *pref_factory_c::instance = 0;$/;"	m	class:pref_factory_c	file:
instance	pref_factory.h	/^    static pref_factory_c *instance; \/**< Singleton factory *\/$/;"	m	class:pref_factory_c
int16	global_types.h	/^typedef short              int16;$/;"	t
int32	global_types.h	/^typedef int                int32;$/;"	t
int64	global_types.h	/^typedef int long long      int64;$/;"	t
int8	global_types.h	/^typedef char               int8;$/;"	t
intstr64	utils.cc	/^const char *intstr64 (int64 value)$/;"	f
invalidate_cache	cache.cc	/^void cache_c::invalidate_cache(void) $/;"	f	class:cache_c
invalidate_cache_line	cache.cc	/^bool cache_c::invalidate_cache_line(Addr addr)$/;"	f	class:cache_c
invertbit	map.cc	65;"	d	file:
is_running	allocate.h	/^    bool is_running() $/;"	f	class:allocate_c
is_running	allocate_smc.h	/^    bool is_running() $/;"	f	class:smc_allocate_c
is_running	frontend.h	/^    bool is_running() { return m_fe_running; }$/;"	f	class:frontend_c
is_running	retire.cc	/^bool retire_c::is_running()$/;"	f	class:retire_c
is_running	schedule.cc	/^bool schedule_c::is_running()$/;"	f	class:schedule_c
is_sfu_inst	schedule_smc.cc	/^bool schedule_smc_c::is_sfu_inst(uop_c *uop) {$/;"	f	class:schedule_smc_c
k_trace_buffer_size	trace_read.h	/^    static const int k_trace_buffer_size = 1000; \/**< maximum buffer size *\/$/;"	m	class:trace_read_c
knob_enable	pref.h	/^    bool          knob_enable;  \/**< enable prefetcher *\/$/;"	m	class:pref_base_c
knob_num_threads	schedule_smc.h	/^    int knob_num_threads; \/**< number of maximum thread per core *\/$/;"	m	class:schedule_smc_c
knob_ptx_sim	pref_common.h	/^    bool knob_ptx_sim; \/**< GPU simulation *\/$/;"	m	class:hwp_common_c
l1_hit	pref.h	/^    bool l1_hit;               \/**< Enable L1 hit handler *\/$/;"	m	class:pref_base_c
l1_hit_func	pref.h	/^    void l1_hit_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l1_hit_func	pref_stride.cc	/^void pref_stride_c::l1_hit_func(int tid, Addr lineAddr, Addr loadPC, uop_c *uop)$/;"	f	class:pref_stride_c
l1_miss	pref.h	/^    bool l1_miss;              \/**< Enable L1 miss handler *\/$/;"	m	class:pref_base_c
l1_miss_func	pref.h	/^    void l1_miss_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l1_miss_func	pref_stride.cc	/^void pref_stride_c::l1_miss_func(int tid, Addr lineAddr, Addr loadPC, uop_c *uop)$/;"	f	class:pref_stride_c
l1_pref_hit	pref.h	/^    bool l1_pref_hit;          \/**< Enable L1 prefetch hit handler *\/$/;"	m	class:pref_base_c
l1_pref_hit_func	pref.h	/^    void l1_pref_hit_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l1_pref_hit_func	pref_stride.h	/^    void l1_pref_hit_func(int, Addr, Addr, uop_c *) {}$/;"	f	class:pref_stride_c
l2_coupled_local_c	memory.cc	/^l2_coupled_local_c::l2_coupled_local_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:l2_coupled_local_c
l2_coupled_local_c	memory.h	/^class l2_coupled_local_c : public memory_c$/;"	c
l2_data_s	global_defs.h	/^typedef struct l2_data_s l2_data_s;$/;"	t	typeref:struct:l2_data_s
l2_decoupled_local_c	memory.cc	/^l2_decoupled_local_c::l2_decoupled_local_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:l2_decoupled_local_c
l2_decoupled_local_c	memory.h	/^class l2_decoupled_local_c : public memory_c$/;"	c
l2_decoupled_network_c	memory.cc	/^l2_decoupled_network_c::l2_decoupled_network_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:l2_decoupled_network_c
l2_decoupled_network_c	memory.h	/^class l2_decoupled_network_c : public memory_c$/;"	c
l2_evict	pref_common.h	/^  bool    l2_evict;    \/**< Was this line evicted *\/$/;"	m	struct:pref_region_line_status_s
l2_hit	pref.h	/^    bool l2_hit;               \/**< Enable L2 hit handler *\/$/;"	m	class:pref_base_c
l2_hit	pref_common.h	/^  bool    l2_hit;      \/**< Was this line a hit in the cache *\/$/;"	m	struct:pref_region_line_status_s
l2_hit_func	pref.h	/^    void l2_hit_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l2_hit_func	pref_stride.cc	/^void pref_stride_c::l2_hit_func(int tid, Addr lineAddr, Addr loadPC, uop_c *uop)$/;"	f	class:pref_stride_c
l2_miss	pref.h	/^    bool l2_miss;              \/**< Enable L2 miss handler *\/$/;"	m	class:pref_base_c
l2_miss	pref_common.h	/^  bool    l2_miss;     \/**< Was this line a miss in the cache *\/$/;"	m	struct:pref_region_line_status_s
l2_miss_func	pref.h	/^    void l2_miss_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l2_miss_func	pref_stride.cc	/^void pref_stride_c::l2_miss_func(int tid, Addr lineAddr, Addr loadPC, uop_c *uop)$/;"	f	class:pref_stride_c
l2_pref_hit	pref.h	/^    bool l2_pref_hit;          \/**< Enable L2 prefetch hit handler *\/$/;"	m	class:pref_base_c
l2_pref_hit_func	pref.h	/^    void l2_pref_hit_func(int a, Addr b, Addr c, uop_c *d) {}$/;"	f	class:pref_dummy_c
l2_pref_hit_func	pref_stride.h	/^    void l2_pref_hit_func(int, Addr, Addr, uop_c *) {}$/;"	f	class:pref_stride_c
l3_coupled_network_c	memory.cc	/^l3_coupled_network_c::l3_coupled_network_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:l3_coupled_network_c
l3_coupled_network_c	memory.h	/^class l3_coupled_network_c : public memory_c$/;"	c
l3_decoupled_network_c	memory.cc	/^l3_decoupled_network_c::l3_decoupled_network_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:l3_decoupled_network_c
l3_decoupled_network_c	memory.h	/^class l3_decoupled_network_c : public memory_c$/;"	c
last_access	pref_common.h	/^  Counter last_access; \/**< last access cycle *\/$/;"	m	struct:pref_region_info_s
last_access	pref_stride.h	/^  uns  last_access; \/**< lru *\/$/;"	m	struct:stride_region_table_entry_struct
last_index	pref_stride.h	/^  Addr    last_index; \/**< last index *\/$/;"	m	struct:stride_index_table_entry_struct
last_rob	rob.h	/^    int last_rob() $/;"	f	class:rob_c
late	pref_common.h	/^  Counter late;                 \/**< num of late prefetches *\/$/;"	m	struct:pref_info_s
line_addr	pref_common.h	/^  Addr line_addr;               \/**< line address *\/$/;"	m	struct:pref_mem_req_s
line_index	pref_common.h	/^  Addr line_index;              \/**< line index *\/$/;"	m	struct:pref_mem_req_s
line_size	memory.cc	/^int dcu_c::line_size()$/;"	f	class:dcu_c
line_size	memory.cc	/^int memory_c::line_size(int core_id)$/;"	f	class:memory_c
load	readonly_cache.cc	/^int readonly_cache_c::load(uop_c *uop)$/;"	f	class:readonly_cache_c
load	sw_managed_cache.cc	/^int sw_managed_cache_c::load(uop_c *uop)$/;"	f	class:sw_managed_cache_c
loadPC	pref_common.h	/^  Addr loadPC;                  \/**< load pc *\/$/;"	m	struct:pref_mem_req_s
local_packet_injection	router.cc	/^void router_c::local_packet_injection(void)$/;"	f	class:router_c
log2_int	utils.cc	/^uns log2_int (uns n)$/;"	f
log_file	macsim.h	/^		FILE* log_file; \/**< log file used by IRIS *\/$/;"	m	class:macsim_c
ltstr_s	knob.h	/^struct ltstr_s$/;"	s
m_ABIP_AVG_RATIO	all_stats.h	/^		RATIO_Stat* m_ABIP_AVG_RATIO;$/;"	m	class:all_stats_c
m_ABIP_AVG_RATIO_BASE	all_stats.h	/^		COUNT_Stat* m_ABIP_AVG_RATIO_BASE;$/;"	m	class:all_stats_c
m_ALLOC_COUNT	all_stats.h	/^		COUNT_Stat* m_ALLOC_COUNT;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT0	all_stats.h	/^		RATIO_Stat* m_APPL_CYC_COUNT0;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT1	all_stats.h	/^		RATIO_Stat* m_APPL_CYC_COUNT1;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT2	all_stats.h	/^		RATIO_Stat* m_APPL_CYC_COUNT2;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT3	all_stats.h	/^		RATIO_Stat* m_APPL_CYC_COUNT3;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT4	all_stats.h	/^		RATIO_Stat* m_APPL_CYC_COUNT4;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT_BASE0	all_stats.h	/^		COUNT_Stat* m_APPL_CYC_COUNT_BASE0;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT_BASE1	all_stats.h	/^		COUNT_Stat* m_APPL_CYC_COUNT_BASE1;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT_BASE2	all_stats.h	/^		COUNT_Stat* m_APPL_CYC_COUNT_BASE2;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT_BASE3	all_stats.h	/^		COUNT_Stat* m_APPL_CYC_COUNT_BASE3;$/;"	m	class:all_stats_c
m_APPL_CYC_COUNT_BASE4	all_stats.h	/^		COUNT_Stat* m_APPL_CYC_COUNT_BASE4;$/;"	m	class:all_stats_c
m_AVG_BLOCK_EXE_CYCLE	all_stats.h	/^		COUNT_Stat* m_AVG_BLOCK_EXE_CYCLE;$/;"	m	class:all_stats_c
m_AVG_BLOCK_EXE_CYCLE_BASE	all_stats.h	/^		COUNT_Stat* m_AVG_BLOCK_EXE_CYCLE_BASE;$/;"	m	class:all_stats_c
m_AVG_CORE_IDLE_CYCLE	all_stats.h	/^		COUNT_Stat* m_AVG_CORE_IDLE_CYCLE;$/;"	m	class:all_stats_c
m_AVG_MEMORY_LATENCY	all_stats.h	/^		RATIO_Stat* m_AVG_MEMORY_LATENCY;$/;"	m	class:all_stats_c
m_AVG_MEMORY_LATENCY_BASE	all_stats.h	/^		COUNT_Stat* m_AVG_MEMORY_LATENCY_BASE;$/;"	m	class:all_stats_c
m_AllStatsOutputStreams	macsim.h	/^		map<string, ofstream*> m_AllStatsOutputStreams; \/**< stat output streams *\/$/;"	m	class:macsim_c
m_BANDWIDTH_TOT	all_stats.h	/^		COUNT_Stat* m_BANDWIDTH_TOT;$/;"	m	class:all_stats_c
m_BP_MISPRED_STALL	all_stats.h	/^		COUNT_Stat* m_BP_MISPRED_STALL;$/;"	m	class:all_stats_c
m_BP_OFF_PATH_CORRECT	all_stats.h	/^		COUNT_Stat* m_BP_OFF_PATH_CORRECT;$/;"	m	class:all_stats_c
m_BP_OFF_PATH_MISFETCH	all_stats.h	/^		COUNT_Stat* m_BP_OFF_PATH_MISFETCH;$/;"	m	class:all_stats_c
m_BP_OFF_PATH_MISPREDICT	all_stats.h	/^		COUNT_Stat* m_BP_OFF_PATH_MISPREDICT;$/;"	m	class:all_stats_c
m_BP_ON_PATH_CORRECT	all_stats.h	/^		COUNT_Stat* m_BP_ON_PATH_CORRECT;$/;"	m	class:all_stats_c
m_BP_ON_PATH_MISFETCH	all_stats.h	/^		COUNT_Stat* m_BP_ON_PATH_MISFETCH;$/;"	m	class:all_stats_c
m_BP_ON_PATH_MISPREDICT	all_stats.h	/^		COUNT_Stat* m_BP_ON_PATH_MISPREDICT;$/;"	m	class:all_stats_c
m_BP_REDIRECT_RESOLVED	all_stats.h	/^		COUNT_Stat* m_BP_REDIRECT_RESOLVED;$/;"	m	class:all_stats_c
m_BP_RESOLVED	all_stats.h	/^		COUNT_Stat* m_BP_RESOLVED;$/;"	m	class:all_stats_c
m_CACHE_BANK_BUSY	all_stats.h	/^		COUNT_Stat* m_CACHE_BANK_BUSY;$/;"	m	class:all_stats_c
m_CM_COAL_INST	all_stats.h	/^		COUNT_Stat* m_CM_COAL_INST;$/;"	m	class:all_stats_c
m_CM_COAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_CM_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_CM_COAL_INST_SINGLE_TRANS	all_stats.h	/^		COUNT_Stat* m_CM_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_CM_UNCOAL_INST	all_stats.h	/^		COUNT_Stat* m_CM_UNCOAL_INST;$/;"	m	class:all_stats_c
m_COAL_INST	all_stats.h	/^		COUNT_Stat* m_COAL_INST;$/;"	m	class:all_stats_c
m_COAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_COAL_INST_SINGLE_TRANS	all_stats.h	/^		COUNT_Stat* m_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_CONST_CACHE_ACCESS	all_stats.h	/^		COUNT_Stat* m_CONST_CACHE_ACCESS;$/;"	m	class:all_stats_c
m_CONST_CACHE_HIT	all_stats.h	/^		COUNT_Stat* m_CONST_CACHE_HIT;$/;"	m	class:all_stats_c
m_CONST_CACHE_MISS	all_stats.h	/^		COUNT_Stat* m_CONST_CACHE_MISS;$/;"	m	class:all_stats_c
m_CONST_CACHE_MISS_NO_EXECUTE	all_stats.h	/^		COUNT_Stat* m_CONST_CACHE_MISS_NO_EXECUTE;$/;"	m	class:all_stats_c
m_CORE_CYCLES	all_stats.h	/^		COUNT_Stat* m_CORE_CYCLES;$/;"	m	class:all_stats_c
m_CORE_DISPATCHED_INST	all_stats.h	/^		COUNT_Stat* m_CORE_DISPATCHED_INST;$/;"	m	class:all_stats_c
m_CORE_DISPATCH_WAIT	all_stats.h	/^		RATIO_Stat* m_CORE_DISPATCH_WAIT;$/;"	m	class:all_stats_c
m_CORE_FETCH_DELTA	all_stats.h	/^		RATIO_Stat* m_CORE_FETCH_DELTA;$/;"	m	class:all_stats_c
m_CORE_NUM_FETCH_CYCLES	all_stats.h	/^		COUNT_Stat* m_CORE_NUM_FETCH_CYCLES;$/;"	m	class:all_stats_c
m_CORE_NUM_NO_FETCH_CYCLES	all_stats.h	/^		COUNT_Stat* m_CORE_NUM_NO_FETCH_CYCLES;$/;"	m	class:all_stats_c
m_CORE_NUM_NO_FETCH_CYCLES_WITH_READY_THREADS	all_stats.h	/^		COUNT_Stat* m_CORE_NUM_NO_FETCH_CYCLES_WITH_READY_THREADS;$/;"	m	class:all_stats_c
m_CORE_NUM_RETIRE_CYCLES	all_stats.h	/^		COUNT_Stat* m_CORE_NUM_RETIRE_CYCLES;$/;"	m	class:all_stats_c
m_CORE_RETIRE_DELTA	all_stats.h	/^		RATIO_Stat* m_CORE_RETIRE_DELTA;$/;"	m	class:all_stats_c
m_CORE_SCHED_THREADS	all_stats.h	/^		RATIO_Stat* m_CORE_SCHED_THREADS;$/;"	m	class:all_stats_c
m_CPI_DELTA0	all_stats.h	/^		RATIO_Stat* m_CPI_DELTA0;$/;"	m	class:all_stats_c
m_CPI_DELTA1	all_stats.h	/^		RATIO_Stat* m_CPI_DELTA1;$/;"	m	class:all_stats_c
m_CPI_DELTA2	all_stats.h	/^		RATIO_Stat* m_CPI_DELTA2;$/;"	m	class:all_stats_c
m_CPI_DELTA3	all_stats.h	/^		RATIO_Stat* m_CPI_DELTA3;$/;"	m	class:all_stats_c
m_CPI_DELTA4	all_stats.h	/^		RATIO_Stat* m_CPI_DELTA4;$/;"	m	class:all_stats_c
m_CPI_DELTA_BASE0	all_stats.h	/^		COUNT_Stat* m_CPI_DELTA_BASE0;$/;"	m	class:all_stats_c
m_CPI_DELTA_BASE1	all_stats.h	/^		COUNT_Stat* m_CPI_DELTA_BASE1;$/;"	m	class:all_stats_c
m_CPI_DELTA_BASE2	all_stats.h	/^		COUNT_Stat* m_CPI_DELTA_BASE2;$/;"	m	class:all_stats_c
m_CPI_DELTA_BASE3	all_stats.h	/^		COUNT_Stat* m_CPI_DELTA_BASE3;$/;"	m	class:all_stats_c
m_CPI_DELTA_BASE4	all_stats.h	/^		COUNT_Stat* m_CPI_DELTA_BASE4;$/;"	m	class:all_stats_c
m_CYCLE_CPU	all_stats.h	/^		COUNT_Stat* m_CYCLE_CPU;$/;"	m	class:all_stats_c
m_CYCLE_GPU	all_stats.h	/^		COUNT_Stat* m_CYCLE_GPU;$/;"	m	class:all_stats_c
m_CYC_COUNT	all_stats.h	/^		COUNT_Stat* m_CYC_COUNT;$/;"	m	class:all_stats_c
m_CYC_COUNT_PTX	all_stats.h	/^		COUNT_Stat* m_CYC_COUNT_PTX;$/;"	m	class:all_stats_c
m_CYC_COUNT_TOT	all_stats.h	/^		COUNT_Stat* m_CYC_COUNT_TOT;$/;"	m	class:all_stats_c
m_CYC_COUNT_X86	all_stats.h	/^		COUNT_Stat* m_CYC_COUNT_X86;$/;"	m	class:all_stats_c
m_CoreStats	statistics.h	/^    vector<AbstractStat*> m_CoreStats; \/**< core stats *\/$/;"	m	class:CoreStatistics
m_DCACHE_PREF_HIT	all_stats.h	/^		COUNT_Stat* m_DCACHE_PREF_HIT;$/;"	m	class:all_stats_c
m_DEMAND_L2_FILL	all_stats.h	/^		COUNT_Stat* m_DEMAND_L2_FILL;$/;"	m	class:all_stats_c
m_DEMAND_LAST_SCHEDULE	all_stats.h	/^		COUNT_Stat* m_DEMAND_LAST_SCHEDULE;$/;"	m	class:all_stats_c
m_DEMAND_PASS_LOW_OP_SCHEDULE	all_stats.h	/^		COUNT_Stat* m_DEMAND_PASS_LOW_OP_SCHEDULE;$/;"	m	class:all_stats_c
m_DEMAND_PASS_PREF_SCHEDULE	all_stats.h	/^		COUNT_Stat* m_DEMAND_PASS_PREF_SCHEDULE;$/;"	m	class:all_stats_c
m_DISPATCHED_INST	all_stats.h	/^		COUNT_Stat* m_DISPATCHED_INST;$/;"	m	class:all_stats_c
m_DISPATCH_WAIT	all_stats.h	/^		RATIO_Stat* m_DISPATCH_WAIT;$/;"	m	class:all_stats_c
m_DIST_BP_OFF_PATH_CORRECT	all_stats.h	/^		DIST_Stat* m_DIST_BP_OFF_PATH_CORRECT;$/;"	m	class:all_stats_c
m_DIST_BP_ON_PATH_CORRECT	all_stats.h	/^		DIST_Stat* m_DIST_BP_ON_PATH_CORRECT;$/;"	m	class:all_stats_c
m_DIST_COAL_INST	all_stats.h	/^		DIST_Stat* m_DIST_COAL_INST;$/;"	m	class:all_stats_c
m_DIST_COAL_INST_SINGLE_TRANS	all_stats.h	/^		DIST_Stat* m_DIST_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_DIST_HIT_TRAIN_STREAM	all_stats.h	/^		DIST_Stat* m_DIST_HIT_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_DIST_ICACHE_HIT	all_stats.h	/^		DIST_Stat* m_DIST_ICACHE_HIT;$/;"	m	class:all_stats_c
m_DIST_IFETCH_WB_FIRST_SCHEDULE	all_stats.h	/^		DIST_Stat* m_DIST_IFETCH_WB_FIRST_SCHEDULE;$/;"	m	class:all_stats_c
m_DIST_L2HIT_HIT_TRAIN_STREAM	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_HIT_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_DIST_L2HIT_L2SEND_Q_FULL	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_L2SEND_Q_FULL;$/;"	m	class:all_stats_c
m_DIST_L2HIT_PREF_REQ_DCACHE_HIT	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_PREF_REQ_DCACHE_HIT;$/;"	m	class:all_stats_c
m_DIST_L2HIT_STREAM_PREF_DCACHE_HIT	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_STREAM_PREF_DCACHE_HIT;$/;"	m	class:all_stats_c
m_DIST_L2HIT_TRAIN_FILTER_MISS	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_TRAIN_FILTER_MISS;$/;"	m	class:all_stats_c
m_DIST_L2HIT_TRAIN_HIT_DEMAND	all_stats.h	/^		DIST_Stat* m_DIST_L2HIT_TRAIN_HIT_DEMAND;$/;"	m	class:all_stats_c
m_DIST_LD_NO_FORWARD	all_stats.h	/^		DIST_Stat* m_DIST_LD_NO_FORWARD;$/;"	m	class:all_stats_c
m_DIST_MEM_REQ_MISS_HWP_PREF_Q	all_stats.h	/^		DIST_Stat* m_DIST_MEM_REQ_MISS_HWP_PREF_Q;$/;"	m	class:all_stats_c
m_DIST_OP_CAT_INVALID	all_stats.h	/^		DIST_Stat* m_DIST_OP_CAT_INVALID;$/;"	m	class:all_stats_c
m_DIST_PREF_ACC1_HT_HP	all_stats.h	/^		DIST_Stat* m_DIST_PREF_ACC1_HT_HP;$/;"	m	class:all_stats_c
m_DIST_PREF_ACC_1	all_stats.h	/^		DIST_Stat* m_DIST_PREF_ACC_1;$/;"	m	class:all_stats_c
m_DIST_PREF_DISTANCE_1	all_stats.h	/^		DIST_Stat* m_DIST_PREF_DISTANCE_1;$/;"	m	class:all_stats_c
m_DIST_PREF_HIT_BY_DEMAND_IFETCH	all_stats.h	/^		DIST_Stat* m_DIST_PREF_HIT_BY_DEMAND_IFETCH;$/;"	m	class:all_stats_c
m_DIST_PREF_HIT_DEMAND_IFETCH	all_stats.h	/^		DIST_Stat* m_DIST_PREF_HIT_DEMAND_IFETCH;$/;"	m	class:all_stats_c
m_DIST_PREF_HYBRID_SEL_0	all_stats.h	/^		DIST_Stat* m_DIST_PREF_HYBRID_SEL_0;$/;"	m	class:all_stats_c
m_DIST_PREF_L2_FILL	all_stats.h	/^		DIST_Stat* m_DIST_PREF_L2_FILL;$/;"	m	class:all_stats_c
m_DIST_PREF_POL_1	all_stats.h	/^		DIST_Stat* m_DIST_PREF_POL_1;$/;"	m	class:all_stats_c
m_DIST_PREF_SEND_TO_MEM_REQ	all_stats.h	/^		DIST_Stat* m_DIST_PREF_SEND_TO_MEM_REQ;$/;"	m	class:all_stats_c
m_DIST_PREF_TIMELY_1	all_stats.h	/^		DIST_Stat* m_DIST_PREF_TIMELY_1;$/;"	m	class:all_stats_c
m_DIST_SCHED_FAILED_REASON_SUCCESS	all_stats.h	/^		DIST_Stat* m_DIST_SCHED_FAILED_REASON_SUCCESS;$/;"	m	class:all_stats_c
m_DIST_SM_COAL_INST	all_stats.h	/^		DIST_Stat* m_DIST_SM_COAL_INST;$/;"	m	class:all_stats_c
m_DIST_SM_COAL_INST_MUL_TRANS	all_stats.h	/^		DIST_Stat* m_DIST_SM_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_DIST_SM_COAL_INST_SINGLE_TRANS	all_stats.h	/^		DIST_Stat* m_DIST_SM_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_DIST_SM_UNCOAL_INST	all_stats.h	/^		DIST_Stat* m_DIST_SM_UNCOAL_INST;$/;"	m	class:all_stats_c
m_DIST_STREAM_LENGTH_0	all_stats.h	/^		DIST_Stat* m_DIST_STREAM_LENGTH_0;$/;"	m	class:all_stats_c
m_DM_COAL_INST	all_stats.h	/^		COUNT_Stat* m_DM_COAL_INST;$/;"	m	class:all_stats_c
m_DM_COAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_DM_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_DM_COAL_INST_SINGLE_TRANS	all_stats.h	/^		COUNT_Stat* m_DM_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_DM_UNCOAL_INST	all_stats.h	/^		COUNT_Stat* m_DM_UNCOAL_INST;$/;"	m	class:all_stats_c
m_DRAM_ACTIVATE	all_stats.h	/^		COUNT_Stat* m_DRAM_ACTIVATE;$/;"	m	class:all_stats_c
m_DRAM_AVG_LATENCY	all_stats.h	/^		RATIO_Stat* m_DRAM_AVG_LATENCY;$/;"	m	class:all_stats_c
m_DRAM_AVG_LATENCY_BASE	all_stats.h	/^		COUNT_Stat* m_DRAM_AVG_LATENCY_BASE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL0_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL0_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL0_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL0_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL1_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL1_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL1_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL1_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL2_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL2_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL2_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL2_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL3_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL3_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL3_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL3_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL4_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL4_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL4_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL4_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL5_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL5_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL5_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL5_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL6_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL6_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL6_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL6_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL7_BANDWIDTH_SATURATED	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL7_BANDWIDTH_SATURATED;$/;"	m	class:all_stats_c
m_DRAM_CHANNEL7_DBUS_IDLE	all_stats.h	/^		COUNT_Stat* m_DRAM_CHANNEL7_DBUS_IDLE;$/;"	m	class:all_stats_c
m_DRAM_COLUMN	all_stats.h	/^		COUNT_Stat* m_DRAM_COLUMN;$/;"	m	class:all_stats_c
m_DRAM_PRECHARGE	all_stats.h	/^		COUNT_Stat* m_DRAM_PRECHARGE;$/;"	m	class:all_stats_c
m_EXE_TIME	all_stats.h	/^		COUNT_Stat* m_EXE_TIME;$/;"	m	class:all_stats_c
m_FETCH_THREAD_SKIP_BR_WAIT	all_stats.h	/^		COUNT_Stat* m_FETCH_THREAD_SKIP_BR_WAIT;$/;"	m	class:all_stats_c
m_FETCH_THREAD_SKIP_LD_WAIT	all_stats.h	/^		COUNT_Stat* m_FETCH_THREAD_SKIP_LD_WAIT;$/;"	m	class:all_stats_c
m_FETCH_THREAD_SKIP_SCHED_WAIT	all_stats.h	/^		COUNT_Stat* m_FETCH_THREAD_SKIP_SCHED_WAIT;$/;"	m	class:all_stats_c
m_FILE_OPEN_ERROR	all_stats.h	/^		COUNT_Stat* m_FILE_OPEN_ERROR;$/;"	m	class:all_stats_c
m_FORWARDED_LD	all_stats.h	/^		COUNT_Stat* m_FORWARDED_LD;$/;"	m	class:all_stats_c
m_FP_OPS	all_stats.h	/^		COUNT_Stat* m_FP_OPS;$/;"	m	class:all_stats_c
m_FP_OPS_TOT	all_stats.h	/^		COUNT_Stat* m_FP_OPS_TOT;$/;"	m	class:all_stats_c
m_HIT_TRAIN_STREAM	all_stats.h	/^		COUNT_Stat* m_HIT_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_ICACHE_FILL	all_stats.h	/^		COUNT_Stat* m_ICACHE_FILL;$/;"	m	class:all_stats_c
m_ICACHE_HIT	all_stats.h	/^		COUNT_Stat* m_ICACHE_HIT;$/;"	m	class:all_stats_c
m_ICACHE_MISS	all_stats.h	/^		COUNT_Stat* m_ICACHE_MISS;$/;"	m	class:all_stats_c
m_ICACHE_MISS_TOTAL	all_stats.h	/^		COUNT_Stat* m_ICACHE_MISS_TOTAL;$/;"	m	class:all_stats_c
m_ID	statistics.h	/^    long m_ID; \/**< stat id *\/$/;"	m	class:AbstractStat
m_IFETCH_WB_FIRST_SCHEDULE	all_stats.h	/^		COUNT_Stat* m_IFETCH_WB_FIRST_SCHEDULE;$/;"	m	class:all_stats_c
m_INST_COUNT	all_stats.h	/^		COUNT_Stat* m_INST_COUNT;$/;"	m	class:all_stats_c
m_INST_COUNT_TOT	all_stats.h	/^		COUNT_Stat* m_INST_COUNT_TOT;$/;"	m	class:all_stats_c
m_L1_HIT_CPU	all_stats.h	/^		COUNT_Stat* m_L1_HIT_CPU;$/;"	m	class:all_stats_c
m_L1_HIT_GPU	all_stats.h	/^		COUNT_Stat* m_L1_HIT_GPU;$/;"	m	class:all_stats_c
m_L1_MISS_CPU	all_stats.h	/^		COUNT_Stat* m_L1_MISS_CPU;$/;"	m	class:all_stats_c
m_L1_MISS_GPU	all_stats.h	/^		COUNT_Stat* m_L1_MISS_GPU;$/;"	m	class:all_stats_c
m_L1_WB	all_stats.h	/^		RATIO_Stat* m_L1_WB;$/;"	m	class:all_stats_c
m_L2HIT_HIT_TRAIN_STREAM	all_stats.h	/^		COUNT_Stat* m_L2HIT_HIT_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_L2HIT_L2SEND_Q_ENTER	all_stats.h	/^		COUNT_Stat* m_L2HIT_L2SEND_Q_ENTER;$/;"	m	class:all_stats_c
m_L2HIT_L2SEND_Q_FULL	all_stats.h	/^		COUNT_Stat* m_L2HIT_L2SEND_Q_FULL;$/;"	m	class:all_stats_c
m_L2HIT_MEM_REQ	all_stats.h	/^		COUNT_Stat* m_L2HIT_MEM_REQ;$/;"	m	class:all_stats_c
m_L2HIT_MISS_TRAIN_STREAM	all_stats.h	/^		COUNT_Stat* m_L2HIT_MISS_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_L2HIT_PREF_REQ_DCACHE_HIT	all_stats.h	/^		COUNT_Stat* m_L2HIT_PREF_REQ_DCACHE_HIT;$/;"	m	class:all_stats_c
m_L2HIT_PREF_REQ_DCACHE_MISS	all_stats.h	/^		COUNT_Stat* m_L2HIT_PREF_REQ_DCACHE_MISS;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_BUFFER_REQ	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_BUFFER_REQ;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_DCACHE_PORT_FULL	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_DCACHE_PORT_FULL;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_L2_MISS	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_L2_MISS;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_PREF_DCACHE_HIT	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_PREF_DCACHE_HIT;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_PREF_DCACHE_INSERT	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_PREF_DCACHE_INSERT;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_PREF_L2_PORT_FULL	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_PREF_L2_PORT_FULL;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_PREF_REQ_QUE_FULL	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_PREF_REQ_QUE_FULL;$/;"	m	class:all_stats_c
m_L2HIT_STREAM_TRAIN_CREATE	all_stats.h	/^		COUNT_Stat* m_L2HIT_STREAM_TRAIN_CREATE;$/;"	m	class:all_stats_c
m_L2HIT_TRAIN_FILTER_HIT	all_stats.h	/^		COUNT_Stat* m_L2HIT_TRAIN_FILTER_HIT;$/;"	m	class:all_stats_c
m_L2HIT_TRAIN_FILTER_MISS	all_stats.h	/^		COUNT_Stat* m_L2HIT_TRAIN_FILTER_MISS;$/;"	m	class:all_stats_c
m_L2HIT_TRAIN_HIT_DEMAND	all_stats.h	/^		COUNT_Stat* m_L2HIT_TRAIN_HIT_DEMAND;$/;"	m	class:all_stats_c
m_L2HIT_TRAIN_MISS_REQ	all_stats.h	/^		COUNT_Stat* m_L2HIT_TRAIN_MISS_REQ;$/;"	m	class:all_stats_c
m_L2_HIT_CPU	all_stats.h	/^		COUNT_Stat* m_L2_HIT_CPU;$/;"	m	class:all_stats_c
m_L2_HIT_GPU	all_stats.h	/^		COUNT_Stat* m_L2_HIT_GPU;$/;"	m	class:all_stats_c
m_L2_MISS_CPU	all_stats.h	/^		COUNT_Stat* m_L2_MISS_CPU;$/;"	m	class:all_stats_c
m_L2_MISS_GPU	all_stats.h	/^		COUNT_Stat* m_L2_MISS_GPU;$/;"	m	class:all_stats_c
m_L2_WB	all_stats.h	/^		RATIO_Stat* m_L2_WB;$/;"	m	class:all_stats_c
m_L3_HIT_CPU	all_stats.h	/^		COUNT_Stat* m_L3_HIT_CPU;$/;"	m	class:all_stats_c
m_L3_HIT_GPU	all_stats.h	/^		COUNT_Stat* m_L3_HIT_GPU;$/;"	m	class:all_stats_c
m_L3_HIT_PROMOTION_CPU	all_stats.h	/^		COUNT_Stat* m_L3_HIT_PROMOTION_CPU;$/;"	m	class:all_stats_c
m_L3_HIT_PROMOTION_GPU	all_stats.h	/^		COUNT_Stat* m_L3_HIT_PROMOTION_GPU;$/;"	m	class:all_stats_c
m_L3_MISS_CPU	all_stats.h	/^		COUNT_Stat* m_L3_MISS_CPU;$/;"	m	class:all_stats_c
m_L3_MISS_GPU	all_stats.h	/^		COUNT_Stat* m_L3_MISS_GPU;$/;"	m	class:all_stats_c
m_L3_WB	all_stats.h	/^		RATIO_Stat* m_L3_WB;$/;"	m	class:all_stats_c
m_LD_NO_FORWARD	all_stats.h	/^		COUNT_Stat* m_LD_NO_FORWARD;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_DFETCH_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_DFETCH_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_DPRF_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_DPRF_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_DSTORE_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_DSTORE_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_HWP_PREF_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_HWP_PREF_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_IFETCH_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_IFETCH_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_SW_PREF_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_SW_PREF_Q;$/;"	m	class:all_stats_c
m_MEM_REQ_MISS_WB_Q	all_stats.h	/^		COUNT_Stat* m_MEM_REQ_MISS_WB_Q;$/;"	m	class:all_stats_c
m_MEM_STALL_CYCLE	all_stats.h	/^		COUNT_Stat* m_MEM_STALL_CYCLE;$/;"	m	class:all_stats_c
m_MISS_TRAIN_STREAM	all_stats.h	/^		COUNT_Stat* m_MISS_TRAIN_STREAM;$/;"	m	class:all_stats_c
m_MSHR_FULL	all_stats.h	/^		COUNT_Stat* m_MSHR_FULL;$/;"	m	class:all_stats_c
m_MT_br_waiting	frontend.h	/^  bool               m_MT_br_waiting; \/**< MT waiting for the branch *\/$/;"	m	struct:frontend_s
m_MT_load_waiting	frontend.h	/^  int                m_MT_load_waiting; \/**< MT waiting for the load *\/$/;"	m	struct:frontend_s
m_MT_scheduler	frontend.h	/^  mt_scheduler_s     m_MT_scheduler; \/**< MT scheduler *\/ $/;"	m	struct:frontend_s
m_NOC_AVG_ACTIVE_PACKET	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_ACTIVE_PACKET;$/;"	m	class:all_stats_c
m_NOC_AVG_ACTIVE_PACKET_BASE	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_ACTIVE_PACKET_BASE;$/;"	m	class:all_stats_c
m_NOC_AVG_ACTIVE_PACKET_BASE_CPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_ACTIVE_PACKET_BASE_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_ACTIVE_PACKET_BASE_GPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_ACTIVE_PACKET_BASE_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_ACTIVE_PACKET_CPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_ACTIVE_PACKET_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_ACTIVE_PACKET_GPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_ACTIVE_PACKET_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_LATENCY;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY_BASE	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_LATENCY_BASE;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY_BASE_CPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_LATENCY_BASE_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY_BASE_GPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_LATENCY_BASE_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY_CPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_LATENCY_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_LATENCY_GPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_LATENCY_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_WAIT_IN_ROUTER;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_BASE	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_WAIT_IN_ROUTER_BASE;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_BASE_CPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_WAIT_IN_ROUTER_BASE_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_BASE_GPU	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_WAIT_IN_ROUTER_BASE_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_BASE_L3	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_WAIT_IN_ROUTER_BASE_L3;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_BASE_MC	all_stats.h	/^		COUNT_Stat* m_NOC_AVG_WAIT_IN_ROUTER_BASE_MC;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_CPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_WAIT_IN_ROUTER_CPU;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_GPU	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_WAIT_IN_ROUTER_GPU;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_L3	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_WAIT_IN_ROUTER_L3;$/;"	m	class:all_stats_c
m_NOC_AVG_WAIT_IN_ROUTER_MC	all_stats.h	/^		RATIO_Stat* m_NOC_AVG_WAIT_IN_ROUTER_MC;$/;"	m	class:all_stats_c
m_NOC_IDLE_CHANNEL	all_stats.h	/^		COUNT_Stat* m_NOC_IDLE_CHANNEL;$/;"	m	class:all_stats_c
m_NOC_IDLE_CHANNEL_CPU	all_stats.h	/^		COUNT_Stat* m_NOC_IDLE_CHANNEL_CPU;$/;"	m	class:all_stats_c
m_NOC_IDLE_CHANNEL_GPU	all_stats.h	/^		COUNT_Stat* m_NOC_IDLE_CHANNEL_GPU;$/;"	m	class:all_stats_c
m_NOC_IDLE_CHANNEL_L3	all_stats.h	/^		COUNT_Stat* m_NOC_IDLE_CHANNEL_L3;$/;"	m	class:all_stats_c
m_NOC_IDLE_CHANNEL_MC	all_stats.h	/^		COUNT_Stat* m_NOC_IDLE_CHANNEL_MC;$/;"	m	class:all_stats_c
m_NOC_LINK_ACTIVE	all_stats.h	/^		COUNT_Stat* m_NOC_LINK_ACTIVE;$/;"	m	class:all_stats_c
m_NUM_ACTIVE_BLOCKS	all_stats.h	/^		RATIO_Stat* m_NUM_ACTIVE_BLOCKS;$/;"	m	class:all_stats_c
m_NUM_ACTIVE_THREADS	all_stats.h	/^		RATIO_Stat* m_NUM_ACTIVE_THREADS;$/;"	m	class:all_stats_c
m_NUM_MUL_TRANS_CM_TM_DM	all_stats.h	/^		RATIO_Stat* m_NUM_MUL_TRANS_CM_TM_DM;$/;"	m	class:all_stats_c
m_NUM_MUL_TRANS_CM_TM_DM_INST	all_stats.h	/^		COUNT_Stat* m_NUM_MUL_TRANS_CM_TM_DM_INST;$/;"	m	class:all_stats_c
m_NUM_NO_FETCH_CYCLES	all_stats.h	/^		COUNT_Stat* m_NUM_NO_FETCH_CYCLES;$/;"	m	class:all_stats_c
m_NUM_NO_SCHED_CYCLE	all_stats.h	/^		COUNT_Stat* m_NUM_NO_SCHED_CYCLE;$/;"	m	class:all_stats_c
m_NUM_REPEAT	all_stats.h	/^		COUNT_Stat* m_NUM_REPEAT;$/;"	m	class:all_stats_c
m_NUM_SAMPLES	all_stats.h	/^		COUNT_Stat* m_NUM_SAMPLES;$/;"	m	class:all_stats_c
m_NUM_SCHED_IDLE_CYCLE	all_stats.h	/^		COUNT_Stat* m_NUM_SCHED_IDLE_CYCLE;$/;"	m	class:all_stats_c
m_NUM_THREAD	all_stats.h	/^		COUNT_Stat* m_NUM_THREAD;$/;"	m	class:all_stats_c
m_NUM_WRITES	all_stats.h	/^		COUNT_Stat* m_NUM_WRITES;$/;"	m	class:all_stats_c
m_NUM_WRITE_ACKS	all_stats.h	/^		COUNT_Stat* m_NUM_WRITE_ACKS;$/;"	m	class:all_stats_c
m_OP_CAT_3DNOW	all_stats.h	/^		COUNT_Stat* m_OP_CAT_3DNOW;$/;"	m	class:all_stats_c
m_OP_CAT_AES	all_stats.h	/^		COUNT_Stat* m_OP_CAT_AES;$/;"	m	class:all_stats_c
m_OP_CAT_AVX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_AVX;$/;"	m	class:all_stats_c
m_OP_CAT_BINARY	all_stats.h	/^		COUNT_Stat* m_OP_CAT_BINARY;$/;"	m	class:all_stats_c
m_OP_CAT_BITBYTE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_BITBYTE;$/;"	m	class:all_stats_c
m_OP_CAT_BROADCAST	all_stats.h	/^		COUNT_Stat* m_OP_CAT_BROADCAST;$/;"	m	class:all_stats_c
m_OP_CAT_CALL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_CALL;$/;"	m	class:all_stats_c
m_OP_CAT_CMOV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_CMOV;$/;"	m	class:all_stats_c
m_OP_CAT_COND_BR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_COND_BR;$/;"	m	class:all_stats_c
m_OP_CAT_CONVERT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_CONVERT;$/;"	m	class:all_stats_c
m_OP_CAT_DATAXFER	all_stats.h	/^		COUNT_Stat* m_OP_CAT_DATAXFER;$/;"	m	class:all_stats_c
m_OP_CAT_DECIMAL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_DECIMAL;$/;"	m	class:all_stats_c
m_OP_CAT_FCMOV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_FCMOV;$/;"	m	class:all_stats_c
m_OP_CAT_FLAGOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_FLAGOP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ABS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ABS;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ABS64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ABS64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ADD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ADD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ADD64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ADD64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ADDC	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ADDC;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_AND	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_AND;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_AND64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_AND64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ATOM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ATOM;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ATOM64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ATOM64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BAR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BAR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFE;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFE64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFE64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFI	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFI;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFI64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFI64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFIND	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFIND;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BFIND64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BFIND64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BRA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BRA;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BREV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BREV;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BREV64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BREV64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_BRKPT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_BRKPT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CALL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CALL;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CLZ	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CLZ;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CLZ64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CLZ64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CNOT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CNOT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CNOT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CNOT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_COPYSIGN	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_COPYSIGN;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_COPYSIGN64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_COPYSIGN64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_COS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_COS;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CVT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CVT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CVT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CVT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CVTA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CVTA;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_CVTA64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_CVTA64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_DIV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_DIV;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_DIV64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_DIV64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_EN	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_EN;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_EX2	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_EX2;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_EXIT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_EXIT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_FMA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_FMA;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_FMA64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_FMA64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ISSPACEP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ISSPACEP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_LD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_LD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_LD64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_LD64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_LDU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_LDU;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_LDU64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_LDU64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_LG2	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_LG2;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MAD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MAD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MAD24	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MAD24;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MAD64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MAD64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MAX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MAX;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MAX64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MAX64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MEMBAR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MEMBAR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MIN	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MIN;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MIN64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MIN64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MOV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MOV;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MOV64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MOV64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MUL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MUL;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MUL24	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MUL24;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_MUL64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_MUL64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_NEG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_NEG;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_NEG64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_NEG64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_NOT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_NOT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_NOT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_NOT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_OR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_OR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_OR64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_OR64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_PHI	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_PHI;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_PMEVENT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_PMEVENT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_POPC	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_POPC;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_POPC64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_POPC64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_PREFETCH	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_PREFETCH;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_PREFETCHU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_PREFETCHU;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_PRMT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_PRMT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RCP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RCP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RCP64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RCP64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RECONVERGE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RECONVERGE;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RED	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RED;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RED64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RED64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_REM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_REM;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_REM64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_REM64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RET	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RET;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RSQRT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RSQRT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_RSQRT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_RSQRT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SAD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SAD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SAD64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SAD64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SELP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SELP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SELP64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SELP64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SET	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SET;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SET64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SET64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SETP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SETP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SETP64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SETP64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SHL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SHL;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SHL64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SHL64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SHR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SHR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SHR64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SHR64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SIN	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SIN;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SLCT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SLCT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SLCT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SLCT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SQRT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SQRT;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SQRT64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SQRT64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ST	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ST;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_ST64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_ST64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUB	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUB;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUB64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUB64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUBC	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUBC;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SULD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SULD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SULD64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SULD64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUQ	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUQ;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SURED	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SURED;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SURED64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SURED64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUST	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUST;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_SUST64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_SUST64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TESTP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TESTP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TESTP64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TESTP64;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TEX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TEX;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TLD4	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TLD4;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TRAP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TRAP;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_TXQ	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_TXQ;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VABSDIFF	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VABSDIFF;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VADD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VADD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VMAD	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VMAD;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VMAX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VMAX;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VMIN	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VMIN;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VOTE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VOTE;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VSET	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VSET;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VSHL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VSHL;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VSHR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VSHR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_VSUB	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_VSUB;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_XOR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_XOR;$/;"	m	class:all_stats_c
m_OP_CAT_GPU_XOR64	all_stats.h	/^		COUNT_Stat* m_OP_CAT_GPU_XOR64;$/;"	m	class:all_stats_c
m_OP_CAT_INTERRUPT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_INTERRUPT;$/;"	m	class:all_stats_c
m_OP_CAT_INVALID	all_stats.h	/^		COUNT_Stat* m_OP_CAT_INVALID;$/;"	m	class:all_stats_c
m_OP_CAT_IO	all_stats.h	/^		COUNT_Stat* m_OP_CAT_IO;$/;"	m	class:all_stats_c
m_OP_CAT_IOSTRINGOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_IOSTRINGOP;$/;"	m	class:all_stats_c
m_OP_CAT_LDU_GM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LDU_GM;$/;"	m	class:all_stats_c
m_OP_CAT_LD_CM_CA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_CM_CA;$/;"	m	class:all_stats_c
m_OP_CAT_LD_CM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_CM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_LD_CM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_CM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_LD_CM_CU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_CM_CU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_CM_LU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_CM_LU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_GM_CA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_GM_CA;$/;"	m	class:all_stats_c
m_OP_CAT_LD_GM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_GM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_LD_GM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_GM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_LD_GM_CU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_GM_CU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_GM_LU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_GM_LU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_LM_CA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_LM_CA;$/;"	m	class:all_stats_c
m_OP_CAT_LD_LM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_LM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_LD_LM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_LM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_LD_LM_CU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_LM_CU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_LM_LU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_LM_LU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_PM_CA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_PM_CA;$/;"	m	class:all_stats_c
m_OP_CAT_LD_PM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_PM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_LD_PM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_PM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_LD_PM_CU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_PM_CU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_PM_LU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_PM_LU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_SM_CA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_SM_CA;$/;"	m	class:all_stats_c
m_OP_CAT_LD_SM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_SM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_LD_SM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_SM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_LD_SM_CU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_SM_CU;$/;"	m	class:all_stats_c
m_OP_CAT_LD_SM_LU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LD_SM_LU;$/;"	m	class:all_stats_c
m_OP_CAT_LOGICAL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_LOGICAL;$/;"	m	class:all_stats_c
m_OP_CAT_MISC	all_stats.h	/^		COUNT_Stat* m_OP_CAT_MISC;$/;"	m	class:all_stats_c
m_OP_CAT_MMX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_MMX;$/;"	m	class:all_stats_c
m_OP_CAT_NOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_NOP;$/;"	m	class:all_stats_c
m_OP_CAT_PCLMULQDQ	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PCLMULQDQ;$/;"	m	class:all_stats_c
m_OP_CAT_POP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_POP;$/;"	m	class:all_stats_c
m_OP_CAT_PREFETCH	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREFETCH;$/;"	m	class:all_stats_c
m_OP_CAT_PREFETCH_NTA	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREFETCH_NTA;$/;"	m	class:all_stats_c
m_OP_CAT_PREFETCH_T0	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREFETCH_T0;$/;"	m	class:all_stats_c
m_OP_CAT_PREFETCH_T1	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREFETCH_T1;$/;"	m	class:all_stats_c
m_OP_CAT_PREFETCH_T2	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREFETCH_T2;$/;"	m	class:all_stats_c
m_OP_CAT_PREF_GM_L1	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREF_GM_L1;$/;"	m	class:all_stats_c
m_OP_CAT_PREF_GM_L2	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREF_GM_L2;$/;"	m	class:all_stats_c
m_OP_CAT_PREF_LM_L1	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREF_LM_L1;$/;"	m	class:all_stats_c
m_OP_CAT_PREF_LM_L2	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREF_LM_L2;$/;"	m	class:all_stats_c
m_OP_CAT_PREF_UNIFORM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PREF_UNIFORM;$/;"	m	class:all_stats_c
m_OP_CAT_PUSH	all_stats.h	/^		COUNT_Stat* m_OP_CAT_PUSH;$/;"	m	class:all_stats_c
m_OP_CAT_RET	all_stats.h	/^		COUNT_Stat* m_OP_CAT_RET;$/;"	m	class:all_stats_c
m_OP_CAT_ROTATE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ROTATE;$/;"	m	class:all_stats_c
m_OP_CAT_SEGOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SEGOP;$/;"	m	class:all_stats_c
m_OP_CAT_SEMAPHORE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SEMAPHORE;$/;"	m	class:all_stats_c
m_OP_CAT_SHIFT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SHIFT;$/;"	m	class:all_stats_c
m_OP_CAT_SSE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SSE;$/;"	m	class:all_stats_c
m_OP_CAT_STRINGOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_STRINGOP;$/;"	m	class:all_stats_c
m_OP_CAT_STTNI	all_stats.h	/^		COUNT_Stat* m_OP_CAT_STTNI;$/;"	m	class:all_stats_c
m_OP_CAT_ST_GM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_GM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_ST_GM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_GM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_ST_GM_WB	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_GM_WB;$/;"	m	class:all_stats_c
m_OP_CAT_ST_GM_WT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_GM_WT;$/;"	m	class:all_stats_c
m_OP_CAT_ST_LM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_LM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_ST_LM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_LM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_ST_LM_WB	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_LM_WB;$/;"	m	class:all_stats_c
m_OP_CAT_ST_LM_WT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_LM_WT;$/;"	m	class:all_stats_c
m_OP_CAT_ST_SM_CG	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_SM_CG;$/;"	m	class:all_stats_c
m_OP_CAT_ST_SM_CS	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_SM_CS;$/;"	m	class:all_stats_c
m_OP_CAT_ST_SM_WB	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_SM_WB;$/;"	m	class:all_stats_c
m_OP_CAT_ST_SM_WT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_ST_SM_WT;$/;"	m	class:all_stats_c
m_OP_CAT_SYSCALL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SYSCALL;$/;"	m	class:all_stats_c
m_OP_CAT_SYSRET	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SYSRET;$/;"	m	class:all_stats_c
m_OP_CAT_SYSTEM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_SYSTEM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_DATA_XFER_GM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_DATA_XFER_GM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_DATA_XFER_LM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_DATA_XFER_LM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_DATA_XFER_SM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_DATA_XFER_SM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_DIV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_DIV;$/;"	m	class:all_stats_c
m_OP_CAT_TR_FDIV	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_FDIV;$/;"	m	class:all_stats_c
m_OP_CAT_TR_FMUL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_FMUL;$/;"	m	class:all_stats_c
m_OP_CAT_TR_LAST	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_LAST;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_CM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_CM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_GM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_GM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_LM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_LM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_PM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_PM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_SM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_SM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_LD_TM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_LD_TM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_ST_GM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_ST_GM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_ST_LM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_ST_LM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MEM_ST_SM	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MEM_ST_SM;$/;"	m	class:all_stats_c
m_OP_CAT_TR_MUL	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_MUL;$/;"	m	class:all_stats_c
m_OP_CAT_TR_NOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_TR_NOP;$/;"	m	class:all_stats_c
m_OP_CAT_UNCOND_BR	all_stats.h	/^		COUNT_Stat* m_OP_CAT_UNCOND_BR;$/;"	m	class:all_stats_c
m_OP_CAT_VTX	all_stats.h	/^		COUNT_Stat* m_OP_CAT_VTX;$/;"	m	class:all_stats_c
m_OP_CAT_WIDENOP	all_stats.h	/^		COUNT_Stat* m_OP_CAT_WIDENOP;$/;"	m	class:all_stats_c
m_OP_CAT_X87_ALU	all_stats.h	/^		COUNT_Stat* m_OP_CAT_X87_ALU;$/;"	m	class:all_stats_c
m_OP_CAT_XSAVE	all_stats.h	/^		COUNT_Stat* m_OP_CAT_XSAVE;$/;"	m	class:all_stats_c
m_OP_CAT_XSAVEOPT	all_stats.h	/^		COUNT_Stat* m_OP_CAT_XSAVEOPT;$/;"	m	class:all_stats_c
m_PCL	macsim.h	/^    cache_partition_framework_c* m_PCL; \/**< cache partitioning framework *\/$/;"	m	class:macsim_c
m_PERFECT_TARGET_PRED	all_stats.h	/^		COUNT_Stat* m_PERFECT_TARGET_PRED;$/;"	m	class:all_stats_c
m_POWER_BLOCK_STATES_R	all_stats.h	/^		COUNT_Stat* m_POWER_BLOCK_STATES_R;$/;"	m	class:all_stats_c
m_POWER_BLOCK_STATES_W	all_stats.h	/^		COUNT_Stat* m_POWER_BLOCK_STATES_W;$/;"	m	class:all_stats_c
m_POWER_BR_PRED_R	all_stats.h	/^		COUNT_Stat* m_POWER_BR_PRED_R;$/;"	m	class:all_stats_c
m_POWER_BR_PRED_W	all_stats.h	/^		COUNT_Stat* m_POWER_BR_PRED_W;$/;"	m	class:all_stats_c
m_POWER_CONST_CACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_CONST_CACHE_R;$/;"	m	class:all_stats_c
m_POWER_CONST_CACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_CONST_CACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_CONST_CACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_CONST_CACHE_W;$/;"	m	class:all_stats_c
m_POWER_CONST_CACHE_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_CONST_CACHE_W_TAG;$/;"	m	class:all_stats_c
m_POWER_CONTROL_REGISTER_R	all_stats.h	/^		COUNT_Stat* m_POWER_CONTROL_REGISTER_R;$/;"	m	class:all_stats_c
m_POWER_CONTROL_REGISTER_W	all_stats.h	/^		COUNT_Stat* m_POWER_CONTROL_REGISTER_W;$/;"	m	class:all_stats_c
m_POWER_DATA_TLB_R	all_stats.h	/^		COUNT_Stat* m_POWER_DATA_TLB_R;$/;"	m	class:all_stats_c
m_POWER_DATA_TLB_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DATA_TLB_R_TAG;$/;"	m	class:all_stats_c
m_POWER_DATA_TLB_W	all_stats.h	/^		COUNT_Stat* m_POWER_DATA_TLB_W;$/;"	m	class:all_stats_c
m_POWER_DATA_TLB_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DATA_TLB_W_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_LINEFILL_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_LINEFILL_BUF_R;$/;"	m	class:all_stats_c
m_POWER_DCACHE_LINEFILL_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_LINEFILL_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_LINEFILL_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_LINEFILL_BUF_W;$/;"	m	class:all_stats_c
m_POWER_DCACHE_LINEFILL_BUF_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_LINEFILL_BUF_W_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_MISS_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_MISS_BUF_R;$/;"	m	class:all_stats_c
m_POWER_DCACHE_MISS_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_MISS_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_MISS_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_MISS_BUF_W;$/;"	m	class:all_stats_c
m_POWER_DCACHE_MISS_BUF_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_MISS_BUF_W_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_R;$/;"	m	class:all_stats_c
m_POWER_DCACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_W;$/;"	m	class:all_stats_c
m_POWER_DCACHE_WB_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_WB_BUF_R;$/;"	m	class:all_stats_c
m_POWER_DCACHE_WB_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_WB_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_DCACHE_WB_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_WB_BUF_W;$/;"	m	class:all_stats_c
m_POWER_DCACHE_WB_BUF_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_DCACHE_WB_BUF_W_TAG;$/;"	m	class:all_stats_c
m_POWER_DEP_CHECK_LOGIC_R	all_stats.h	/^		COUNT_Stat* m_POWER_DEP_CHECK_LOGIC_R;$/;"	m	class:all_stats_c
m_POWER_EXEC_BYPASS	all_stats.h	/^		COUNT_Stat* m_POWER_EXEC_BYPASS;$/;"	m	class:all_stats_c
m_POWER_EX_ALU_R	all_stats.h	/^		COUNT_Stat* m_POWER_EX_ALU_R;$/;"	m	class:all_stats_c
m_POWER_EX_FPU_R	all_stats.h	/^		COUNT_Stat* m_POWER_EX_FPU_R;$/;"	m	class:all_stats_c
m_POWER_EX_MUL_R	all_stats.h	/^		COUNT_Stat* m_POWER_EX_MUL_R;$/;"	m	class:all_stats_c
m_POWER_EX_SFU_R	all_stats.h	/^		COUNT_Stat* m_POWER_EX_SFU_R;$/;"	m	class:all_stats_c
m_POWER_FETCH_QUEUE_R	all_stats.h	/^		COUNT_Stat* m_POWER_FETCH_QUEUE_R;$/;"	m	class:all_stats_c
m_POWER_FETCH_QUEUE_W	all_stats.h	/^		COUNT_Stat* m_POWER_FETCH_QUEUE_W;$/;"	m	class:all_stats_c
m_POWER_FLAG_REGISTER_R	all_stats.h	/^		COUNT_Stat* m_POWER_FLAG_REGISTER_R;$/;"	m	class:all_stats_c
m_POWER_FLAG_REGISTER_W	all_stats.h	/^		COUNT_Stat* m_POWER_FLAG_REGISTER_W;$/;"	m	class:all_stats_c
m_POWER_FP_REGFILE_R	all_stats.h	/^		COUNT_Stat* m_POWER_FP_REGFILE_R;$/;"	m	class:all_stats_c
m_POWER_FP_REGFILE_W	all_stats.h	/^		COUNT_Stat* m_POWER_FP_REGFILE_W;$/;"	m	class:all_stats_c
m_POWER_FP_REGISTER_R	all_stats.h	/^		COUNT_Stat* m_POWER_FP_REGISTER_R;$/;"	m	class:all_stats_c
m_POWER_FP_REGISTER_W	all_stats.h	/^		COUNT_Stat* m_POWER_FP_REGISTER_W;$/;"	m	class:all_stats_c
m_POWER_FP_RENAME_R	all_stats.h	/^		COUNT_Stat* m_POWER_FP_RENAME_R;$/;"	m	class:all_stats_c
m_POWER_FP_RENAME_W	all_stats.h	/^		COUNT_Stat* m_POWER_FP_RENAME_W;$/;"	m	class:all_stats_c
m_POWER_FREELIST_R	all_stats.h	/^		COUNT_Stat* m_POWER_FREELIST_R;$/;"	m	class:all_stats_c
m_POWER_FREELIST_W	all_stats.h	/^		COUNT_Stat* m_POWER_FREELIST_W;$/;"	m	class:all_stats_c
m_POWER_GP_REGISTER_R	all_stats.h	/^		COUNT_Stat* m_POWER_GP_REGISTER_R;$/;"	m	class:all_stats_c
m_POWER_GP_REGISTER_W	all_stats.h	/^		COUNT_Stat* m_POWER_GP_REGISTER_W;$/;"	m	class:all_stats_c
m_POWER_ICACHE_CONF	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_CONF;$/;"	m	class:all_stats_c
m_POWER_ICACHE_MISS_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_MISS_BUF_R;$/;"	m	class:all_stats_c
m_POWER_ICACHE_MISS_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_MISS_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_ICACHE_MISS_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_MISS_BUF_W;$/;"	m	class:all_stats_c
m_POWER_ICACHE_MISS_BUF_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_MISS_BUF_W_TAG;$/;"	m	class:all_stats_c
m_POWER_ICACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_R;$/;"	m	class:all_stats_c
m_POWER_ICACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_ICACHE_TOT_ACC	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_TOT_ACC;$/;"	m	class:all_stats_c
m_POWER_ICACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_ICACHE_W;$/;"	m	class:all_stats_c
m_POWER_INST_COMMIT_SEL_LOGIC_R	all_stats.h	/^		COUNT_Stat* m_POWER_INST_COMMIT_SEL_LOGIC_R;$/;"	m	class:all_stats_c
m_POWER_INST_COMMIT_SEL_LOGIC_W	all_stats.h	/^		COUNT_Stat* m_POWER_INST_COMMIT_SEL_LOGIC_W;$/;"	m	class:all_stats_c
m_POWER_INST_DECODER_R	all_stats.h	/^		COUNT_Stat* m_POWER_INST_DECODER_R;$/;"	m	class:all_stats_c
m_POWER_INST_DECODER_W	all_stats.h	/^		COUNT_Stat* m_POWER_INST_DECODER_W;$/;"	m	class:all_stats_c
m_POWER_INST_ISSUE_SEL_LOGIC_R	all_stats.h	/^		COUNT_Stat* m_POWER_INST_ISSUE_SEL_LOGIC_R;$/;"	m	class:all_stats_c
m_POWER_INST_ISSUE_SEL_LOGIC_W	all_stats.h	/^		COUNT_Stat* m_POWER_INST_ISSUE_SEL_LOGIC_W;$/;"	m	class:all_stats_c
m_POWER_INST_QUEUE_R	all_stats.h	/^		COUNT_Stat* m_POWER_INST_QUEUE_R;$/;"	m	class:all_stats_c
m_POWER_INST_QUEUE_W	all_stats.h	/^		COUNT_Stat* m_POWER_INST_QUEUE_W;$/;"	m	class:all_stats_c
m_POWER_INT_REGFILE_R	all_stats.h	/^		COUNT_Stat* m_POWER_INT_REGFILE_R;$/;"	m	class:all_stats_c
m_POWER_INT_REGFILE_W	all_stats.h	/^		COUNT_Stat* m_POWER_INT_REGFILE_W;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_LINEFILL_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_LINEFILL_BUF_R;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_LINEFILL_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_LINEFILL_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_LINEFILL_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_LINEFILL_BUF_W;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_R;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_W;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_WB_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_WB_BUF_R;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_WB_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_WB_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L2CACHE_WB_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_L2CACHE_WB_BUF_W;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_LINEFILL_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_LINEFILL_BUF_R;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_LINEFILL_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_LINEFILL_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_LINEFILL_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_LINEFILL_BUF_W;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_R;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_W;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_WB_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_WB_BUF_R;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_WB_BUF_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_WB_BUF_R_TAG;$/;"	m	class:all_stats_c
m_POWER_L3CACHE_WB_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_L3CACHE_WB_BUF_W;$/;"	m	class:all_stats_c
m_POWER_LOAD_BYPASS	all_stats.h	/^		COUNT_Stat* m_POWER_LOAD_BYPASS;$/;"	m	class:all_stats_c
m_POWER_LOAD_QUEUE_R	all_stats.h	/^		COUNT_Stat* m_POWER_LOAD_QUEUE_R;$/;"	m	class:all_stats_c
m_POWER_LOAD_QUEUE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_LOAD_QUEUE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_LOAD_QUEUE_W	all_stats.h	/^		COUNT_Stat* m_POWER_LOAD_QUEUE_W;$/;"	m	class:all_stats_c
m_POWER_LOAD_QUEUE_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_LOAD_QUEUE_W_TAG;$/;"	m	class:all_stats_c
m_POWER_MC_R	all_stats.h	/^		COUNT_Stat* m_POWER_MC_R;$/;"	m	class:all_stats_c
m_POWER_MC_W	all_stats.h	/^		COUNT_Stat* m_POWER_MC_W;$/;"	m	class:all_stats_c
m_POWER_MICRO_OP_SEQ_R	all_stats.h	/^		COUNT_Stat* m_POWER_MICRO_OP_SEQ_R;$/;"	m	class:all_stats_c
m_POWER_MICRO_OP_SEQ_W	all_stats.h	/^		COUNT_Stat* m_POWER_MICRO_OP_SEQ_W;$/;"	m	class:all_stats_c
m_POWER_OPERAND_DECODER_R	all_stats.h	/^		COUNT_Stat* m_POWER_OPERAND_DECODER_R;$/;"	m	class:all_stats_c
m_POWER_OPERAND_DECODER_W	all_stats.h	/^		COUNT_Stat* m_POWER_OPERAND_DECODER_W;$/;"	m	class:all_stats_c
m_POWER_PAYLOAD_RAM_R	all_stats.h	/^		COUNT_Stat* m_POWER_PAYLOAD_RAM_R;$/;"	m	class:all_stats_c
m_POWER_PAYLOAD_RAM_W	all_stats.h	/^		COUNT_Stat* m_POWER_PAYLOAD_RAM_W;$/;"	m	class:all_stats_c
m_POWER_PIPELINE	all_stats.h	/^		COUNT_Stat* m_POWER_PIPELINE;$/;"	m	class:all_stats_c
m_POWER_RAS_R	all_stats.h	/^		COUNT_Stat* m_POWER_RAS_R;$/;"	m	class:all_stats_c
m_POWER_RAS_W	all_stats.h	/^		COUNT_Stat* m_POWER_RAS_W;$/;"	m	class:all_stats_c
m_POWER_REG_RENAMING_TABLE_R	all_stats.h	/^		COUNT_Stat* m_POWER_REG_RENAMING_TABLE_R;$/;"	m	class:all_stats_c
m_POWER_REG_RENAMING_TABLE_W	all_stats.h	/^		COUNT_Stat* m_POWER_REG_RENAMING_TABLE_W;$/;"	m	class:all_stats_c
m_POWER_REORDER_BUF_R	all_stats.h	/^		COUNT_Stat* m_POWER_REORDER_BUF_R;$/;"	m	class:all_stats_c
m_POWER_REORDER_BUF_W	all_stats.h	/^		COUNT_Stat* m_POWER_REORDER_BUF_W;$/;"	m	class:all_stats_c
m_POWER_RESERVATION_STATION_R	all_stats.h	/^		COUNT_Stat* m_POWER_RESERVATION_STATION_R;$/;"	m	class:all_stats_c
m_POWER_RESERVATION_STATION_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_RESERVATION_STATION_R_TAG;$/;"	m	class:all_stats_c
m_POWER_RESERVATION_STATION_W	all_stats.h	/^		COUNT_Stat* m_POWER_RESERVATION_STATION_W;$/;"	m	class:all_stats_c
m_POWER_RESERVATION_STATION_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_RESERVATION_STATION_W_TAG;$/;"	m	class:all_stats_c
m_POWER_SEGMENT_REGISTER_R	all_stats.h	/^		COUNT_Stat* m_POWER_SEGMENT_REGISTER_R;$/;"	m	class:all_stats_c
m_POWER_SEGMENT_REGISTER_W	all_stats.h	/^		COUNT_Stat* m_POWER_SEGMENT_REGISTER_W;$/;"	m	class:all_stats_c
m_POWER_SHARED_MEM_R	all_stats.h	/^		COUNT_Stat* m_POWER_SHARED_MEM_R;$/;"	m	class:all_stats_c
m_POWER_SHARED_MEM_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_SHARED_MEM_R_TAG;$/;"	m	class:all_stats_c
m_POWER_SHARED_MEM_W	all_stats.h	/^		COUNT_Stat* m_POWER_SHARED_MEM_W;$/;"	m	class:all_stats_c
m_POWER_SHARED_MEM_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_SHARED_MEM_W_TAG;$/;"	m	class:all_stats_c
m_POWER_STORE_QUEUE_R	all_stats.h	/^		COUNT_Stat* m_POWER_STORE_QUEUE_R;$/;"	m	class:all_stats_c
m_POWER_STORE_QUEUE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_STORE_QUEUE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_STORE_QUEUE_W	all_stats.h	/^		COUNT_Stat* m_POWER_STORE_QUEUE_W;$/;"	m	class:all_stats_c
m_POWER_STORE_QUEUE_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_STORE_QUEUE_W_TAG;$/;"	m	class:all_stats_c
m_POWER_TEXTURE_CACHE_R	all_stats.h	/^		COUNT_Stat* m_POWER_TEXTURE_CACHE_R;$/;"	m	class:all_stats_c
m_POWER_TEXTURE_CACHE_R_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_TEXTURE_CACHE_R_TAG;$/;"	m	class:all_stats_c
m_POWER_TEXTURE_CACHE_W	all_stats.h	/^		COUNT_Stat* m_POWER_TEXTURE_CACHE_W;$/;"	m	class:all_stats_c
m_POWER_TEXTURE_CACHE_W_TAG	all_stats.h	/^		COUNT_Stat* m_POWER_TEXTURE_CACHE_W_TAG;$/;"	m	class:all_stats_c
m_POWER_UOP_QUEUE_R	all_stats.h	/^		COUNT_Stat* m_POWER_UOP_QUEUE_R;$/;"	m	class:all_stats_c
m_POWER_UOP_QUEUE_W	all_stats.h	/^		COUNT_Stat* m_POWER_UOP_QUEUE_W;$/;"	m	class:all_stats_c
m_PREFETCH_LAST_SCHEDULE	all_stats.h	/^		COUNT_Stat* m_PREFETCH_LAST_SCHEDULE;$/;"	m	class:all_stats_c
m_PREF_ACC1_HT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC1_HT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC1_HT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC1_HT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC1_LT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC1_LT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC1_LT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC1_LT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC2_HT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC2_HT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC2_HT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC2_HT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC2_LT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC2_LT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC2_LT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC2_LT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC3_HT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC3_HT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC3_HT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC3_HT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC3_LT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC3_LT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC3_LT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC3_LT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC4_HT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC4_HT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC4_HT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC4_HT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC4_LT_HP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC4_LT_HP;$/;"	m	class:all_stats_c
m_PREF_ACC4_LT_LP	all_stats.h	/^		COUNT_Stat* m_PREF_ACC4_LT_LP;$/;"	m	class:all_stats_c
m_PREF_ACC_1	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_1;$/;"	m	class:all_stats_c
m_PREF_ACC_10	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_10;$/;"	m	class:all_stats_c
m_PREF_ACC_2	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_2;$/;"	m	class:all_stats_c
m_PREF_ACC_3	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_3;$/;"	m	class:all_stats_c
m_PREF_ACC_4	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_4;$/;"	m	class:all_stats_c
m_PREF_ACC_5	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_5;$/;"	m	class:all_stats_c
m_PREF_ACC_6	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_6;$/;"	m	class:all_stats_c
m_PREF_ACC_7	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_7;$/;"	m	class:all_stats_c
m_PREF_ACC_8	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_8;$/;"	m	class:all_stats_c
m_PREF_ACC_9	all_stats.h	/^		COUNT_Stat* m_PREF_ACC_9;$/;"	m	class:all_stats_c
m_PREF_DISTANCE_1	all_stats.h	/^		COUNT_Stat* m_PREF_DISTANCE_1;$/;"	m	class:all_stats_c
m_PREF_DISTANCE_2	all_stats.h	/^		COUNT_Stat* m_PREF_DISTANCE_2;$/;"	m	class:all_stats_c
m_PREF_DISTANCE_3	all_stats.h	/^		COUNT_Stat* m_PREF_DISTANCE_3;$/;"	m	class:all_stats_c
m_PREF_DISTANCE_4	all_stats.h	/^		COUNT_Stat* m_PREF_DISTANCE_4;$/;"	m	class:all_stats_c
m_PREF_DISTANCE_5	all_stats.h	/^		COUNT_Stat* m_PREF_DISTANCE_5;$/;"	m	class:all_stats_c
m_PREF_DL0REQ_QUEUE_FULL	all_stats.h	/^		COUNT_Stat* m_PREF_DL0REQ_QUEUE_FULL;$/;"	m	class:all_stats_c
m_PREF_DL0REQ_QUEUE_HIT_BY_DEMAND	all_stats.h	/^		COUNT_Stat* m_PREF_DL0REQ_QUEUE_HIT_BY_DEMAND;$/;"	m	class:all_stats_c
m_PREF_DL0REQ_QUEUE_MATCHED_REQ	all_stats.h	/^		COUNT_Stat* m_PREF_DL0REQ_QUEUE_MATCHED_REQ;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_DFETCH	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_DFETCH;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_DPRF	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_DPRF;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_DSTORE	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_DSTORE;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_IFETCH	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_IFETCH;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_IPREF	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_IPREF;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_DEMAND_WB	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_DEMAND_WB;$/;"	m	class:all_stats_c
m_PREF_HIT_BY_PREF	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_BY_PREF;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_DFETCH	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_DFETCH;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_DPRF	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_DPRF;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_DSTORE	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_DSTORE;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_IFETCH	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_IFETCH;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_IPREF	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_IPREF;$/;"	m	class:all_stats_c
m_PREF_HIT_DEMAND_WB	all_stats.h	/^		COUNT_Stat* m_PREF_HIT_DEMAND_WB;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_0	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_0;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_1	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_1;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_2	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_2;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_3	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_3;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_4	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_4;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_5	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_5;$/;"	m	class:all_stats_c
m_PREF_HYBRID_SEL_6	all_stats.h	/^		COUNT_Stat* m_PREF_HYBRID_SEL_6;$/;"	m	class:all_stats_c
m_PREF_L2_FILL	all_stats.h	/^		COUNT_Stat* m_PREF_L2_FILL;$/;"	m	class:all_stats_c
m_PREF_PFPOL	all_stats.h	/^		COUNT_Stat* m_PREF_PFPOL;$/;"	m	class:all_stats_c
m_PREF_PHASE_OVERWRITE_PAGE	all_stats.h	/^		COUNT_Stat* m_PREF_PHASE_OVERWRITE_PAGE;$/;"	m	class:all_stats_c
m_PREF_POL_1	all_stats.h	/^		COUNT_Stat* m_PREF_POL_1;$/;"	m	class:all_stats_c
m_PREF_POL_10	all_stats.h	/^		COUNT_Stat* m_PREF_POL_10;$/;"	m	class:all_stats_c
m_PREF_POL_2	all_stats.h	/^		COUNT_Stat* m_PREF_POL_2;$/;"	m	class:all_stats_c
m_PREF_POL_3	all_stats.h	/^		COUNT_Stat* m_PREF_POL_3;$/;"	m	class:all_stats_c
m_PREF_POL_4	all_stats.h	/^		COUNT_Stat* m_PREF_POL_4;$/;"	m	class:all_stats_c
m_PREF_POL_5	all_stats.h	/^		COUNT_Stat* m_PREF_POL_5;$/;"	m	class:all_stats_c
m_PREF_POL_6	all_stats.h	/^		COUNT_Stat* m_PREF_POL_6;$/;"	m	class:all_stats_c
m_PREF_POL_7	all_stats.h	/^		COUNT_Stat* m_PREF_POL_7;$/;"	m	class:all_stats_c
m_PREF_POL_8	all_stats.h	/^		COUNT_Stat* m_PREF_POL_8;$/;"	m	class:all_stats_c
m_PREF_POL_9	all_stats.h	/^		COUNT_Stat* m_PREF_POL_9;$/;"	m	class:all_stats_c
m_PREF_REGION_EVICT	all_stats.h	/^		COUNT_Stat* m_PREF_REGION_EVICT;$/;"	m	class:all_stats_c
m_PREF_REGION_SENT	all_stats.h	/^		COUNT_Stat* m_PREF_REGION_SENT;$/;"	m	class:all_stats_c
m_PREF_REGION_USEFUL	all_stats.h	/^		COUNT_Stat* m_PREF_REGION_USEFUL;$/;"	m	class:all_stats_c
m_PREF_REQ_QUE_FULL	all_stats.h	/^		COUNT_Stat* m_PREF_REQ_QUE_FULL;$/;"	m	class:all_stats_c
m_PREF_SEND_TO_MEM_REQ	all_stats.h	/^		COUNT_Stat* m_PREF_SEND_TO_MEM_REQ;$/;"	m	class:all_stats_c
m_PREF_SEND_TO_MEM_REQ_FAIL	all_stats.h	/^		COUNT_Stat* m_PREF_SEND_TO_MEM_REQ_FAIL;$/;"	m	class:all_stats_c
m_PREF_TIMELY_1	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_1;$/;"	m	class:all_stats_c
m_PREF_TIMELY_10	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_10;$/;"	m	class:all_stats_c
m_PREF_TIMELY_2	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_2;$/;"	m	class:all_stats_c
m_PREF_TIMELY_3	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_3;$/;"	m	class:all_stats_c
m_PREF_TIMELY_4	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_4;$/;"	m	class:all_stats_c
m_PREF_TIMELY_5	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_5;$/;"	m	class:all_stats_c
m_PREF_TIMELY_6	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_6;$/;"	m	class:all_stats_c
m_PREF_TIMELY_7	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_7;$/;"	m	class:all_stats_c
m_PREF_TIMELY_8	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_8;$/;"	m	class:all_stats_c
m_PREF_TIMELY_9	all_stats.h	/^		COUNT_Stat* m_PREF_TIMELY_9;$/;"	m	class:all_stats_c
m_PREF_UL2REQ_QUEUE_FULL	all_stats.h	/^		COUNT_Stat* m_PREF_UL2REQ_QUEUE_FULL;$/;"	m	class:all_stats_c
m_PREF_UL2REQ_QUEUE_HIT_BY_DEMAND	all_stats.h	/^		COUNT_Stat* m_PREF_UL2REQ_QUEUE_HIT_BY_DEMAND;$/;"	m	class:all_stats_c
m_PREF_UL2REQ_QUEUE_MATCHED_REQ	all_stats.h	/^		COUNT_Stat* m_PREF_UL2REQ_QUEUE_MATCHED_REQ;$/;"	m	class:all_stats_c
m_PREF_UL2REQ_QUEUE_SENTREQ	all_stats.h	/^		COUNT_Stat* m_PREF_UL2REQ_QUEUE_SENTREQ;$/;"	m	class:all_stats_c
m_PREF_UL2REQ_SEND_QUEUE_STALL	all_stats.h	/^		COUNT_Stat* m_PREF_UL2REQ_SEND_QUEUE_STALL;$/;"	m	class:all_stats_c
m_PREF_UNUSED_EVICT	all_stats.h	/^		COUNT_Stat* m_PREF_UNUSED_EVICT;$/;"	m	class:all_stats_c
m_PREF_UPDATE_COUNT	all_stats.h	/^		COUNT_Stat* m_PREF_UPDATE_COUNT;$/;"	m	class:all_stats_c
m_PROGRESS_ERROR	all_stats.h	/^		COUNT_Stat* m_PROGRESS_ERROR;$/;"	m	class:all_stats_c
m_ProcStat	statistics.h	/^      ProcessorStatistics* m_ProcStat; \/**< reference to simulation-scoped processor stats *\/$/;"	m	class:DIST_Stat
m_ProcStat	statistics.h	/^    ProcessorStatistics* m_ProcStat; \/**< reference to simulation-scoped processor stats *\/$/;"	m	class:PERCENT_Stat
m_ProcStat	statistics.h	/^    ProcessorStatistics* m_ProcStat; \/**< reference to simulation-scoped processor stats *\/$/;"	m	class:RATIO_Stat
m_ProcessorStats	macsim.h	/^		ProcessorStatistics* m_ProcessorStats; \/**< processor stats *\/$/;"	m	class:macsim_c
m_REMOVE_REDUNDANT_STREAM_STAT	all_stats.h	/^		COUNT_Stat* m_REMOVE_REDUNDANT_STREAM_STAT;$/;"	m	class:all_stats_c
m_REPLACE_OLD_STREAM	all_stats.h	/^		COUNT_Stat* m_REPLACE_OLD_STREAM;$/;"	m	class:all_stats_c
m_REQ_SEND_QUEUE_STALL	all_stats.h	/^		COUNT_Stat* m_REQ_SEND_QUEUE_STALL;$/;"	m	class:all_stats_c
m_RatioID	statistics.h	/^    long m_RatioID; \/**< ratio id *\/$/;"	m	class:RATIO_Stat
m_SCHED_FAILED_NO_PORTS	all_stats.h	/^		COUNT_Stat* m_SCHED_FAILED_NO_PORTS;$/;"	m	class:all_stats_c
m_SCHED_FAILED_OPERANDS_NOT_READY	all_stats.h	/^		COUNT_Stat* m_SCHED_FAILED_OPERANDS_NOT_READY;$/;"	m	class:all_stats_c
m_SCHED_FAILED_REASON_SUCCESS	all_stats.h	/^		COUNT_Stat* m_SCHED_FAILED_REASON_SUCCESS;$/;"	m	class:all_stats_c
m_SHARED_MEM_ACCESS	all_stats.h	/^		COUNT_Stat* m_SHARED_MEM_ACCESS;$/;"	m	class:all_stats_c
m_SHARED_MEM_INST	all_stats.h	/^		COUNT_Stat* m_SHARED_MEM_INST;$/;"	m	class:all_stats_c
m_SM_COAL_INST	all_stats.h	/^		COUNT_Stat* m_SM_COAL_INST;$/;"	m	class:all_stats_c
m_SM_COAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_SM_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_SM_COAL_INST_SINGLE_TRANS	all_stats.h	/^		COUNT_Stat* m_SM_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_SM_UNCOAL_INST	all_stats.h	/^		COUNT_Stat* m_SM_UNCOAL_INST;$/;"	m	class:all_stats_c
m_STREAM_BUFFER_REQ	all_stats.h	/^		COUNT_Stat* m_STREAM_BUFFER_REQ;$/;"	m	class:all_stats_c
m_STREAM_ENTER_RA	all_stats.h	/^		COUNT_Stat* m_STREAM_ENTER_RA;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_0	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_0;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_10	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_10;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_100_P	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_100_P;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_20	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_20;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_30	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_30;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_40	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_40;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_50	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_50;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_60	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_60;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_70	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_70;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_80	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_80;$/;"	m	class:all_stats_c
m_STREAM_LENGTH_90	all_stats.h	/^		COUNT_Stat* m_STREAM_LENGTH_90;$/;"	m	class:all_stats_c
m_STREAM_REQ_QUEUE_HIT_BY_DEMAND	all_stats.h	/^		COUNT_Stat* m_STREAM_REQ_QUEUE_HIT_BY_DEMAND;$/;"	m	class:all_stats_c
m_STREAM_TRAIN_CREATE	all_stats.h	/^		COUNT_Stat* m_STREAM_TRAIN_CREATE;$/;"	m	class:all_stats_c
m_TEXTURE_CACHE_ACCESS	all_stats.h	/^		COUNT_Stat* m_TEXTURE_CACHE_ACCESS;$/;"	m	class:all_stats_c
m_TEXTURE_CACHE_HIT	all_stats.h	/^		COUNT_Stat* m_TEXTURE_CACHE_HIT;$/;"	m	class:all_stats_c
m_TEXTURE_CACHE_MISS	all_stats.h	/^		COUNT_Stat* m_TEXTURE_CACHE_MISS;$/;"	m	class:all_stats_c
m_TEXTURE_CACHE_NO_EXECUTE	all_stats.h	/^		COUNT_Stat* m_TEXTURE_CACHE_NO_EXECUTE;$/;"	m	class:all_stats_c
m_TM_COAL_INST	all_stats.h	/^		COUNT_Stat* m_TM_COAL_INST;$/;"	m	class:all_stats_c
m_TM_COAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_TM_COAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_TM_COAL_INST_SINGLE_TRANS	all_stats.h	/^		COUNT_Stat* m_TM_COAL_INST_SINGLE_TRANS;$/;"	m	class:all_stats_c
m_TM_UNCOAL_INST	all_stats.h	/^		COUNT_Stat* m_TM_UNCOAL_INST;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_APPL0	all_stats.h	/^		RATIO_Stat* m_TOTAL_CAGE_APPL0;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_APPL1	all_stats.h	/^		RATIO_Stat* m_TOTAL_CAGE_APPL1;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_APPL2	all_stats.h	/^		RATIO_Stat* m_TOTAL_CAGE_APPL2;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_APPL3	all_stats.h	/^		RATIO_Stat* m_TOTAL_CAGE_APPL3;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_APPL4	all_stats.h	/^		RATIO_Stat* m_TOTAL_CAGE_APPL4;$/;"	m	class:all_stats_c
m_TOTAL_CAGE_PERIOD	all_stats.h	/^		COUNT_Stat* m_TOTAL_CAGE_PERIOD;$/;"	m	class:all_stats_c
m_TOTAL_DRAM	all_stats.h	/^		COUNT_Stat* m_TOTAL_DRAM;$/;"	m	class:all_stats_c
m_TOTAL_DRAM_MERGE	all_stats.h	/^		RATIO_Stat* m_TOTAL_DRAM_MERGE;$/;"	m	class:all_stats_c
m_TOTAL_MEMORY	all_stats.h	/^		COUNT_Stat* m_TOTAL_MEMORY;$/;"	m	class:all_stats_c
m_TOTAL_MEMORY_MERGE	all_stats.h	/^		RATIO_Stat* m_TOTAL_MEMORY_MERGE;$/;"	m	class:all_stats_c
m_TOTAL_PACKET_CPU	all_stats.h	/^		COUNT_Stat* m_TOTAL_PACKET_CPU;$/;"	m	class:all_stats_c
m_TOTAL_PACKET_GPU	all_stats.h	/^		COUNT_Stat* m_TOTAL_PACKET_GPU;$/;"	m	class:all_stats_c
m_TOTAL_WB	all_stats.h	/^		RATIO_Stat* m_TOTAL_WB;$/;"	m	class:all_stats_c
m_TOTAL_WRITES	all_stats.h	/^		COUNT_Stat* m_TOTAL_WRITES;$/;"	m	class:all_stats_c
m_TOTAL_WRITE_ACKS	all_stats.h	/^		COUNT_Stat* m_TOTAL_WRITE_ACKS;$/;"	m	class:all_stats_c
m_TRACE_READ_COUNT	all_stats.h	/^		COUNT_Stat* m_TRACE_READ_COUNT;$/;"	m	class:all_stats_c
m_TokensVector	knob.h	/^    vector<string> m_TokensVector; \/**< token vector *\/$/;"	m	class:KnobEntryTokenizer
m_UNCOAL_INST	all_stats.h	/^		COUNT_Stat* m_UNCOAL_INST;$/;"	m	class:all_stats_c
m_UNCOAL_INST_MUL_TRANS	all_stats.h	/^		COUNT_Stat* m_UNCOAL_INST_MUL_TRANS;$/;"	m	class:all_stats_c
m_UOP_COUNT	all_stats.h	/^		COUNT_Stat* m_UOP_COUNT;$/;"	m	class:all_stats_c
m_UOP_COUNT_TOT	all_stats.h	/^		COUNT_Stat* m_UOP_COUNT_TOT;$/;"	m	class:all_stats_c
m_access_counter	cache.h	/^    Counter       m_access_counter; \/\/!< access counter $/;"	m	class:cache_entry_c
m_activate_latency	dram.h	/^    int m_activate_latency; \/**< activate latency *\/$/;"	m	class:dram_controller_c
m_active_mask	trace_read.h	/^  uint32_t     m_active_mask;   \/**< active mask *\/$/;"	m	struct:trace_uop_s
m_active_mask	uop.h	/^    uint32_t          m_active_mask; \/**< GPU : active mask *\/$/;"	m	class:uop_c
m_actual_taken	trace_read.h	/^  bool         m_actual_taken;  \/**< branch actually taken *\/$/;"	m	struct:trace_uop_s
m_actually_taken	trace_read.h	/^  bool     m_actually_taken;    \/**< branch actually taken *\/$/;"	m	struct:trace_info_s
m_addr	dram.h	/^  Addr        m_addr;           \/**< request address *\/$/;"	m	struct:drb_entry_s
m_addr	frontend.h	/^  Addr m_addr;  \/**< cache line address *\/$/;"	m	class:icache_data_c
m_addr	inst_info.h	/^    Addr             m_addr;    \/\/!< address of the instruction$/;"	m	class:inst_info_s
m_addr	memreq_info.h	/^  Addr          m_addr;         \/**< request address *\/ $/;"	m	struct:mem_req_s
m_addr	trace_read.h	/^  Addr         m_addr;          \/**< pc address *\/ $/;"	m	struct:trace_uop_s
m_allCoresStats	statistics.h	/^    vector<CoreStatistics*> m_allCoresStats; \/**< core stats table *\/$/;"	m	class:ProcessorStatistics
m_allKnobs	knob.h	/^    all_knobs_c *m_allKnobs; \/**< the knobs for this component instance **\/$/;"	m	class:KnobsContainer
m_allStats	macsim.h	/^		all_stats_c*         m_allStats; \/**< all statistics *\/$/;"	m	class:macsim_c
m_all_threads	macsim.h	/^		unsigned int m_all_threads; \/**< number of all threads *\/$/;"	m	class:macsim_c
m_alloc_cycle	uop.h	/^    Counter           m_alloc_cycle; \/**< allocated cycle *\/$/;"	m	class:uop_c
m_alloc_q	allocate.h	/^    pqueue_c<int>** m_alloc_q;  \/**< allocation queue *\/$/;"	m	class:allocate_c
m_alloc_q	schedule.h	/^    pqueue_c<int>** m_alloc_q;  \/**< allocation queue *\/$/;"	m	class:schedule_c
m_allocate	core.h	/^    allocate_c*                     m_allocate; \/**< allocation *\/$/;"	m	class:core_c
m_allocate_running	allocate.h	/^    bool            m_allocate_running; \/**< Enable allocation stage *\/$/;"	m	class:allocate_c
m_allocate_running	allocate_smc.h	/^    bool                           m_allocate_running; \/**< Enable allocation stage *\/$/;"	m	class:smc_allocate_c
m_allocq_num	uop.h	/^    ALLOCQ_Type       m_allocq_num; \/**< alloc queue id *\/$/;"	m	class:uop_c
m_alu_uop	trace_read.h	/^  bool         m_alu_uop;       \/**< alu uop *\/ $/;"	m	struct:trace_uop_s
m_appl_cyccount_info	process_manager.h	/^    unordered_map<int, Counter> m_appl_cyccount_info; \/**< per application cycle count info *\/$/;"	m	class:process_manager_c
m_appl_id	cache.h	/^    int           m_appl_id;      \/\/!< application id$/;"	m	class:cache_entry_c
m_appl_id	core.h	/^    int m_appl_id; \/**< id of currently running application *\/$/;"	m	class:core_c
m_appl_id	dram.h	/^  int         m_appl_id;        \/**< application id *\/$/;"	m	struct:drb_entry_s
m_appl_id	memreq_info.h	/^  int           m_appl_id;      \/**< application id *\/$/;"	m	struct:mem_req_s
m_appl_type	utils.h	/^    bool m_appl_type[100]; \/**< false: cpu, true: gpu *\/$/;"	m	class:cache_partition_framework_c
m_applications	process_manager.h	/^  vector<string>       m_applications; \/**< list of sub-applications *\/$/;"	m	struct:process_s
m_arbitration_policy	router.h	/^    int m_arbitration_policy; \/**< arbitration policy *\/$/;"	m	class:router_c
m_assoc	cache.h	/^    int     m_assoc;             \/**< associativity *\/                $/;"	m	class:cache_c
m_assoc	cache.h	/^    int m_assoc; \/**< associativity *\/$/;"	m	class:cache_set_c
m_assoc	memory.h	/^    int       m_assoc; \/**< cache associativity *\/$/;"	m	class:dcu_c
m_bCoreWide	statistics.h	/^    bool m_bCoreWide; \/**< when set, add suffix to the name of a stat *\/$/;"	m	class:AbstractStat
m_bank_busy	exec.h	/^    bool*    m_bank_busy; \/**< indicate dcache bank busy *\/$/;"	m	class:exec_c
m_bank_num	cache.h	/^    int     m_bank_num;          \/**< number of banks *\/             $/;"	m	class:cache_c
m_bank_ready	dram.h	/^    Counter* m_bank_ready; \/**< bank ready cycle *\/$/;"	m	class:dram_controller_c
m_bank_timestamp	dram.h	/^    Counter* m_bank_timestamp; \/**< last touched cycle of a bank *\/$/;"	m	class:dram_controller_c
m_banks	memory.h	/^    int       m_banks; \/**< number of cache banks *\/$/;"	m	class:dcu_c
m_bar_sections	process_manager.h	/^  list<section_info_s*> m_bar_sections; \/**< barrier sections *\/$/;"	m	struct:thread_s
m_bar_type	inst_info.h	/^  Bar_Type    m_bar_type; \/\/!< type of barrier caused by instruction$/;"	m	struct:table_info_s
m_bar_type	trace_read.h	/^  Bar_Type     m_bar_type;      \/**< type of barrier caused by instruction *\/$/;"	m	struct:trace_uop_s
m_bar_type	uop.h	/^    Bar_Type          m_bar_type; \/**< barrier type *\/$/;"	m	class:uop_c
m_base	cache.h	/^    Addr          m_base;         \/\/!< address of first element $/;"	m	class:cache_entry_c
m_begin_sim	macsim.h	/^		struct timeval m_begin_sim; \/**< simulation start time *\/$/;"	m	class:macsim_c	typeref:struct:macsim_c::timeval
m_bid	dram.h	/^  int         m_bid;            \/**< bank id *\/$/;"	m	struct:drb_entry_s
m_bid_mask	dram.h	/^    uns m_bid_mask; \/**< bank id mask *\/$/;"	m	class:dram_controller_c
m_bid_shift	dram.h	/^    uns m_bid_shift; \/**< bank id shift *\/$/;"	m	class:dram_controller_c
m_bid_xor_shift	dram.h	/^    uns m_bid_xor_shift; \/**< bank id xor factor *\/$/;"	m	class:dram_controller_c
m_block_count	process_manager.h	/^  int                  m_block_count; \/**< total block counts *\/$/;"	m	struct:process_s
m_block_id	frontend.h	/^  int32_t m_block_id; \/**< block id *\/$/;"	m	struct:sync_thread_s
m_block_id	memreq_info.h	/^  int           m_block_id;     \/**< GPU block id *\/$/;"	m	struct:mem_req_s
m_block_id	process_manager.h	/^  int                  m_block_id; \/**< block id *\/$/;"	m	struct:thread_s
m_block_id	process_manager.h	/^  int        m_block_id;        \/**< block id *\/$/;"	m	struct:thread_trace_info_node_s
m_block_id	process_manager.h	/^ int32 m_block_id;              \/**< block id *\/$/;"	m	struct:thread_stat_s
m_block_id	uop.h	/^    uns               m_block_id; \/**< GPU data structure *\/$/;"	m	class:uop_c
m_block_id_mapper	macsim.h	/^		multi_key_map_c* m_block_id_mapper; \/**< block id mapper *\/$/;"	m	class:macsim_c
m_block_list	process_manager.h	/^  map<int, bool>       m_block_list; \/**< list of block currently running *\/$/;"	m	struct:process_s
m_block_queue	process_manager.h	/^    unordered_map<int, list<thread_trace_info_node_s *> *> *m_block_queue; \/**< block queue *\/$/;"	m	class:process_manager_c
m_block_schedule_info	macsim.h	/^		unordered_map<int, block_schedule_info_s*> m_block_schedule_info; \/**< block schedule info *\/$/;"	m	class:macsim_c
m_bogus	uop.h	/^    bool              m_bogus;  \/**< mispredicted uops *\/$/;"	m	class:uop_c
m_bom	inst_info.h	/^  bool m_bom; \/**< first uop in an instruction *\/$/;"	m	struct:trace_info_sc_s
m_bom	process_manager.h	/^  bool                 m_bom; \/**< beginning of instruction *\/$/;"	m	struct:thread_s
m_bp	bp.h	/^    bp_dir_base_c     *m_bp; \/**< branch predictor *\/$/;"	m	class:bp_data_c
m_bp_cause_op	bp.h	/^    unordered_map<int, Counter>  m_bp_cause_op; \/**< misprediction caused uop per thread *\/$/;"	m	class:bp_data_c
m_bp_cycle	uop.h	/^    Counter           m_bp_cycle; \/**< branch predictor access cycle *\/$/;"	m	class:uop_c
m_bp_data	allocate.h	/^    bp_data_c*      m_bp_data;  \/**< branch predictor data structure *\/ $/;"	m	class:allocate_c
m_bp_data	core.h	/^    bp_data_c*                      m_bp_data; \/**< branch predictor *\/$/;"	m	class:core_c
m_bp_recovery_cycle	bp.h	/^    unordered_map<int, Counter>  m_bp_recovery_cycle; \/**< bp recovery cycle per thread *\/$/;"	m	class:bp_data_c
m_bp_recovery_info	core.h	/^    unordered_map<int, bp_recovery_info_c*>  m_bp_recovery_info; \/**< thread bp recovery info *\/$/;"	m	class:core_c
m_bp_recovery_info_pool	macsim.h	/^		pool_c<bp_recovery_info_c>* m_bp_recovery_info_pool; \/**<  bp recovery information pool *\/$/;"	m	class:macsim_c
m_bp_redirect_cycle	bp.h	/^    unordered_map<int, Counter>  m_bp_redirect_cycle; \/**< bp recovery cycle per thread *\/$/;"	m	class:bp_data_c
m_bp_targ_pred	bp.h	/^    bp_targ_c         *m_bp_targ_pred;   \/**< BTB *\/ $/;"	m	class:bp_data_c
m_branch_target	trace_read.h	/^  uint32_t m_branch_target;     \/**< branch target address *\/$/;"	m	struct:trace_info_s
m_btb_miss	uop.h	/^    bool  m_btb_miss;           \/**< target is not known at prediction time *\/$/;"	m	class:uop_info_c
m_btb_miss_resolved	uop.h	/^    bool  m_btb_miss_resolved;  \/**< btb miss is handled *\/ $/;"	m	class:uop_info_c
m_btb_set	uop.h	/^    int   m_btb_set;            \/**< btb set address *\/$/;"	m	class:uop_info_c
m_buffer	dram.h	/^    list<drb_entry_s*> *m_buffer; \/**< Dram request buffer (DRB) *\/$/;"	m	class:dram_controller_c
m_buffer	process_manager.h	/^  char*                m_buffer; \/**< trace buffer *\/$/;"	m	struct:thread_s
m_buffer_exhausted	process_manager.h	/^  bool                 m_buffer_exhausted; \/**< read all traces from the buffer *\/$/;"	m	struct:thread_s
m_buffer_free_list	dram.h	/^    list<drb_entry_s*> *m_buffer_free_list; \/**< DRB free list *\/$/;"	m	class:dram_controller_c
m_buffer_index	process_manager.h	/^  int                  m_buffer_index; \/**< current trace buffer index *\/$/;"	m	struct:thread_s
m_buffer_index_max	process_manager.h	/^  int                  m_buffer_index_max; \/**< maximum buffer index *\/$/;"	m	struct:thread_s
m_buffer_max_size	router.h	/^    int m_buffer_max_size; \/**< input\/output buffer max size *\/$/;"	m	class:router_c
m_bug_detector	macsim.h	/^		bug_detector_c *m_bug_detector; \/**< bug detector *\/$/;"	m	class:macsim_c
m_bus_width	dram.h	/^    int m_bus_width; \/**< dram data bus width *\/$/;"	m	class:dram_controller_c
m_bypass	memory.h	/^    bool      m_bypass; \/**< bypass cache *\/$/;"	m	class:dcu_c
m_bypass	memreq_info.h	/^  int           m_bypass;       \/**< bypass last level cache *\/$/;"	m	struct:mem_req_s
m_bypass_llc	uop.h	/^    bool              m_bypass_llc; \/**< bypass last level cache *\/$/;"	m	class:uop_c
m_byte_avail	dram.h	/^    int* m_byte_avail;  \/**< number of available bytes of data bus *\/$/;"	m	class:dram_controller_c
m_cache	memory.h	/^    cache_c*  m_cache; \/**< cache structure *\/$/;"	m	class:dcu_c
m_cache	readonly_cache.h	/^    cache_c   *m_cache; \/**< cache data structure *\/$/;"	m	class:readonly_cache_c
m_cache	sw_managed_cache.h	/^    cache_c  *m_cache;          \/**< cache structure *\/$/;"	m	class:sw_managed_cache_c
m_cache_assoc	readonly_cache.h	/^    uns8       m_cache_assoc; \/**< associativity *\/$/;"	m	class:readonly_cache_c
m_cache_banks	readonly_cache.h	/^    uns8       m_cache_banks; \/**< number of cache banks *\/$/;"	m	class:readonly_cache_c
m_cache_by_pass	cache.h	/^    bool    m_cache_by_pass;     \/**< bypass (disable) cache *\/ $/;"	m	class:cache_c
m_cache_cycles	readonly_cache.h	/^    uns8       m_cache_cycles; \/**< cache latency *\/$/;"	m	class:readonly_cache_c
m_cache_cycles	sw_managed_cache.h	/^    uns8      m_cache_cycles;   \/**< latency *\/$/;"	m	class:sw_managed_cache_c
m_cache_id	memreq_info.h	/^  int           m_cache_id[MEM_LAST]; \/**< each level cache id *\/$/;"	m	struct:mem_req_s
m_cache_line_size	readonly_cache.h	/^    uns8       m_cache_line_size; \/**< cache line size *\/$/;"	m	class:readonly_cache_c
m_cache_line_size	sw_managed_cache.h	/^    uns8      m_cache_line_size; \/**< cache line size *\/$/;"	m	class:sw_managed_cache_c
m_cache_size	readonly_cache.h	/^    uns32      m_cache_size; \/**< cache size *\/$/;"	m	class:readonly_cache_c
m_cache_type	cache.h	/^    Cache_Type m_cache_type; \/**< cache type *\/$/;"	m	class:cache_c
m_cache_type	readonly_cache.h	/^    Cache_Type m_cache_type; \/**< cache type *\/$/;"	m	class:readonly_cache_c
m_caches	router.h	/^    vector<router_c*> m_caches;$/;"	m	class:router_wrapper_c
m_capacity	pqueue.h	/^    int m_capacity; \/**< queue capacity *\/$/;"	m	class:pqueue_c
m_cf_type	inst_info.h	/^  Cf_Type     m_cf_type; \/\/!< type of control flow instruction$/;"	m	struct:table_info_s
m_cf_type	trace_read.h	/^  Cf_Type      m_cf_type;       \/**< type of control flow instruction *\/ $/;"	m	struct:trace_uop_s
m_cf_type	trace_read.h	/^  uint8_t  m_cf_type;           \/**< branch type *\/$/;"	m	struct:trace_info_s
m_cf_type	uop.h	/^    Cf_Type           m_cf_type; \/**< branch type *\/$/;"	m	class:uop_c
m_check_done	core.h	/^    bool    m_check_done; \/**< check heartbeat done *\/$/;"	m	class:heartbeat_s
m_child_uops	uop.h	/^    uop_c           **m_child_uops; \/**< children uops *\/$/;"	m	class:uop_c
m_cid	dram.h	/^  int         m_cid;            \/**< column id *\/$/;"	m	struct:drb_entry_s
m_cid_mask	dram.h	/^    uns m_cid_mask; \/**< column id mask *\/$/;"	m	class:dram_controller_c
m_clock_divisor	macsim.h	/^    int m_clock_divisor[5]; \/**< clock divisor *\/$/;"	m	class:macsim_c
m_clock_internal	macsim.h	/^    int m_clock_internal; \/**< internal macsim clock *\/$/;"	m	class:macsim_c
m_clock_lcm	macsim.h	/^    int m_clock_lcm; \/**< main clock period *\/$/;"	m	class:macsim_c
m_column_latency	dram.h	/^    int m_column_latency; \/**< column access latency *\/$/;"	m	class:dram_controller_c
m_const_cache	core.h	/^    readonly_cache_c               *m_const_cache; \/**< GPU : constant cache *\/$/;"	m	class:core_c
m_core	frontend.h	/^    core_c*       m_core; \/**< core pointer *\/$/;"	m	class:frontend_c
m_core0_inst_count	macsim.h	/^		Counter m_core0_inst_count; \/**< core 0 inst count for debug\/assert *\/$/;"	m	class:macsim_c
m_coreID	statistics.h	/^    unsigned int m_coreID; \/**< core id *\/$/;"	m	class:AbstractStat
m_coreID	statistics.h	/^    unsigned int m_coreID; \/**< core id *\/$/;"	m	class:CoreStatistics
m_coreStatsTemplate	macsim.h	/^		CoreStatistics*      m_coreStatsTemplate; \/**< core stat template *\/$/;"	m	class:macsim_c
m_core_cycle	macsim.h	/^		Counter m_core_cycle[MAX_NUM_CORES];\/**< core cycle count *\/$/;"	m	class:macsim_c
m_core_cycle_count	core.h	/^    Counter                  m_core_cycle_count; \/**< current core cycle *\/$/;"	m	class:core_c
m_core_end_trace	macsim.h	/^		bool m_core_end_trace[MAX_NUM_CORES]; \/**< core end trace flag *\/$/;"	m	class:macsim_c
m_core_id	allocate.h	/^    int             m_core_id; \/**< core id *\/$/;"	m	class:allocate_c
m_core_id	allocate_smc.h	/^    int                            m_core_id; \/**< core id *\/$/;"	m	class:smc_allocate_c
m_core_id	bp.h	/^    int                m_core_id; \/**< core id *\/$/;"	m	class:bp_data_c
m_core_id	bp_targ.h	/^     uns m_core_id; \/**< Core id *\/$/;"	m	class:bp_targ_c
m_core_id	cache.h	/^    int     m_core_id;           \/**< core id *\/$/;"	m	class:cache_c
m_core_id	core.h	/^    int                      m_core_id; \/**< core id *\/$/;"	m	class:core_c
m_core_id	dram.h	/^  int         m_core_id;        \/**< core id *\/$/;"	m	struct:drb_entry_s
m_core_id	memory.h	/^  int     m_core_id;            \/**< core id *\/$/;"	m	struct:dcache_data_s
m_core_id	memreq_info.h	/^  int           m_core_id;      \/**< core id *\/$/;"	m	struct:mem_req_s
m_core_id	memreq_info.h	/^  int     m_core_id;            \/**< core id *\/$/;"	m	struct:pref_req_info_s
m_core_id	readonly_cache.h	/^    int        m_core_id; \/**< core id *\/$/;"	m	class:readonly_cache_c
m_core_id	rob_smc.h	/^    int             m_core_id;    \/**< core id *\/$/;"	m	class:smc_rob_c
m_core_id	schedule.h	/^    int             m_core_id;  \/**< core id *\/ $/;"	m	class:schedule_c
m_core_id	sw_managed_cache.h	/^    int       m_core_id;        \/**< core id *\/$/;"	m	class:sw_managed_cache_c
m_core_id	uop.h	/^    int               m_core_id; \/**< core id *\/$/;"	m	class:uop_c
m_core_in	memreq_info.h	/^  Counter       m_core_in;      \/**< request inserted cycle *\/$/;"	m	struct:mem_req_s
m_core_list	process_manager.h	/^  map<int, bool>       m_core_list; \/**< list of cores that this process is executed *\/$/;"	m	struct:process_s
m_core_map_data	map.h	/^    hash_c<map_data_c>* m_core_map_data; \/**< per thread dependence table *\/$/;"	m	class:map_c
m_core_pointers	macsim.h	/^		core_c *m_core_pointers[MAX_NUM_CORES]; \/**< core pointers *\/$/;"	m	class:macsim_c
m_core_pool	process_manager.h	/^  queue<int>          *m_core_pool; \/**< core pool pointer *\/$/;"	m	struct:process_s
m_core_started	macsim.h	/^		bool m_core_started[MAX_NUM_CORES]; \/**< core started flag *\/$/;"	m	class:macsim_c
m_core_stat_files	macsim.h	/^		ofstream *m_core_stat_files[MAX_NUM_CORES]; \/**<  core statistics files *\/$/;"	m	class:macsim_c
m_core_type	core.h	/^    string                   m_core_type; \/**< simulation core type (x86 or ptx) *\/$/;"	m	class:core_c
m_cores	router.h	/^    vector<router_c*> m_cores;$/;"	m	class:router_wrapper_c
m_count	schedule.h	/^    int             m_count[max_ALLOCQ]; \/**< total scheduled uop *\/$/;"	m	class:schedule_c
m_count	statistics.h	/^    unsigned long long m_count; \/**< count during the current stat interval *\/$/;"	m	class:AbstractStat
m_coupled_down	memory.h	/^    bool      m_coupled_down; \/**< directly connected to downward cache w\/o NoC *\/$/;"	m	class:dcu_c
m_coupled_up	memory.h	/^    bool      m_coupled_up; \/**< directly connected to upward cache w\/o NoC *\/$/;"	m	class:dcu_c
m_cpu_entry_down	noc.h	/^    list<noc_entry_s*>* m_cpu_entry_down; \/**< cpu request list to lower level *\/$/;"	m	class:noc_c
m_cpu_entry_up	noc.h	/^    list<noc_entry_s*>* m_cpu_entry_up; \/**< cpu request list to upper level *\/$/;"	m	class:noc_c
m_credit	router.h	/^    int** m_credit; \/**< credit counter for the flow control *\/$/;"	m	class:router_c
m_credit_pool	router.h	/^    pool_c<credit_c>* m_credit_pool; \/**< credit pool *\/$/;"	m	class:router_c
m_credit_pool	router.h	/^    pool_c<credit_c>* m_credit_pool; \/**< credit pool *\/$/;"	m	class:router_wrapper_c
m_cur_core_cycle	allocate.h	/^    Counter         m_cur_core_cycle; \/**< current core cycle *\/$/;"	m	class:allocate_c
m_cur_core_cycle	allocate_smc.h	/^    Counter                        m_cur_core_cycle; \/**< current core cycle *\/$/;"	m	class:smc_allocate_c
m_cur_core_cycle	exec.h	/^    Counter m_cur_core_cycle;  \/**< current core cycle *\/$/;"	m	class:exec_c
m_cur_core_cycle	frontend.h	/^    Counter       m_cur_core_cycle; \/**< current core cycle *\/$/;"	m	class:frontend_c
m_cur_core_cycle	retire.h	/^    Counter                     m_cur_core_cycle; \/**< current core cycle *\/ $/;"	m	class:retire_c
m_cur_core_cycle	schedule.h	/^    Counter         m_cur_core_cycle; \/**< current core cycle *\/$/;"	m	class:schedule_c
m_curr_l2_misses	pref_common.h	/^    Counter m_curr_l2_misses; \/**< number of total l2 misses in current period *\/$/;"	m	class:hwp_common_c
m_curr_pfpol	pref_common.h	/^    Counter m_curr_pfpol; \/**< number of prefetch pollution in current period *\/$/;"	m	class:hwp_common_c
m_curr_region_sent	pref_common.h	/^    Counter m_curr_region_sent; \/**< number of region sent in current period *\/$/;"	m	class:hwp_common_c
m_curr_region_useful	pref_common.h	/^    Counter m_curr_region_useful; \/**< number of useful region in current period *\/$/;"	m	class:hwp_common_c
m_current_file_name_base	process_manager.h	/^  string               m_current_file_name_base; \/**< current sub-appl.'s filename base *\/$/;"	m	struct:process_s
m_current_index	pqueue.h	/^    int m_current_index; \/**< current bucket index *\/$/;"	m	class:pqueue_c
m_current_list	dram.h	/^    drb_entry_s** m_current_list; \/**< Currently servicing request in each DRB *\/$/;"	m	class:dram_controller_c
m_current_rid	dram.h	/^    int* m_current_rid; \/**< Current open row id *\/$/;"	m	class:dram_controller_c
m_current_vector_index	process_manager.h	/^  unsigned int         m_current_vector_index; \/**< current index to the sub-application *\/$/;"	m	struct:process_s
m_cycle	core.h	/^    Counter m_cycle; \/**< clock cycle *\/$/;"	m	class:core_c
m_cycle	dram.h	/^    Counter m_cycle; \/**< dram clock cycle *\/$/;"	m	class:dram_controller_c
m_cycle	memory.h	/^    Counter m_cycle; \/**< clock cycle *\/$/;"	m	class:dcu_c
m_cycle	memory.h	/^    Counter m_cycle; \/**< clock cycle *\/$/;"	m	class:memory_c
m_cycle	router.h	/^    Counter m_cycle; \/**< clock cycle *\/$/;"	m	class:router_wrapper_c
m_cycle	router.h	/^    Counter m_cycle; \/**< router clock *\/$/;"	m	class:router_c
m_data	cache.h	/^    void         *m_data;         \/\/!< poiter to arbitrary data $/;"	m	class:cache_entry_c
m_data	map.h	/^    Quad   m_data;              \/**< memory dependence data *\/$/;"	m	class:mem_map_entry_c
m_data	pqueue.h	/^    T m_data;  \/**< entry data *\/$/;"	m	struct:pqueue_c::pqueue_entry_s
m_data_avail	dram.h	/^    Counter* m_data_avail; \/**< data avail cycle *\/$/;"	m	class:dram_controller_c
m_data_ready	dram.h	/^    Counter* m_data_ready; \/**< data ready cycle *\/$/;"	m	class:dram_controller_c
m_data_size	cache.h	/^    int     m_data_size;         \/**< cache data size *\/$/;"	m	class:cache_c
m_dbus_ready	dram.h	/^    Counter* m_dbus_ready; \/**< bus ready cycle *\/$/;"	m	class:dram_controller_c
m_dcache_bank_busy	frontend.h	/^    bool          m_dcache_bank_busy[129]; \/**< dcache bank busy status *\/$/;"	m	class:frontend_c
m_dcache_bank_id	uop.h	/^    int               m_dcache_bank_id; \/**< dcache bank id *\/$/;"	m	class:uop_c
m_dcache_cycles	exec.h	/^    uns8    m_dcache_cycles; \/**< L1 cache latency *\/$/;"	m	class:exec_c
m_dcmiss	uop.h	/^    bool  m_dcmiss;             \/**< data cache miss *\/$/;"	m	class:uop_info_c
m_default_prefetcher	pref_common.h	/^    uns8 m_default_prefetcher; \/**< default (best of hybrid) prefetcher *\/$/;"	m	class:hwp_common_c
m_denominatorID	statistics.h	/^    long m_denominatorID; \/**< stat id *\/$/;"	m	class:PERCENT_Stat
m_dest_info	uop.h	/^    uns16             m_dest_info[MAX_DESTS]; \/**< destination information *\/$/;"	m	class:uop_c
m_dests	inst_info.h	/^    reg_info_s       m_dests[MAX_DESTS]; \/\/!< destination register information$/;"	m	class:inst_info_s
m_dests	trace_read.h	/^  reg_info_s   m_dests[MAX_DESTS]; \/**< destination register information *\/$/;"	m	struct:trace_uop_s
m_dir	router.h	/^    int        m_dir; \/**< direction *\/$/;"	m	class:flit_c
m_dir	uop.h	/^    uns8              m_dir; \/**< branch direction *\/$/;"	m	class:uop_c
m_dirty	cache.h	/^    bool          m_dirty;        \/\/!< data is dirty $/;"	m	class:cache_entry_c
m_dirty	memory.h	/^  bool    m_dirty;              \/**< line dirty *\/$/;"	m	struct:dcache_data_s
m_dirty	memreq_info.h	/^  bool          m_dirty;        \/**< wb request? *\/$/;"	m	struct:mem_req_s
m_disable	memory.h	/^    bool      m_disable; \/**< disabled *\/$/;"	m	class:dcu_c
m_dispatch_busy_cycle	schedule_smc.h	/^    Counter *m_dispatch_busy_cycle; \/**<model the variable throughputs of different instructions *\/$/;"	m	class:schedule_smc_c
m_dispatch_done	process_manager.h	/^  int     m_dispatch_done;      \/**< dispatch done *\/$/;"	m	struct:block_schedule_info_s
m_dispatch_latency	schedule_smc.h	/^    int m_dispatch_latency[NUM_UOP_TYPES]; \/**<dispatch latency of different instructions *\/$/;"	m	class:schedule_smc_c
m_dispatched_core_id	process_manager.h	/^  int     m_dispatched_core_id; \/**< core id in which this block is launched *\/$/;"	m	struct:block_schedule_info_s
m_dispatched_thread_num	process_manager.h	/^  int     m_dispatched_thread_num; \/**< number of dispatched threads *\/$/;"	m	struct:block_schedule_info_s
m_distributionMembers	statistics.h	/^  vector<long>  m_distributionMembers; \/**< stat table *\/$/;"	m	class:DIST_Stat
m_distributions	statistics.h	/^    vector<DIST_Stat*> m_distributions; \/**< distribution stats *\/$/;"	m	class:CoreStatistics
m_distributions	statistics.h	/^    vector<DIST_Stat*> m_distributions; \/**< distribution stats *\/$/;"	m	class:GlobalStatistics
m_done	memory.h	/^    bool      m_done; \/**< done_func can be called *\/$/;"	m	class:dcu_c
m_done	memreq_info.h	/^  bool          m_done;         \/**< request done flag *\/$/;"	m	struct:mem_req_s
m_done_cycle	uop.h	/^    Counter           m_done_cycle; \/**< done cycle *\/$/;"	m	class:uop_c
m_done_func	memreq_info.h	/^  function<bool (mem_req_s*)> m_done_func; \/**< done function *\/$/;"	m	struct:mem_req_s
m_dram_controller	macsim.h	/^    dram_controller_c** m_dram_controller; \/**< dram controller *\/$/;"	m	class:macsim_c
m_dram_interleave_factor	memory.h	/^    int m_dram_interleave_factor; \/**< mask bit for dram id *\/$/;"	m	class:memory_c
m_ds_injection_buffer	router.h	/^    queue<mem_req_s *> m_ds_injection_buffer;$/;"	m	class:router_c
m_ds_injection_buffer_max_size	router.h	/^    int m_ds_injection_buffer_max_size;$/;"	m	class:router_c
m_ds_start	router.h	/^    int m_ds_start;$/;"	m	class:router_c
m_dst	noc.h	/^  int     m_dst; \/**< packet dst *\/$/;"	m	struct:noc_entry_s
m_dst	router.h	/^    int        m_dst; \/**< msg destination *\/$/;"	m	class:flit_c
m_dst	trace_read.h	/^  uint8_t  m_dst[MAX_DST_NUM];  \/**< dest register id *\/$/;"	m	struct:trace_info_s
m_dst_map	memory.h	/^    map<int, int>* m_dst_map; \/**< destination id mapping function *\/$/;"	m	class:memory_c
m_dstream	router.h	/^    vector<router_c *> m_dstream; \/**< down stream routers *\/$/;"	m	class:router_c
m_ei_power	macsim.h	/^		ei_power_c* m_ei_power; \/**< energy introspector *\/$/;"	m	class:macsim_c
m_enable_partition	cache.h	/^    bool    m_enable_partition;  \/**< Enable cache partition *\/$/;"	m	class:cache_c
m_enable_vc_partition	router.h	/^    bool m_enable_vc_partition; \/**< enable virtual channel partition *\/$/;"	m	class:router_c
m_end_sim	macsim.h	/^		struct timeval m_end_sim; \/**< simulation termination time *\/$/;"	m	class:macsim_c	typeref:struct:macsim_c::timeval
m_end_simulation	macsim.h	/^		int m_end_simulation; \/**< flag to end simulation *\/$/;"	m	class:macsim_c
m_entry	cache.h	/^    cache_entry_c* m_entry; \/**< cache entries *\/$/;"	m	class:cache_set_c
m_entry	memory.h	/^    list<mem_req_s*> m_entry; \/**< queue entries *\/$/;"	m	class:queue_c
m_entry	pqueue.h	/^    list<pqueue_entry_s *>* m_entry; \/**< queue buckets *\/$/;"	m	class:pqueue_c
m_entry_pool	pqueue.h	/^    pool_c<pqueue_entry_s>* m_entry_pool; \/**< queue entry full *\/$/;"	m	class:pqueue_c
m_eom	inst_info.h	/^  bool m_eom; \/**< last uop in an instruction *\/$/;"	m	struct:trace_info_sc_s
m_eom	process_manager.h	/^  bool                 m_eom; \/**< end of instruction *\/$/;"	m	struct:thread_s
m_eom	trace_read.h	/^  bool         m_eom;           \/**< end of macro *\/$/;"	m	struct:trace_uop_s
m_exec	core.h	/^    exec_c*                         m_exec; \/**< execution *\/$/;"	m	class:core_c
m_exec	schedule.h	/^    exec_c*         m_exec;     \/**< execution stage pointer *\/$/;"	m	class:schedule_c
m_exec_cycle	uop.h	/^    Counter           m_exec_cycle; \/**< execution cycle *\/$/;"	m	class:uop_c
m_extra_fetch	frontend.h	/^  uint32_t           m_extra_fetch; \/**< extra fetch *\/$/;"	m	struct:frontend_s
m_fe_mode	frontend.h	/^  FRONTEND_MODE      m_fe_mode; \/**< current frontend mode for thread *\/ $/;"	m	struct:frontend_s
m_fe_prev_mode	frontend.h	/^  FRONTEND_MODE      m_fe_prev_mode; \/**< previous frontend mode for thread *\/$/;"	m	struct:frontend_s
m_fe_running	frontend.h	/^    bool          m_fe_running; \/**< enabled frontend *\/$/;"	m	class:frontend_c
m_fe_stall	frontend.h	/^    bool          m_fe_stall; \/**< frontend stalled *\/$/;"	m	class:frontend_c
m_fetch_addr	frontend.h	/^  Addr m_fetch_addr; \/**< current fetch address *\/ $/;"	m	struct:mt_scheduler_s
m_fetch_arbiter	frontend.h	/^    int           m_fetch_arbiter; \/**< fetch arbiter *\/$/;"	m	class:frontend_c
m_fetch_blocked	frontend.h	/^  bool               m_fetch_blocked; \/**< fetch blocked *\/$/;"	m	struct:frontend_s
m_fetch_cycle	memory.h	/^  Counter m_fetch_cycle;        \/**< fetched cycle *\/$/;"	m	struct:dcache_data_s
m_fetch_data	process_manager.h	/^  frontend_s*          m_fetch_data; \/**< frontend fetch data *\/ $/;"	m	struct:thread_s
m_fetch_ended	core.h	/^    unordered_map<int, bool> m_fetch_ended; \/**< fetch ended *\/$/;"	m	class:core_c
m_fetch_modulo	frontend.h	/^    int           m_fetch_modulo; \/**< fetch modulo *\/$/;"	m	class:frontend_c
m_fetch_ratio	frontend.h	/^    int           m_fetch_ratio; \/**< how often fetch an instruction (GPU only) *\/$/;"	m	class:frontend_c
m_fetch_ready_addr	frontend.h	/^  Addr               m_fetch_ready_addr; \/**< fetch address waiting for begin serviced *\/$/;"	m	struct:frontend_s
m_fetched_cycle	uop.h	/^    Counter           m_fetched_cycle; \/**< fetched cycle *\/$/;"	m	class:uop_c
m_fetching_block_id	core.h	/^    int m_fetching_block_id;    \/**< currently fetching block id *\/$/;"	m	class:core_c
m_fetching_thread_num	core.h	/^    int m_fetching_thread_num;  \/**< number of currently fetching threads *\/$/;"	m	class:core_c
m_file	utils.h	/^    ofstream m_file; \/**< output stream *\/$/;"	m	class:cache_partition_framework_c
m_fileName	statistics.h	/^    string m_fileName; \/**< name of file to print stats *\/$/;"	m	class:AbstractStat
m_file_opened	process_manager.h	/^  bool                 m_file_opened; \/**< trace file opened? *\/$/;"	m	struct:thread_s
m_fill_queue	memory.h	/^    queue_c*  m_fill_queue; \/**< fill queue *\/$/;"	m	class:dcu_c
m_first_entry	rob.h	/^    int       m_first_entry; \/**< to maintain circular rob *\/ $/;"	m	class:rob_c
m_first_schlist	schedule_smc.h	/^    int m_first_schlist; \/**< current index in schedule list *\/$/;"	m	class:schedule_smc_c
m_first_schlist_ptr	schedule.h	/^    int             m_first_schlist_ptr; \/**< first index to sched list in OOO *\/$/;"	m	class:schedule_c
m_first_time	frontend.h	/^  bool               m_first_time; \/**< first time to be called *\/$/;"	m	struct:frontend_s
m_flit_pool	router.h	/^    pool_c<flit_c>* m_flit_pool; \/**< flit data structure pool *\/$/;"	m	class:router_c
m_flit_pool	router.h	/^    pool_c<flit_c>* m_flit_pool; \/**< flit data structure pool *\/$/;"	m	class:router_wrapper_c
m_fp_sched_rate	exec.h	/^    uns16   m_fp_sched_rate; \/**< fp schedule rate *\/$/;"	m	class:exec_c
m_fp_uop_table	trace_read.h	/^    int m_fp_uop_table[TR_OPCODE_LAST]; \/**< opcode to uop type mapping tabpe (fp) *\/$/;"	m	class:trace_read_c
m_free_cnt	rob.h	/^    int       m_free_cnt; \/**< free rob entries *\/$/;"	m	class:rob_c
m_free_list	rob_smc.h	/^    list<int>       m_free_list;  \/**< thread rob pool *\/ $/;"	m	class:smc_rob_c
m_frontend	core.h	/^    frontend_c*                     m_frontend; \/**< frontend *\/$/;"	m	class:core_c
m_frontend	schedule.h	/^    frontend_c*     m_frontend; \/**< frontend pointer *\/$/;"	m	class:schedule_c
m_frontend_q	allocate.h	/^    pqueue_c<int*>* m_frontend_q; \/**< frontend queue *\/$/;"	m	class:allocate_c
m_frontend_q	allocate_smc.h	/^    pqueue_c<int*>*                m_frontend_q; \/**< frontend queue *\/$/;"	m	class:smc_allocate_c
m_func	fetch_factory.h	/^    function<frontend_c * (FRONTEND_INTERFACE_PARAMS(), macsim_c*)> m_func;$/;"	m	class:fetch_factory_c
m_func_table	fetch_factory.h	/^    map<string, function<frontend_c * (FRONTEND_INTERFACE_PARAMS(), macsim_c*)> > m_func_table;$/;"	m	class:fetch_factory_c
m_func_table	pref_factory.h	/^    list<function<void (vector<pref_base_c *>&, hwp_common_c*, Unit_Type, macsim_c*)> > m_func_table;$/;"	m	class:pref_factory_c
m_globalStatistics	statistics.h	/^    GlobalStatistics*  m_globalStatistics; \/**< global stats *\/$/;"	m	class:ProcessorStatistics
m_globalStats	statistics.h	/^    vector<AbstractStat*> m_globalStats; \/**< global stats *\/$/;"	m	class:GlobalStatistics
m_global_hist	bp.h	/^    uns32       m_global_hist; \/**< global branch history (32-bit) *\/$/;"	m	class:bp_dir_base_c
m_global_hist	uop.h	/^    uns32 m_global_hist; \/**< global branch history 32-bit *\/$/;"	m	class:recovery_info_c
m_global_hist_64	bp.h	/^    uns64       m_global_hist_64; \/**< global branch history (64-bit) *\/$/;"	m	class:bp_dir_base_c
m_global_hist_64	uop.h	/^    uns64 m_global_hist_64; \/**< global branch history 64-bit *\/$/;"	m	class:recovery_info_c
m_gpu_alloc_q	allocate_smc.h	/^    pqueue_c<gpu_allocq_entry_s>** m_gpu_alloc_q; \/**< GPU allocation queue *\/$/;"	m	class:smc_allocate_c
m_gpu_allocate	core.h	/^    smc_allocate_c*                 m_gpu_allocate; \/**< GPU allocation *\/$/;"	m	class:core_c
m_gpu_allocq	schedule_smc.h	/^    pqueue_c<gpu_allocq_entry_s>** m_gpu_allocq; \/**< gpu allocation queue *\/ $/;"	m	class:schedule_smc_c
m_gpu_entry_down	noc.h	/^    list<noc_entry_s*>* m_gpu_entry_down; \/**< cpu request list to lower level *\/$/;"	m	class:noc_c
m_gpu_entry_up	noc.h	/^    list<noc_entry_s*>* m_gpu_entry_up; \/**< gpu request list to upper level *\/$/;"	m	class:noc_c
m_gpu_paused	macsim.h	/^		bool m_gpu_paused;  \/**< indicate whether GPU can start its execution *\/$/;"	m	class:macsim_c
m_gpu_q_iaq	core.h	/^    pqueue_c<gpu_allocq_entry_s>**  m_gpu_q_iaq; \/**< GPU allocation queue *\/$/;"	m	class:core_c
m_gpu_rob	allocate_smc.h	/^    smc_rob_c*                     m_gpu_rob; \/**< GPU reorder buffer *\/$/;"	m	class:smc_allocate_c
m_gpu_rob	core.h	/^    smc_rob_c*                      m_gpu_rob; \/**< GPU rob *\/$/;"	m	class:core_c
m_gpu_rob	schedule_smc.h	/^    smc_rob_c* m_gpu_rob;  \/**< gpu rob *\/$/;"	m	class:schedule_smc_c
m_gpuline	cache.h	/^    bool          m_gpuline;      \/\/!< gpu cache line$/;"	m	class:cache_entry_c
m_has_immediate	trace_read.h	/^  bool     m_has_immediate;     \/**< has immediate field *\/$/;"	m	struct:trace_info_s
m_has_router	memory.h	/^    bool      m_has_router; \/**< has network router in this level *\/$/;"	m	class:dcu_c
m_has_st	trace_read.h	/^  bool     m_has_st;            \/**< has store operation *\/ $/;"	m	struct:trace_info_s
m_head	router.h	/^    bool       m_head; \/**< header flit? *\/$/;"	m	class:flit_c
m_heartbeat	core.h	/^    unordered_map<int, heartbeat_s*> m_heartbeat; \/**< heartbeat per thread*\/$/;"	m	class:core_c
m_heartbeat_check_done_core	core.h	/^    bool    m_heartbeat_check_done_core; \/**< check heartbeat done *\/$/;"	m	class:core_c
m_heartbeat_last_cycle_count_core	core.h	/^    Counter m_heartbeat_last_cycle_count_core; \/**< last heartbeat cycle *\/$/;"	m	class:core_c
m_heartbeat_last_inst_count_core	core.h	/^    Counter m_heartbeat_last_inst_count_core; \/**< last heartbeat inst. count *\/$/;"	m	class:core_c
m_heartbeat_last_time_core	core.h	/^    time_t  m_heartbeat_last_time_core; \/**< last heartbeat time *\/$/;"	m	class:core_c
m_heartbeat_pool	macsim.h	/^		pool_c<heartbeat_s>* m_heartbeat_pool; \/**<  heartbeat data pool *\/$/;"	m	class:macsim_c
m_heartbeat_printed_inst_count_core	core.h	/^    Counter m_heartbeat_printed_inst_count_core; \/**< last printed heartbeat inst. count *\/$/;"	m	class:core_c
m_hw_pref	core.h	/^    hwp_common_c                   *m_hw_pref; \/**< hardware prefetcher *\/$/;"	m	class:core_c
m_ibp_miss	uop.h	/^    bool  m_ibp_miss;           \/**< indirect branch miss *\/$/;"	m	class:uop_info_c
m_icache	core.h	/^    cache_c*                        m_icache; \/**< instruction cache *\/$/;"	m	class:core_c
m_icmiss	uop.h	/^    bool  m_icmiss;             \/**< instruction cache miss *\/$/;"	m	class:uop_info_c
m_id	dram.h	/^    int m_id; \/**< dram controller id *\/$/;"	m	class:dram_controller_c
m_id	dram.h	/^  int         m_id;             \/**< drb entry id *\/$/;"	m	struct:drb_entry_s
m_id	inst_info.h	/^  uns16    m_id;                 \/\/!< flattened register number (unique across sets)$/;"	m	struct:reg_info_s
m_id	memory.h	/^    int       m_id; \/**< cache id *\/$/;"	m	class:dcu_c
m_id	memreq_info.h	/^  int           m_id;           \/**< unique request id *\/                         $/;"	m	struct:mem_req_s
m_id	router.h	/^    int        m_id; \/**< flit id *\/$/;"	m	class:flit_c
m_id	router.h	/^    int m_id; \/**< router id *\/$/;"	m	class:router_c
m_in	memreq_info.h	/^  Counter       m_in;           \/**< request inserted cycle *\/$/;"	m	struct:mem_req_s
m_in_iaq	uop.h	/^    bool              m_in_iaq; \/**< in allocation queue *\/$/;"	m	class:uop_c
m_in_queue	memory.h	/^    queue_c*  m_in_queue; \/**< input queue *\/$/;"	m	class:dcu_c
m_in_scheduler	uop.h	/^    bool              m_in_scheduler; \/**< in scheduler *\/$/;"	m	class:uop_c
m_info	trace_read.h	/^  inst_info_s *m_info;          \/**< pointer to the instruction hash table *\/ $/;"	m	struct:trace_uop_s
m_injection_buffer	router.h	/^    list<mem_req_s*>* m_injection_buffer; \/**< injection queue *\/$/;"	m	class:router_c
m_injection_buffer_max_size	router.h	/^    int m_injection_buffer_max_size; \/**< max injection queue size *\/$/;"	m	class:router_c
m_input_buffer	router.h	/^    list<flit_c*>** m_input_buffer; \/**< input buffer *\/$/;"	m	class:router_c
m_insert_count	cache.h	/^    Counter m_insert_count;      \/**< total cache line insertion *\/$/;"	m	class:cache_c
m_inst_count	core.h	/^    Counter                  m_inst_count; \/**< current instruction count *\/$/;"	m	class:core_c
m_inst_count	process_manager.h	/^  uint64_t             m_inst_count; \/**< total instruction counts *\/$/;"	m	struct:thread_s
m_inst_count	process_manager.h	/^  uint64_t m_inst_count; \/**< this stores inst. count of the main thread when the thread $/;"	m	struct:thread_start_info_s
m_inst_count_tot	process_manager.h	/^  uns64                m_inst_count_tot; \/**< total instruction counts *\/$/;"	m	struct:process_s
m_inst_fetched	core.h	/^    unordered_map<int, Counter> m_inst_fetched; \/**< last fetched cycle for the thread *\/$/;"	m	class:core_c
m_inst_hash_pool	process_manager.h	/^    pool_c<hash_c<inst_info_s> >* m_inst_hash_pool; \/**< instruction hash pool *\/$/;"	m	class:process_manager_c
m_inst_info_hash	macsim.h	/^		unordered_map<int, hash_c<inst_info_s>*> m_inst_info_hash; \/**< decoded instruction map *\/$/;"	m	class:macsim_c
m_inst_num	map.h	/^    Counter  m_inst_num;        \/**< uop's instruction number *\/$/;"	m	class:map_entry_c
m_inst_num	uop.h	/^    Counter           m_inst_num; \/**< instruction number *\/$/;"	m	class:uop_c
m_inst_size	inst_info.h	/^  uns8 m_inst_size; \/\/!< instruction size in x86 instructions $/;"	m	struct:trace_info_sc_s
m_inst_size	trace_read.h	/^  int          m_inst_size;     \/**< instruction size *\/$/;"	m	struct:trace_uop_s
m_instruction_addr	trace_read.h	/^  uint32_t m_instruction_addr;  \/**< pc address *\/$/;"	m	struct:trace_info_s
m_instruction_next_addr	trace_read.h	/^  uint32_t m_instruction_next_addr; \/**< next pc address, not in raw trace format *\/$/;"	m	struct:trace_info_s
m_insts_retired	retire.h	/^    unordered_map<int, Counter> m_insts_retired; \/**< number of retired inst. per thread *\/$/;"	m	class:retire_c
m_int_sched_rate	exec.h	/^    uns16   m_int_sched_rate; \/**< int schedule rate *\/$/;"	m	class:exec_c
m_int_uop_table	trace_read.h	/^    int m_int_uop_table[TR_OPCODE_LAST]; \/**< opcode to uop type mapping table (int) *\/$/;"	m	class:trace_read_c
m_interleave_bits	cache.h	/^    int     m_interleave_bits;   \/**< number of bits taken by interleaving factor *\/$/;"	m	class:cache_c
m_interleave_factor	cache.h	/^    int     m_interleave_factor; \/**< granularity of interleaving across tiles *\/$/;"	m	class:cache_c
m_interleave_mask	cache.h	/^    Addr    m_interleave_mask;   \/**< interleave factor mask *\/$/;"	m	class:cache_c
m_invalid_uop	macsim.h	/^		uop_c *m_invalid_uop; \/**<  invalide uop pointer (for uop pool maintenance) *\/$/;"	m	class:macsim_c
m_iris_network	macsim.h	/^		Topology* m_iris_network; \/**< iris topology *\/$/;"	m	class:macsim_c
m_iris_node_id	memory.h	/^    int *m_iris_node_id; \/**< noc id for iris network nodes *\/$/;"	m	class:memory_c
m_iris_params	macsim.h	/^		map<string, string> m_iris_params; \/**< iris configurations *\/$/;"	m	class:macsim_c
m_isTemplate	statistics.h	/^    bool m_isTemplate; \/**< is template *\/$/;"	m	class:AbstractStat
m_isTemplate	statistics.h	/^    bool m_isTemplate; \/**< is template? *\/$/;"	m	class:CoreStatistics
m_is_fp	trace_read.h	/^  bool     m_is_fp;             \/**< fp operation *\/$/;"	m	struct:trace_info_s
m_isitBOM	uop.h	/^    bool              m_isitBOM; \/**< first uop of an instruction *\/$/;"	m	class:uop_c
m_isitEOM	uop.h	/^    bool              m_isitEOM; \/**< last uop of an instruction *\/$/;"	m	class:uop_c
m_kernel_block_start_count	process_manager.h	/^  vector<int>          m_kernel_block_start_count; \/**< block id start count for sub-appl. *\/$/;"	m	struct:process_s
m_kernel_config_name	process_manager.h	/^  string               m_kernel_config_name; \/**< kernel config file name *\/$/;"	m	struct:process_s
m_knob_enable_pref	core.h	/^    bool m_knob_enable_pref;     \/**< enable hardware prefetcher *\/$/;"	m	class:core_c
m_knob_fetch_width	frontend.h	/^    uns16         m_knob_fetch_width; \/**< fetch width *\/$/;"	m	class:frontend_c
m_knob_icache_line_size	frontend.h	/^    uns           m_knob_icache_line_size; \/**< icache line size *\/$/;"	m	class:frontend_c
m_knob_num_threads	rob_smc.h	/^    int             m_knob_num_threads; \/**< max threads per core *\/$/;"	m	class:smc_rob_c
m_knob_ptx_sim	frontend.h	/^    bool          m_knob_ptx_sim; \/**< GPU simulation *\/$/;"	m	class:frontend_c
m_knob_ptx_sim	retire.h	/^    bool                        m_knob_ptx_sim; \/**< gpu simulation *\/$/;"	m	class:retire_c
m_knob_rob_size	rob.h	/^    uns16     m_knob_rob_size; \/**< reorder buffer size *\/$/;"	m	class:rob_c
m_knob_sched_to_width	schedule.h	/^    uns16           m_knob_sched_to_width; \/**< knob sched to width FIXME *\/$/;"	m	class:schedule_c
m_knob_width	allocate.h	/^    uns16           m_knob_width; \/**< width *\/$/;"	m	class:allocate_c
m_knob_width	allocate_smc.h	/^    uns16                          m_knob_width; \/**< width *\/$/;"	m	class:smc_allocate_c
m_knob_width	frontend.h	/^    uns16         m_knob_width; \/**< width *\/$/;"	m	class:frontend_c
m_knob_width	retire.h	/^    uns16                       m_knob_width; \/**< pipeline width *\/$/;"	m	class:retire_c
m_knob_width	schedule.h	/^    uns16           m_knob_width; \/**< width *\/$/;"	m	class:schedule_c
m_knobs	macsim.h	/^		all_knobs_c    *m_knobs; \/**< all knob variables *\/$/;"	m	class:macsim_c
m_knobsContainer	macsim.h	/^		KnobsContainer *m_knobsContainer; \/**< knob container *\/$/;"	m	class:macsim_c
m_l1_cache	memory.h	/^    dcu_c** m_l1_cache; \/**< L1 caches *\/$/;"	m	class:memory_c
m_l1req_queue	pref_common.h	/^    pref_mem_req_s* m_l1req_queue; \/**< L1 prefetch req queue *\/$/;"	m	class:hwp_common_c
m_l1req_queue_req_pos	pref_common.h	/^    int m_l1req_queue_req_pos; \/**< L1 request queue insert index *\/$/;"	m	class:hwp_common_c
m_l1req_queue_send_pos	pref_common.h	/^    int m_l1req_queue_send_pos; \/**< L1 request queue send index *\/$/;"	m	class:hwp_common_c
m_l2_cache	memory.h	/^    dcu_c** m_l2_cache; \/**< L2 caches *\/$/;"	m	class:memory_c
m_l2_miss	uop.h	/^    bool  m_l2_miss;            \/**< l2 miss *\/$/;"	m	class:uop_info_c
m_l2_misses	pref_common.h	/^    Counter m_l2_misses; \/**< number of total l2 misses *\/ $/;"	m	class:hwp_common_c
m_l2req_queue	pref_common.h	/^    pref_mem_req_s* m_l2req_queue; \/**< L2 prefetch req queue *\/$/;"	m	class:hwp_common_c
m_l2req_queue_req_pos	pref_common.h	/^    int m_l2req_queue_req_pos; \/**< L2 request queue insert index *\/ $/;"	m	class:hwp_common_c
m_l2req_queue_send_pos	pref_common.h	/^    int m_l2req_queue_send_pos; \/**< L2 request queue send index *\/$/;"	m	class:hwp_common_c
m_l3_cache	memory.h	/^    dcu_c** m_l3_cache; \/**< L3 caches *\/$/;"	m	class:memory_c
m_l3_interleave_factor	memory.h	/^    int m_l3_interleave_factor; \/**< mask bit for L3 id *\/$/;"	m	class:memory_c
m_last_access_time	cache.h	/^    Counter       m_last_access_time; \/\/!< for replacement policy $/;"	m	class:cache_entry_c
m_last_cycle_count	core.h	/^    Counter m_last_cycle_count; \/**< last heartbeat cycle *\/$/;"	m	class:heartbeat_s
m_last_dep_exec	uop.h	/^    Counter *         m_last_dep_exec; \/**< last dependent execution cycle *\/$/;"	m	class:uop_c
m_last_entry	rob.h	/^    int       m_last_entry; \/**< to maintain circular rob *\/$/;"	m	class:rob_c
m_last_fetch_cycle	core.h	/^    unordered_map<int, Counter> m_last_fetch_cycle; \/**< last fetched cycle *\/$/;"	m	class:core_c
m_last_fetch_tid_failed	frontend.h	/^    bool          m_last_fetch_tid_failed;$/;"	m	class:frontend_c
m_last_forward_progress	core.h	/^    Counter m_last_forward_progress; \/**< last checked cycle *\/$/;"	m	class:core_c
m_last_index	pqueue.h	/^    int m_last_index; \/**< last bucket index *\/$/;"	m	class:pqueue_c
m_last_inst_count	core.h	/^    Counter m_last_inst_count;       \/**< last checked instruction count *\/$/;"	m	class:core_c
m_last_inst_count	core.h	/^    Counter m_last_inst_count; \/**< last heartbeat instruction count *\/$/;"	m	class:heartbeat_s
m_last_inst_num	pref_common.h	/^    unordered_map<int, Counter> m_last_inst_num; \/**< train hardware pref once per inst. *\/$/;"	m	class:hwp_common_c
m_last_schlist	schedule_smc.h	/^    int m_last_schlist; \/**< last index in schedule list *\/$/;"	m	class:schedule_smc_c
m_last_schlist_ptr	schedule.h	/^    int             m_last_schlist_ptr; \/**< last index to sched list in OOO *\/$/;"	m	class:schedule_c
m_last_store	map.h	/^    map_entry_c m_last_store[2]; \/**< last store map entry *\/$/;"	m	class:map_data_c
m_last_store_flag	map.h	/^    bool        m_last_store_flag; \/**< last store flag *\/$/;"	m	class:map_data_c
m_last_terminated_tid	core.h	/^    int                      m_last_terminated_tid; \/**< last terminated thread id *\/$/;"	m	class:core_c
m_last_time	core.h	/^    time_t  m_last_time; \/**< last heartbeat time *\/$/;"	m	class:heartbeat_s
m_last_uop	uop.h	/^    bool              m_last_uop; \/**< last uop of a thread *\/$/;"	m	class:uop_c
m_last_update_time	pref_common.h	/^    Counter m_last_update_time; \/**< when did we update the default prefetcher last? *\/$/;"	m	class:hwp_common_c
m_latency	exec.cc	/^  int m_latency; \/**< latency *\/$/;"	m	struct:Uop_LatencyBinding_Init	file:
m_latency	exec.h	/^    int     m_latency[NUM_UOP_TYPES]; \/**< latency map *\/$/;"	m	class:exec_c
m_latency	memory.h	/^    int       m_latency; \/**< cache access latency *\/$/;"	m	class:dcu_c
m_latency	schedule_smc.cc	/^  int m_latency;$/;"	m	struct:Uop_Dispatch_Latency	file:
m_latency_count	bug_detector.h	/^    uint64_t *m_latency_count; \/**< total uop count *\/$/;"	m	class:bug_detector_c
m_latency_sum	bug_detector.h	/^    uint64_t *m_latency_sum; \/**< sum of each uop's execution latency *\/$/;"	m	class:bug_detector_c
m_ld_vaddr1	trace_read.h	/^  uint32_t m_ld_vaddr1;         \/**< load address 1 *\/$/;"	m	struct:trace_info_s
m_ld_vaddr2	trace_read.h	/^  uint32_t m_ld_vaddr2;         \/**< load address 2 *\/$/;"	m	struct:trace_info_s
m_level	memory.h	/^    int       m_level; \/**< cache level (L1, L2, L3, or memory controller) *\/$/;"	m	class:dcu_c
m_line_size	cache.h	/^    int     m_line_size;         \/**< cache line size *\/            $/;"	m	class:cache_c
m_line_size	memory.h	/^    int       m_line_size; \/**< cache line size *\/$/;"	m	class:dcu_c
m_link	router.h	/^    router_c* m_link[5]; \/**< links *\/$/;"	m	class:router_c
m_link_avail	router.h	/^    Counter* m_link_avail; \/**< link availability *\/$/;"	m	class:router_c
m_link_latency	router.h	/^    int m_link_latency; \/**< link latency *\/$/;"	m	class:router_c
m_link_width	router.h	/^    int m_link_width; \/**< link width *\/$/;"	m	class:router_c
m_loadPC	memreq_info.h	/^  Addr    m_loadPC;             \/**< load pc *\/$/;"	m	struct:pref_req_info_s
m_load_waiting	frontend.h	/^  map<Counter, bool> m_load_waiting; \/**< uop is waiting a load begin serviced *\/$/;"	m	struct:frontend_s
m_macsim_terminals	macsim.h	/^		vector<ManifoldProcessor*> m_macsim_terminals; \/**< manifold terminals *\/$/;"	m	class:macsim_c
m_main	process_manager.h	/^  bool       m_main;            \/**< main thread *\/$/;"	m	struct:thread_trace_info_node_s
m_main_thread	process_manager.h	/^  bool                 m_main_thread; \/**< main thread (usually thread id 0) *\/$/;"	m	struct:thread_s
m_map	core.h	/^    map_c*                          m_map; \/**< dependence information *\/$/;"	m	class:core_c
m_map_flags	map.h	/^    bool        m_map_flags[NUM_REG_IDS *2]; \/**< map data exist for the source *\/$/;"	m	class:map_data_c
m_map_src_info	uop.h	/^    src_info_c        m_map_src_info[MAX_UOP_SRC_DEPS]; \/**< src map information *\/$/;"	m	class:uop_c
m_mask	inst_info.h	/^  uns32       m_mask; \/**< mask *\/$/;"	m	struct:table_info_s
m_max_block	process_manager.h	/^  int                  m_max_block; \/**< max blocks per core for the application *\/$/;"	m	struct:process_s
m_max_cnt	rob.h	/^    int       m_max_cnt; \/**< max rob entries *\/$/;"	m	class:rob_c
m_max_fp_regs	rob.h	/^    int       m_max_fp_regs; \/**< max fp register *\/$/;"	m	class:rob_c
m_max_inst_fetched	core.h	/^    Counter                     m_max_inst_fetched; \/**< maximum inst fetched *\/$/;"	m	class:core_c
m_max_int_regs	rob.h	/^    int       m_max_int_regs; \/**< max integer register *\/$/;"	m	class:rob_c
m_max_lb_cnt	rob.h	/^    int       m_max_lb_cnt; \/**< max load buffer size *\/$/;"	m	class:rob_c
m_max_pending_flits_from_ds	router.h	/^    int m_max_pending_flits_from_ds;$/;"	m	class:router_c
m_max_pending_flits_from_us	router.h	/^    int m_max_pending_flits_from_us;$/;"	m	class:router_c
m_max_port	exec.h	/^    int     m_max_port[max_ALLOCQ]; \/**< maximum port *\/ $/;"	m	class:exec_c
m_max_sb_cnt	rob.h	/^    int       m_max_sb_cnt; \/**< max store buffer size *\/$/;"	m	class:rob_c
m_max_threads_per_core	core.h	/^    int  m_max_threads_per_core; \/**< max num (concurrently running) threads  *\/$/;"	m	class:core_c
m_mcs	router.h	/^    vector<router_c*> m_mcs;$/;"	m	class:router_wrapper_c
m_mem_access_thread_num	frontend.h	/^    int           m_mem_access_thread_num; \/**< number of threads that access memory *\/$/;"	m	class:frontend_c
m_mem_bar_sections	process_manager.h	/^  list<section_info_s*> m_mem_bar_sections; \/**< memory barrier sections *\/$/;"	m	struct:thread_s
m_mem_for_bar_sections	process_manager.h	/^  list<section_info_s*> m_mem_for_bar_sections; \/**< memory for barrier sections *\/$/;"	m	struct:thread_s
m_mem_map_entry_pool	macsim.h	/^		pool_c<mem_map_entry_c>* m_mem_map_entry_pool; \/**<  memory dependence data pool *\/$/;"	m	class:macsim_c
m_mem_read_size	trace_read.h	/^  uint8_t  m_mem_read_size;     \/**< memory read size *\/$/;"	m	struct:trace_info_s
m_mem_req_pool	memory.h	/^    pool_c<mem_req_s> *m_mem_req_pool; \/**< pool for write requests in ptx simulations *\/$/;"	m	class:memory_c
m_mem_sched_rate	exec.h	/^    uns16   m_mem_sched_rate; \/**< memory schedule rate *\/$/;"	m	class:exec_c
m_mem_sections	process_manager.h	/^  list<section_info_s*> m_mem_sections; \/**< memory sections *\/$/;"	m	struct:thread_s
m_mem_size	inst_info.h	/^  int         m_mem_size; \/\/!< number of bytes read\/written by a memory instruction$/;"	m	struct:table_info_s
m_mem_size	trace_read.h	/^  int          m_mem_size;      \/**< number of bytes read\/written by a memory instruction *\/$/;"	m	struct:trace_uop_s
m_mem_size	uop.h	/^    int               m_mem_size; \/**< memory access size *\/$/;"	m	class:uop_c
m_mem_start_cycle	uop.h	/^    Counter           m_mem_start_cycle; \/**< mem start cycle *\/$/;"	m	class:uop_c
m_mem_type	inst_info.h	/^  Mem_Type    m_mem_type; \/\/!< type of memory instruction$/;"	m	struct:table_info_s
m_mem_type	map.h	/^    int      m_mem_type;        \/**< memory type *\/$/;"	m	class:map_entry_c
m_mem_type	trace_read.h	/^  Mem_Type     m_mem_type;      \/**< type of memory instruction *\/$/;"	m	struct:trace_uop_s
m_mem_type	uop.h	/^    Mem_Type          m_mem_type; \/**< memory type *\/$/;"	m	class:uop_c
m_mem_write_size	trace_read.h	/^  uint8_t  m_mem_write_size;    \/**< memory write size *\/$/;"	m	struct:trace_info_s
m_memory	macsim.h	/^		memory_c* m_memory; \/**< main memory *\/$/;"	m	class:macsim_c
m_memory	memory.h	/^    memory_c* m_memory; \/**< pointer to the memory system *\/$/;"	m	class:dcu_c
m_memory	noc.h	/^    memory_c* m_memory; \/**< pointer to the memory class *\/$/;"	m	class:noc_c
m_merge	memreq_info.h	/^  list<mem_req_s*> m_merge; \/**< merged request list *\/$/;"	m	struct:mem_req_s
m_merged_req	memreq_info.h	/^  mem_req_s*    m_merged_req;   \/**< merged request *\/$/;"	m	struct:mem_req_s
m_misfetch	uop.h	/^    bool  m_misfetch;           \/**< target address is the ONLY thing that was wrong *\/$/;"	m	class:uop_info_c
m_mispred	uop.h	/^    bool  m_mispred;            \/**< direction of the branch was mispredicted *\/$/;"	m	class:uop_info_c
m_mispredicted	uop.h	/^    bool              m_mispredicted; \/**< mispredicted branch *\/$/;"	m	class:uop_c
m_msg	noc.h	/^  int     m_msg; \/**< msg type *\/$/;"	m	struct:noc_entry_s
m_msg_dst	memreq_info.h	/^  int           m_msg_dst;      \/**< destination node id *\/$/;"	m	struct:mem_req_s
m_msg_src	memreq_info.h	/^  int           m_msg_src;      \/**< source node id *\/$/;"	m	struct:mem_req_s
m_msg_type	memreq_info.h	/^  int           m_msg_type;     \/**< noc request type *\/$/;"	m	struct:mem_req_s
m_mshr	memory.h	/^    list<mem_req_s*>* m_mshr; \/**< mshr entry per L1 cache *\/$/;"	m	class:memory_c
m_mshr_free_list	memory.h	/^    list<mem_req_s*>* m_mshr_free_list; \/**< mshr entry free list *\/$/;"	m	class:memory_c
m_mul_mem_uops	trace_read.h	/^  bool         m_mul_mem_uops;  \/**< multiple memory transactions *\/$/;"	m	struct:trace_uop_s
m_name	bp.h	/^    const char *m_name; \/**< branch predictor name *\/$/;"	m	class:bp_dir_base_c
m_name	cache.h	/^    string  m_name;              \/**< cache name *\/ $/;"	m	class:cache_c
m_name	exec.cc	/^  string m_name; \/**< uop type name *\/$/;"	m	struct:Uop_LatencyBinding_Init	file:
m_name	knob.h	/^    string m_name; \/**< knob name *\/$/;"	m	class:abstract_knob_c
m_name	knob.h	/^  string m_name; \/**< knob name *\/$/;"	m	struct:param_file_entry_s
m_name	port.h	/^    string  m_name; \/**< port name *\/ $/;"	m	class:port_c
m_name	pqueue.h	/^    string m_name; \/**< queue name *\/$/;"	m	class:pqueue_c
m_name	schedule_smc.cc	/^  string m_name;$/;"	m	struct:Uop_Dispatch_Latency	file:
m_name	statistics.h	/^    string m_name; \/**< name of stat *\/$/;"	m	class:AbstractStat
m_name	utils.h	/^    string    m_name; \/**< pool name *\/$/;"	m	class:pool_c
m_next	memory.h	/^    dcu_c**   m_next; \/**< next-level cache pointer *\/$/;"	m	class:dcu_c
m_next_bid	frontend.h	/^  int                m_next_bid; \/**< next block id *\/$/;"	m	struct:frontend_s
m_next_fetch_addr	frontend.h	/^  Addr m_next_fetch_addr; \/**< next fetch address *\/$/;"	m	struct:mt_scheduler_s
m_next_id	memory.h	/^    int       m_next_id; \/**< next-level cache id *\/$/;"	m	class:dcu_c
m_next_inorder_to_schedule	schedule_io.h	/^    int m_next_inorder_to_schedule; \/**< index to rob for next uop to schedule *\/$/;"	m	class:schedule_io_c
m_next_rowid	frontend.h	/^  int                m_next_rowid; \/**< next dram row id *\/$/;"	m	struct:frontend_s
m_next_sched_id	schedule_smc.h	/^    int m_next_sched_id; \/**<id of warp scheduler for which instructions will be scheduled next *\/$/;"	m	class:schedule_smc_c
m_next_trace_info	process_manager.h	/^  trace_info_s*        m_next_trace_info; \/**< next instruction trace info *\/$/;"	m	struct:thread_s
m_next_trace_uop_array	process_manager.h	/^  trace_uop_s*         m_next_trace_uop_array[MAX_PUP]; \/**< next trace uop array *\/$/;"	m	struct:thread_s
m_next_vc	router.h	/^    int m_next_vc; \/**<id of next vc for local packet injection *\/$/;"	m	class:router_c
m_no_of_threads	process_manager.h	/^  unsigned int         m_no_of_threads; \/**< number of total threads *\/$/;"	m	struct:process_s
m_no_of_threads_created	process_manager.h	/^  unsigned int         m_no_of_threads_created; \/**< number of threads created *\/$/;"	m	struct:process_s
m_no_of_threads_terminated	process_manager.h	/^  unsigned int         m_no_of_threads_terminated; \/**< number of terminated threads *\/$/;"	m	struct:process_s
m_no_target	uop.h	/^    bool  m_no_target;          \/**< no target for this branch at prediction time *\/$/;"	m	class:uop_info_c
m_no_threads_per_block	macsim.h	/^		int m_no_threads_per_block; \/**< number of threads per block *\/$/;"	m	class:macsim_c
m_noc	macsim.h	/^		noc_c* m_noc; \/**<  interconnection network *\/$/;"	m	class:macsim_c
m_noc_cycle	memreq_info.h	/^  Counter       m_noc_cycle;    \/**< noc start cycle *\/$/;"	m	struct:mem_req_s
m_noc_id	dram.h	/^    int m_noc_id; \/**< network id *\/$/;"	m	class:dram_controller_c
m_noc_id	memory.h	/^    int       m_noc_id; \/**< cache network id *\/$/;"	m	class:dcu_c
m_noc_id_base	memory.h	/^    int m_noc_id_base[MEM_LAST]; \/**< noc id base per level *\/$/;"	m	class:memory_c
m_noc_index_base	memory.h	/^    int m_noc_index_base[MEM_LAST]; \/**< component id of each memory hierarchy *\/$/;"	m	class:memory_c
m_noc_type	memreq_info.h	/^  int           m_noc_type;     \/**< noc request type: req or reply *\/$/;"	m	struct:mem_req_s
m_npc	trace_read.h	/^  Addr         m_npc;           \/**< next pc address *\/ $/;"	m	struct:trace_uop_s
m_npc	uop.h	/^    Addr              m_npc; \/**< next pc *\/$/;"	m	class:uop_c
m_num_active_threads	macsim.h	/^		int m_num_active_threads; \/**< number of active threads *\/$/;"	m	class:macsim_c
m_num_bank	dram.h	/^    int m_num_bank; \/**< number of dram banks *\/$/;"	m	class:dram_controller_c
m_num_bank_per_channel	dram.h	/^    int m_num_bank_per_channel;  \/**< number of banks per channel *\/$/;"	m	class:dram_controller_c
m_num_banks	sw_managed_cache.h	/^    uns8      m_num_banks;      \/**< number of cache banks *\/$/;"	m	class:sw_managed_cache_c
m_num_channel	dram.h	/^    int m_num_channel; \/**< number of dram channels *\/$/;"	m	class:dram_controller_c
m_num_child_uops	uop.h	/^    int               m_num_child_uops; \/**< number of children uops *\/$/;"	m	class:uop_c
m_num_child_uops_done	uop.h	/^    int               m_num_child_uops_done; \/**< number of done children uops *\/$/;"	m	class:uop_c
m_num_completed_in_last_cycle	dram.h	/^    int m_num_completed_in_last_cycle; \/**< number of requests completed in last cycle *\/$/;"	m	class:dram_controller_c
m_num_core	bug_detector.h	/^    int m_num_core; \/**< number of simulating cores *\/$/;"	m	class:bug_detector_c
m_num_core	memory.h	/^    int m_num_core; \/**< number of cores *\/$/;"	m	class:memory_c
m_num_cpu_line	cache.h	/^    int     m_num_cpu_line;      \/**< number of cpu cache lines *\/$/;"	m	class:cache_c
m_num_cpu_line	cache.h	/^    int m_num_cpu_line; \/**< number of cpu cache line *\/$/;"	m	class:cache_set_c
m_num_dest_regs	inst_info.h	/^  int         m_num_dest_regs; \/\/!< number of destination registers written$/;"	m	struct:table_info_s
m_num_dest_regs	trace_read.h	/^  int          m_num_dest_regs; \/**< number of destination registers written *\/$/;"	m	struct:trace_uop_s
m_num_dest_regs	trace_read.h	/^  uint8_t  m_num_dest_regs;     \/**< num dest registers *\/$/;"	m	struct:trace_info_s
m_num_dests	uop.h	/^    int               m_num_dests; \/**< number of dest registers *\/$/;"	m	class:uop_c
m_num_entry	pqueue.h	/^    int m_num_entry; \/**< current queue entries *\/$/;"	m	class:pqueue_c
m_num_fp_regs	rob.h	/^    int       m_num_fp_regs; \/**< number of available fp register *\/$/;"	m	class:rob_c
m_num_gpu_line	cache.h	/^    int     m_num_gpu_line;      \/**< number of gpu cache lines *\/ $/;"	m	class:cache_c
m_num_gpu_line	cache.h	/^    int m_num_gpu_line; \/**< number of gpu cache line *\/$/;"	m	class:cache_set_c
m_num_in_sched	schedule.h	/^    int             m_num_in_sched; \/**< number of uops in scheduler *\/$/;"	m	class:schedule_c
m_num_int_regs	rob.h	/^    int       m_num_int_regs; \/**< number of available int register *\/ $/;"	m	class:rob_c
m_num_l2_evicts	pref_common.h	/^    Counter m_num_l2_evicts; \/**< Total prefetch l2 evictions *\/$/;"	m	class:hwp_common_c
m_num_l3	memory.h	/^    int m_num_l3; \/**< number of l3 caches *\/$/;"	m	class:memory_c
m_num_lb	rob.h	/^    int       m_num_lb; \/**< number of available load buffer *\/$/;"	m	class:rob_c
m_num_ld	trace_read.h	/^  uint8_t  m_num_ld;            \/**< number of load operations *\/$/;"	m	struct:trace_info_s
m_num_mc	macsim.h	/^    int m_num_mc; \/**< number of memory controllers *\/$/;"	m	class:macsim_c
m_num_mc	memory.h	/^    int m_num_mc; \/**< number of memory controllers *\/$/;"	m	class:memory_c
m_num_per_sched	schedule.h	/^    int*            m_num_per_sched; \/**< number of uops in each sched. *\/$/;"	m	class:schedule_c
m_num_port	router.h	/^    int m_num_port; \/**< number of ports *\/$/;"	m	class:router_c
m_num_queues	allocate.h	/^    int             m_num_queues; \/**< number of allocation queue types *\/$/;"	m	class:allocate_c
m_num_queues	allocate_smc.h	/^    int                            m_num_queues; \/**< number of allocation queue types *\/$/;"	m	class:smc_allocate_c
m_num_read_port	memory.h	/^    int       m_num_read_port; \/**< number of read ports *\/$/;"	m	class:dcu_c
m_num_read_ports	port.h	/^    uns     m_num_read_ports; \/**< number of total read ports *\/$/;"	m	class:port_c
m_num_read_regs	trace_read.h	/^  uint8_t  m_num_read_regs;     \/**< num read registers *\/$/;"	m	struct:trace_info_s
m_num_router	router.h	/^    int m_num_router; \/**< number of routers *\/$/;"	m	class:router_wrapper_c
m_num_running_core	macsim.h	/^		int m_num_running_core; \/**< set to any non0 number before simulation start *\/$/;"	m	class:macsim_c
m_num_sb	rob.h	/^    int       m_num_sb; \/**< number of available store buffer *\/$/;"	m	class:rob_c
m_num_sending_uop	process_manager.h	/^  int                  m_num_sending_uop; \/**< number of sending uops *\/$/;"	m	struct:thread_s
m_num_set	memory.h	/^    int       m_num_set; \/**< number of cache sets *\/$/;"	m	class:dcu_c
m_num_sets	cache.h	/^    int     m_num_sets;          \/**< number of sets *\/             $/;"	m	class:cache_c
m_num_src_regs	inst_info.h	/^  int         m_num_src_regs; \/\/!< number of source registers read$/;"	m	struct:table_info_s
m_num_src_regs	trace_read.h	/^  int          m_num_src_regs;  \/**< number of source registers read *\/$/;"	m	struct:trace_uop_s
m_num_srcs	uop.h	/^    int               m_num_srcs; \/**< number of src registers *\/$/;"	m	class:uop_c
m_num_thread_reach_end	core.h	/^    int m_num_thread_reach_end; \/**< number of total terminated threads *\/$/;"	m	class:core_c
m_num_threads_in_block	frontend.h	/^  int32_t m_num_threads_in_block; \/**< number of threads in a block *\/$/;"	m	struct:sync_thread_s
m_num_tiles	cache.h	/^    int     m_num_tiles;         \/**< number of tiles *\/$/;"	m	class:cache_c
m_num_uop	inst_info.h	/^  uns8 m_num_uop; \/\/!< number of uop for x86 instructions $/;"	m	struct:trace_info_sc_s
m_num_uselesspref_evict	pref_common.h	/^    Counter m_num_uselesspref_evict; \/**< Total number of useless prefetches *\/ $/;"	m	class:hwp_common_c
m_num_vc	router.h	/^    int m_num_vc; \/**< number of virtual channels *\/$/;"	m	class:router_c
m_num_vc_cpu	router.h	/^    int m_num_vc_cpu; \/**< number of vcs for CPU *\/$/;"	m	class:router_c
m_num_waiting_dispatched_threads	macsim.h	/^		int m_num_waiting_dispatched_threads; \/**< number of threads waiting for begin dispatched *\/$/;"	m	class:macsim_c
m_num_write_port	memory.h	/^    int       m_num_write_port; \/**< number of write ports *\/$/;"	m	class:dcu_c
m_num_write_ports	port.h	/^    uns     m_num_write_ports; \/**< number of total write ports *\/$/;"	m	class:port_c
m_off_path	uop.h	/^    bool              m_off_path; \/**< uop in wrong-path *\/$/;"	m	class:uop_c
m_offset_mask	cache.h	/^    Addr    m_offset_mask;       \/**< cache offset mask *\/$/;"	m	class:cache_c
m_op_type	inst_info.h	/^  Uop_Type    m_op_type; \/\/!< type of operation   $/;"	m	struct:table_info_s
m_op_type	trace_read.h	/^  Uop_Type     m_op_type;       \/**< type of operation *\/$/;"	m	struct:trace_uop_s
m_opcode	trace_read.h	/^  uint8_t      m_opcode;        \/**< opcode *\/$/;"	m	struct:trace_uop_s
m_opcode	trace_read.h	/^  uint8_t  m_opcode;            \/**< opcode *\/$/;"	m	struct:trace_info_s
m_opcode	uop.h	/^    uint8_t           m_opcode; \/**< opcode *\/$/;"	m	class:uop_c
m_opposite_dir	router.h	/^    unordered_map<int, int> m_opposite_dir; \/**< opposite direction map *\/$/;"	m	class:router_c
m_ops_to_be_dispatched	core.h	/^    unordered_map<int, Counter> m_ops_to_be_dispatched; \/**< number of uops to be scheduled *\/$/;"	m	class:core_c
m_oracle_mem_hash	map.h	/^    hash_c<mem_map_entry_c>* m_oracle_mem_hash; \/**< oracle memory hash *\/$/;"	m	class:map_data_c
m_orig_block_id	process_manager.h	/^  int                  m_orig_block_id; \/**< original block id from a trace*\/$/;"	m	struct:thread_s
m_orig_block_id	uop.h	/^    int               m_orig_block_id; \/**< original GPU block id *\/$/;"	m	class:uop_c
m_orig_pid	process_manager.h	/^  int                  m_orig_pid; \/**< original process id - in case of repetition *\/$/;"	m	struct:process_s
m_orig_thread_id	process_manager.h	/^  int                  m_orig_thread_id; \/**< adjusted block id *\/$/;"	m	struct:thread_s
m_orig_thread_id	uop.h	/^    int               m_orig_thread_id; \/**< original thread id *\/$/;"	m	class:uop_c
m_originally_misfetch	uop.h	/^    bool  m_originally_misfetch; \/**< branch was originally misfetched *\/$/;"	m	class:uop_info_c
m_originally_mispred	uop.h	/^    bool  m_originally_mispred; \/**< branch was originally mispredicted *\/$/;"	m	class:uop_info_c
m_out_queue	memory.h	/^    queue_c*  m_out_queue; \/**< out queue *\/$/;"	m	class:dcu_c
m_output_buffer	dram.h	/^    list<mem_req_s*>* m_output_buffer; \/**< output buffer *\/$/;"	m	class:dram_controller_c
m_output_buffer	router.h	/^    list<flit_c*>** m_output_buffer; \/**< output buffer *\/$/;"	m	class:router_c
m_output_port_id	router.h	/^    int** m_output_port_id; \/**< output port id *\/$/;"	m	class:router_c
m_output_vc_avail	router.h	/^    bool** m_output_vc_avail; \/**< output vc availability *\/$/;"	m	class:router_c
m_output_vc_id	router.h	/^    int** m_output_vc_id; \/**< output vc id *\/$/;"	m	class:router_c
m_overall_l1sent	pref_common.h	/^    Counter m_overall_l1sent; \/**< Total number of prefetches sent *\/$/;"	m	class:hwp_common_c
m_overall_l1useful	pref_common.h	/^    Counter m_overall_l1useful; \/**< Total number of useful prefetches *\/$/;"	m	class:hwp_common_c
m_overall_l2sent	pref_common.h	/^    Counter m_overall_l2sent; \/**< Total number of prefetches sent *\/$/;"	m	class:hwp_common_c
m_overall_l2useful	pref_common.h	/^    Counter m_overall_l2useful; \/**< Total number of useful prefetches *\/$/;"	m	class:hwp_common_c
m_pRatioStat	statistics.h	/^    AbstractStat* m_pRatioStat; \/**< stat that to use in the ratio *\/$/;"	m	class:AbstractStat
m_packet_table	bug_detector.h	/^    unordered_map<mem_req_s*, uint64_t>* m_packet_table; \/**< memeory requests in noc *\/$/;"	m	class:bug_detector_c
m_packets_from_ds	router.h	/^    queue<mem_req_s *> m_packets_from_ds;$/;"	m	class:router_c
m_packets_from_us	router.h	/^    queue<mem_req_s *> m_packets_from_us;$/;"	m	class:router_c
m_parent	dram.h	/^      dc_frfcfs_c* m_parent; \/**< parent dram scheduler pointer *\/$/;"	m	class:dc_frfcfs_c::sort_func
m_parentDistroID	statistics.h	/^  long m_parentDistroID; \/**< parent distribution stat id *\/$/;"	m	class:DISTMember_Stat
m_parentName	knob.h	/^    string m_parentName; \/**< parent knob name *\/$/;"	m	class:abstract_knob_c
m_parent_uop	uop.h	/^    uop_c            *m_parent_uop; \/**< parent uop *\/$/;"	m	class:uop_c
m_pc	map.h	/^    Addr     m_pc;              \/**< pc address *\/$/;"	m	class:map_entry_c
m_pc	memory.h	/^  Addr    m_pc;                 \/**< pc address *\/$/;"	m	struct:dcache_data_s
m_pc	memreq_info.h	/^  Addr          m_pc;           \/**< load pc *\/$/;"	m	struct:mem_req_s
m_pc	uop.h	/^    Addr              m_pc; \/**< pc address *\/$/;"	m	class:uop_c
m_pending_child_uops	uop.h	/^    uns64             m_pending_child_uops; \/**< pending child uops vector *\/$/;"	m	class:uop_c
m_pending_credit	router.h	/^    list<credit_c*>* m_pending_credit; \/**< pending credit to model latency *\/$/;"	m	class:router_c
m_pending_flits_from_ds	router.h	/^    int m_pending_flits_from_ds;$/;"	m	class:router_c
m_pending_flits_from_us	router.h	/^    int m_pending_flits_from_us;$/;"	m	class:router_c
m_pending_request	dram.h	/^    list<mem_req_s*>* m_pending_request; \/**< pending request *\/$/;"	m	class:dram_controller_c
m_perceptron_output	uop.h	/^    int32 m_perceptron_output;  \/**< perceptron bp output *\/$/;"	m	class:uop_info_c
m_perfect	cache.h	/^    bool    m_perfect;           \/**< Enable perfect cache *\/              $/;"	m	class:cache_c
m_performance_mask	utils.h	/^    bool m_performance_mask[10]; \/**< true: huge memory-intensity *\/$/;"	m	class:cache_partition_framework_c
m_period_inst_count	retire.h	/^    int m_period_inst_count; \/**< counter for periodic logging number of retired inst. *\/$/;"	m	class:retire_c
m_pfpol	pref_common.h	/^    Counter m_pfpol; \/**< number of prefetch pollution *\/$/;"	m	class:hwp_common_c
m_phase	pref_common.h	/^    uns m_phase; \/**< number of total phase counter *\/$/;"	m	class:hwp_common_c
m_pht	bp.h	/^    uns8       *m_pht; \/**< branch history table *\/$/;"	m	class:bp_dir_base_c
m_pin_2nd_mem	trace_read.h	/^  bool         m_pin_2nd_mem;   \/**< has second memory operation *\/$/;"	m	struct:trace_uop_s
m_polbv_info	pref_common.h	/^    char* m_polbv_info; \/**< pollution bit vector *\/$/;"	m	class:hwp_common_c
m_pool	noc.h	/^    pool_c<noc_entry_s>* m_pool; \/**< entry pool *\/$/;"	m	class:noc_c
m_pool	utils.h	/^    list<T*>* m_pool; \/**< pool *\/$/;"	m	class:pool_c
m_pool	utils.h	/^    pool_c<T>* m_pool; \/**< hash table entry pool *\/$/;"	m	class:hash_c
m_poolexpand_unit	utils.h	/^    int       m_poolexpand_unit; \/**< pool expand unit *\/$/;"	m	class:pool_c
m_poolsize	utils.h	/^    int       m_poolsize; \/**< pool size *\/$/;"	m	class:pool_c
m_port	memory.h	/^    port_c**  m_port; \/**< cache port *\/$/;"	m	class:dcu_c
m_port	router.h	/^    int m_port; \/**< credit port *\/$/;"	m	class:credit_c
m_port_used	exec.h	/^    int     m_port_used[max_ALLOCQ]; \/**< number of currently used port *\/$/;"	m	class:exec_c
m_ports	sw_managed_cache.h	/^    port_c  **m_ports;          \/**< cache ports *\/$/;"	m	class:sw_managed_cache_c
m_precharge_latency	dram.h	/^    int m_precharge_latency; \/**< precharge latency *\/$/;"	m	class:dram_controller_c
m_pred	uop.h	/^    uns8  m_pred;               \/**< branch direction *\/$/;"	m	class:uop_info_c
m_pred_addr	uop.h	/^    Addr  m_pred_addr;          \/**< address used to predict branch *\/$/;"	m	class:uop_info_c
m_pred_global_hist	uop.h	/^    uns32 m_pred_global_hist;   \/**< global branch history 32-bit *\/$/;"	m	class:uop_info_c
m_pred_global_hist_64	uop.h	/^    uns64 m_pred_global_hist_64; \/**< global branch history 64-bit *\/$/;"	m	class:uop_info_c
m_pred_npc	uop.h	/^    Addr  m_pred_npc;           \/**< predicted next pc *\/$/;"	m	class:uop_info_c
m_pref	cache.h	/^    bool          m_pref;         \/\/!< data is brought by a prefetcher $/;"	m	class:cache_entry_c
m_pref_loadPC	memreq_info.h	/^  Addr          m_pref_loadPC;  \/**< prefetch load pc *\/$/;"	m	struct:mem_req_s
m_prefetcher_id	memreq_info.h	/^  Counter m_prefetcher_id;      \/**< prefetcher id *\/$/;"	m	struct:pref_req_info_s
m_prefetcher_id	memreq_info.h	/^  uns8          m_prefetcher_id; \/**< prefetcher id, if prefetch request *\/$/;"	m	struct:mem_req_s
m_prev	memory.h	/^    dcu_c**   m_prev; \/**< previous-level ache pointer *\/$/;"	m	class:dcu_c
m_prev_id	memory.h	/^    int       m_prev_id; \/**< previous-level cache id *\/$/;"	m	class:dcu_c
m_prev_trace_info	process_manager.h	/^  trace_info_s*        m_prev_trace_info; \/**< prev instruction trace info *\/$/;"	m	struct:thread_s
m_prev_uop	frontend.h	/^  uop_c*             m_prev_uop; \/**< previous uop *\/$/;"	m	struct:frontend_s
m_prev_uop_num	frontend.h	/^  Counter            m_prev_uop_num; \/**< previous uop number *\/$/;"	m	struct:frontend_s
m_prev_uop_thread_num	frontend.h	/^  Counter            m_prev_uop_thread_num; \/**< previous thread id of the uop *\/$/;"	m	struct:frontend_s
m_printed_inst_count	core.h	/^    Counter m_printed_inst_count; \/**< last printed heartbeat inst. count *\/$/;"	m	class:heartbeat_s
m_priority	dram.h	/^  int         m_priority;       \/**< priority *\/$/;"	m	struct:drb_entry_s
m_priority	memreq_info.h	/^  Counter       m_priority;     \/**< priority *\/$/;"	m	struct:mem_req_s
m_priority	pqueue.h	/^    int64_t m_priority; \/**< entry priority *\/$/;"	m	struct:pqueue_c::pqueue_entry_s
m_process	process_manager.h	/^  process_s           *m_process; \/**< point to the application belongs to *\/$/;"	m	struct:thread_s
m_process	process_manager.h	/^  process_s* m_process;         \/**< pointer to the process *\/$/;"	m	struct:thread_trace_info_node_s
m_process_count	macsim.h	/^		int m_process_count; \/**< number of processes *\/$/;"	m	class:macsim_c
m_process_count_without_repeat	macsim.h	/^		int m_process_count_without_repeat; \/**< number of processes without repeat *\/$/;"	m	class:macsim_c
m_process_id	process_manager.h	/^  unsigned int         m_process_id; \/**< current process id *\/$/;"	m	struct:process_s
m_process_manager	macsim.h	/^		process_manager_c* m_process_manager; \/**< process manager *\/$/;"	m	class:macsim_c
m_processed_threads	schedule_smc.h	/^    map<int, int> m_processed_threads; \/**<to track threads which have already been examined by the scheduler *\/$/;"	m	class:schedule_smc_c
m_psel_mask	utils.h	/^    bool m_psel_mask[10]; \/**< PSEL mask *\/$/;"	m	class:cache_partition_framework_c
m_ptx	memreq_info.h	/^  bool          m_ptx;          \/**< GPU request *\/$/;"	m	struct:mem_req_s
m_ptx	process_manager.h	/^  bool                 m_ptx; \/**< GPU application *\/$/;"	m	struct:process_s
m_ptx	process_manager.h	/^  bool                 m_ptx; \/**< GPU thread *\/$/;"	m	struct:thread_s
m_ptx	process_manager.h	/^  bool       m_ptx;             \/**< GPU simulation *\/$/;"	m	struct:thread_trace_info_node_s
m_ptx_core_pool	macsim.h	/^		queue<int> m_ptx_core_pool; \/**< GPU cores pool *\/$/;"	m	class:macsim_c
m_ptx_sim	exec.h	/^    bool    m_ptx_sim; \/**< gpu simulation *\/$/;"	m	class:exec_c
m_ptx_sim	memory.h	/^    bool      m_ptx_sim; \/**< gpu cache *\/$/;"	m	class:dcu_c
m_q_frontend	core.h	/^    pqueue_c<int*>*                 m_q_frontend; \/**< frontend queue *\/$/;"	m	class:core_c
m_q_iaq	core.h	/^    pqueue_c<int>**                 m_q_iaq; \/**< allocation queue *\/$/;"	m	class:core_c
m_queue	memreq_info.h	/^  queue_c*      m_queue;        \/**< current memory queue in *\/$/;"	m	struct:mem_req_s
m_rc_changed	router.h	/^    Counter    m_rc_changed; \/**< route changed? *\/$/;"	m	class:flit_c
m_rdy	noc.h	/^  Counter m_rdy; \/**< ready cycle *\/$/;"	m	struct:noc_entry_s
m_rdy_cycle	memreq_info.h	/^  Counter       m_rdy_cycle;    \/**< request ready cycle *\/$/;"	m	struct:mem_req_s
m_rdy_cycle	router.h	/^    Counter    m_rdy_cycle; \/**< ready cycle *\/$/;"	m	class:flit_c
m_rdy_cycle	router.h	/^    Counter m_rdy_cycle; \/**< credit ready cycle *\/$/;"	m	class:credit_c
m_read	dram.h	/^  bool        m_read;           \/**< load\/store *\/$/;"	m	struct:drb_entry_s
m_read_last_cycle	port.h	/^    Counter m_read_last_cycle; \/**< last read port access cycle *\/ $/;"	m	class:port_c
m_read_ports_in_use	port.h	/^    uns     m_read_ports_in_use; \/**< number of currently using read ports *\/$/;"	m	class:port_c
m_ready_thread_available	frontend.h	/^    bool          m_ready_thread_available; \/**< ready thread available *\/$/;"	m	class:frontend_c
m_reconv_data	frontend.h	/^  reconv_data_s      m_reconv_data; \/**< GPU : reconvergence data *\/$/;"	m	struct:frontend_s
m_reconverge_addr	trace_read.h	/^  Addr         m_reconverge_addr; \/**< address of reconvergence *\/$/;"	m	struct:trace_uop_s
m_reconverge_addr	uop.h	/^    Addr              m_reconverge_addr; \/**< GPU : reconvergence address *\/$/;"	m	class:uop_c
m_reconverge_depth	frontend.h	/^  int32_t m_reconverge_depth; \/**< reconvergence depth *\/$/;"	m	struct:reconv_data_s
m_recovery_cf_type	bp.h	/^    Counter          m_recovery_cf_type; \/**< cf_type of op that caused recovery *\/$/;"	m	class:bp_recovery_info_c
m_recovery_cycle	bp.h	/^    Counter          m_recovery_cycle; \/**< cycle that begins misprediction recovery *\/$/;"	m	class:bp_recovery_info_c
m_recovery_fetch_addr	bp.h	/^    Addr             m_recovery_fetch_addr; \/**< address to redirect the istream *\/$/;"	m	class:bp_recovery_info_c
m_recovery_info	bp.h	/^    recovery_info_c* m_recovery_info; \/**< information about the op causing the recovery *\/$/;"	m	class:bp_recovery_info_c
m_recovery_info	uop.h	/^    recovery_info_c   m_recovery_info; \/**< recovery information *\/$/;"	m	class:uop_c
m_recovery_op_num	bp.h	/^    Counter          m_recovery_op_num; \/**< op_num of op that caused recovery *\/$/;"	m	class:bp_recovery_info_c
m_recv_from_ds_avail	router.h	/^    Counter m_recv_from_ds_avail;$/;"	m	class:router_c
m_recv_from_us_avail	router.h	/^    Counter m_recv_from_us_avail;$/;"	m	class:router_c
m_redirect_cycle	bp.h	/^    Counter          m_redirect_cycle; \/**< cycle that begins a redirection (eg. btb miss) *\/$/;"	m	class:bp_recovery_info_c
m_redirect_fetch_addr	bp.h	/^    Addr             m_redirect_fetch_addr; \/**< address to redirect to *\/$/;"	m	class:bp_recovery_info_c
m_redirect_op_num	bp.h	/^    Counter          m_redirect_op_num; \/**< op_num of op that caused redirect *\/$/;"	m	class:bp_recovery_info_c
m_reg	inst_info.h	/^  uns16    m_reg;                \/\/!< register number within the register set$/;"	m	struct:reg_info_s
m_reg_map	map.h	/^    map_entry_c m_reg_map[NUM_REG_IDS *2]; \/**< register map per source *\/$/;"	m	class:map_data_c
m_region_sent	pref_common.h	/^    Counter m_region_sent; \/**< number of region sent *\/$/;"	m	class:hwp_common_c
m_region_useful	pref_common.h	/^    Counter m_region_useful; \/**< number of useful region *\/$/;"	m	class:hwp_common_c
m_rep_dir	trace_read.h	/^  bool     m_rep_dir;           \/**< repetition direction *\/$/;"	m	struct:trace_info_s
m_rep_uop_num	trace_read.h	/^  int          m_rep_uop_num;   \/**< repeated uop number *\/$/;"	m	struct:trace_uop_s
m_repeat	process_manager.h	/^  int                  m_repeat; \/**< application has been re-executed *\/$/;"	m	struct:process_s
m_repeat_done	macsim.h	/^		bool m_repeat_done; \/**< in trace repeat mode, indicate repetition done *\/$/;"	m	class:macsim_c
m_req	dram.h	/^  mem_req_s  *m_req;            \/**< memory request pointer *\/$/;"	m	struct:drb_entry_s
m_req	noc.h	/^  mem_req_s* m_req; \/**< pointer to the request *\/$/;"	m	struct:noc_entry_s
m_req	router.h	/^    mem_req_s* m_req; \/**< pointer to the memory request *\/$/;"	m	class:flit_c
m_req	uop.h	/^    mem_req_s *       m_req; \/**< pointer to memory request *\/ $/;"	m	class:uop_c
m_req_buffer	router.h	/^    queue<mem_req_s*>* m_req_buffer; \/**< ejection queue *\/$/;"	m	class:router_c
m_req_fp_reg	uop.h	/^    bool              m_req_fp_reg; \/**< need fp register *\/$/;"	m	class:uop_c
m_req_int_reg	uop.h	/^    bool              m_req_int_reg; \/**< need integer register *\/$/;"	m	class:uop_c
m_req_lb	uop.h	/^    bool              m_req_lb; \/**< need load buffer *\/$/;"	m	class:uop_c
m_req_llc_bypass	memory.h	/^    bool      m_req_llc_bypass; \/**< bypass llc *\/$/;"	m	class:dcu_c
m_req_sb	uop.h	/^    bool              m_req_sb; \/**< need store buffer *\/$/;"	m	class:uop_c
m_retire	core.h	/^    retire_c*                       m_retire; \/**< retire *\/$/;"	m	class:core_c
m_retire_cycle	process_manager.h	/^  Counter m_retire_cycle;       \/**< retired cycle *\/$/;"	m	struct:block_schedule_info_s
m_retire_running	retire.h	/^    bool                        m_retire_running; \/**< retire enabled *\/$/;"	m	class:retire_c
m_retired	process_manager.h	/^  bool    m_retired;            \/**< retired *\/$/;"	m	struct:block_schedule_info_s
m_retired_thread_num	process_manager.h	/^  int     m_retired_thread_num; \/**< number of retired threads *\/$/;"	m	struct:block_schedule_info_s
m_rid	dram.h	/^  int         m_rid;            \/**< row id *\/$/;"	m	struct:drb_entry_s
m_rid_shift	dram.h	/^    uns m_rid_shift; \/**< row id shift *\/$/;"	m	class:dram_controller_c
m_rob	allocate.h	/^    rob_c*          m_rob; \/**< reorder buffer *\/$/;"	m	class:allocate_c
m_rob	core.h	/^    rob_c*                          m_rob; \/**< reorder buffer *\/$/;"	m	class:core_c
m_rob	rob.h	/^    uop_c**   m_rob; \/**< rob *\/$/;"	m	class:rob_c
m_rob	schedule.h	/^    rob_c*          m_rob;      \/**< reorder buffer *\/$/;"	m	class:schedule_c
m_rob_entry	allocate_smc.h	/^  int32 m_rob_entry; \/**< rob entry *\/$/;"	m	struct:gpu_allocq_entry_s
m_rob_entry	uop.h	/^    int               m_rob_entry; \/**< rob entry id *\/$/;"	m	class:uop_c
m_route	router.h	/^    bool**** m_route; \/**< route information *\/$/;"	m	class:router_c
m_route_fixed	router.h	/^    int** m_route_fixed; \/**< determined rc for the packet *\/$/;"	m	class:router_c
m_router	dram.h	/^    router_c* m_router; \/**< router *\/$/;"	m	class:dram_controller_c
m_router	macsim.h	/^    router_wrapper_c* m_router; \/**< NOC routers *\/$/;"	m	class:macsim_c
m_router	memory.h	/^    router_c* m_router; \/**< router *\/$/;"	m	class:dcu_c
m_router	router.h	/^    vector<router_c*> m_router; \/**< all routers *\/$/;"	m	class:router_wrapper_c
m_running_block_num	core.h	/^    int m_running_block_num;    \/**< number of currently running blocks *\/$/;"	m	class:core_c
m_running_thread_num	core.h	/^    int m_running_thread_num;   \/**< number of currently running threads *\/$/;"	m	class:core_c
m_sched_cycle	process_manager.h	/^  Counter m_sched_cycle;        \/**< scheduled cycle *\/$/;"	m	struct:block_schedule_info_s
m_sched_cycle	uop.h	/^    Counter           m_sched_cycle; \/**< scheduled cycle *\/$/;"	m	class:uop_c
m_sched_rate	schedule.h	/^    int*            m_sched_rate; \/**< schedule rate per inst. type *\/$/;"	m	class:schedule_c
m_sched_size	schedule.h	/^    int*            m_sched_size; \/**< schedule size per inst. type *\/$/;"	m	class:schedule_c
m_schedule	core.h	/^    schedule_c*                     m_schedule; \/**< scheduler *\/$/;"	m	class:core_c
m_schedule_list	schedule.h	/^    int             m_schedule_list[MAX_SCHED_SIZE]; \/**< schedule list in OOO *\/$/;"	m	class:schedule_c
m_schedule_modulo	schedule_smc.h	/^    int m_schedule_modulo; \/**< modulo to schedule next thread *\/$/;"	m	class:schedule_smc_c
m_schedule_running	schedule.h	/^    bool            m_schedule_running; \/**< enabled scheduler *\/$/;"	m	class:schedule_c
m_scheduled	dram.h	/^  Counter     m_scheduled;      \/**< scheduled cycle *\/$/;"	m	struct:drb_entry_s
m_schlist_entry	schedule_smc.h	/^    int* m_schlist_entry; \/**< schedule list entry *\/$/;"	m	class:schedule_smc_c
m_schlist_size	schedule_smc.h	/^    int m_schlist_size; \/**< schedule list size *\/$/;"	m	class:schedule_smc_c
m_schlist_tid	schedule_smc.h	/^    int* m_schlist_tid; \/**< schedule list thread id *\/$/;"	m	class:schedule_smc_c
m_second_mem	inst_info.h	/^  uns8 m_second_mem; \/**< has second memory *\/ $/;"	m	struct:trace_info_sc_s
m_section_length	process_manager.h	/^  int32_t           m_section_length; \/**< section length in instruction counts *\/$/;"	m	struct:section_info_s
m_section_pool	macsim.h	/^		pool_c<section_info_s>* m_section_pool; \/**<  section data pool *\/$/;"	m	class:macsim_c
m_section_type	process_manager.h	/^  Section_Type_enum m_section_type; \/**< section type *\/$/;"	m	struct:section_info_s
m_sections	process_manager.h	/^  list<section_info_s*> m_sections; \/**< code sections *\/$/;"	m	struct:thread_s
m_send_to_ds_avail	router.h	/^    Counter m_send_to_ds_avail;$/;"	m	class:router_c
m_send_to_us_avail	router.h	/^    Counter m_send_to_us_avail;$/;"	m	class:router_c
m_set	cache.h	/^    cache_set_c** m_set;       \/**< cache data structure *\/$/;"	m	class:cache_c
m_set_bits	cache.h	/^    int     m_set_bits;          \/**< cache set bits *\/    $/;"	m	class:cache_c
m_set_mask	cache.h	/^    Addr    m_set_mask;          \/**< cache set mask *\/$/;"	m	class:cache_c
m_sfu_dispatch_busy_cycle	schedule_smc.h	/^    Counter m_sfu_dispatch_busy_cycle; \/**<track when a SFU instruction can be dispatched *\/$/;"	m	class:schedule_smc_c
m_shared_memory	core.h	/^    sw_managed_cache_c             *m_shared_memory; \/**< GPU : scatchpad memory *\/$/;"	m	class:core_c
m_shift_bit	pref_common.h	/^    int m_shift_bit; \/**< shift bit to get cache line index *\/$/;"	m	class:hwp_common_c
m_shift_bits	cache.h	/^    int     m_shift_bits;        \/**< cache shift mask *\/$/;"	m	class:cache_c
m_simBase	allocate.h	/^    macsim_c*       m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:allocate_c
m_simBase	allocate_smc.h	/^    macsim_c*                      m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:smc_allocate_c
m_simBase	bp.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:bp_dir_base_c
m_simBase	bp_targ.h	/^     macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/ $/;"	m	class:bp_targ_c
m_simBase	bug_detector.h	/^    macsim_c* m_simBase; \/**< pointer to the simulation base class *\/$/;"	m	class:bug_detector_c
m_simBase	cache.h	/^    macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:cache_c
m_simBase	core.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:core_c
m_simBase	dram.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:dram_controller_c
m_simBase	dram.h	/^  macsim_c*   m_simBase;        \/**< macsim_c base class for simulation globals *\/$/;"	m	struct:drb_entry_s
m_simBase	exec.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:exec_c
m_simBase	frontend.h	/^    macsim_c*     m_simBase; \/**< macsim base class for simulation globals *\/$/;"	m	class:frontend_c
m_simBase	macsim.h	/^		macsim_c* m_simBase; \/**< self-reference for macro usage *\/$/;"	m	class:macsim_c
m_simBase	map.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:map_c
m_simBase	map.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:map_data_c
m_simBase	memory.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:memory_c
m_simBase	memory.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:queue_c
m_simBase	memory.h	/^    macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:dcu_c
m_simBase	memory.h	/^    macsim_c* m_simBase; \/**< pointer to the base simulation class *\/$/;"	m	struct:queue_c::sort_func
m_simBase	memreq_info.h	/^  macsim_c*     m_simBase;      \/**< reference to macsim base class for sim globals *\/$/;"	m	struct:mem_req_s
m_simBase	noc.h	/^    macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:noc_c
m_simBase	port.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:port_c
m_simBase	pqueue.h	/^    macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:pqueue_c
m_simBase	pref.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:pref_base_c
m_simBase	pref_common.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:hwp_common_c
m_simBase	process_manager.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:process_manager_c
m_simBase	process_manager.h	/^  macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	struct:thread_s
m_simBase	readonly_cache.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:readonly_cache_c
m_simBase	retire.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:retire_c
m_simBase	rob.h	/^    macsim_c*       m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:rob_c
m_simBase	rob_smc.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:smc_rob_c
m_simBase	router.h	/^    macsim_c* m_simBase; \/**< pointer to simulation base class *\/$/;"	m	class:router_c
m_simBase	router.h	/^    macsim_c* m_simBase; \/**< sim base *\/$/;"	m	class:router_wrapper_c
m_simBase	schedule.h	/^   macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:schedule_c
m_simBase	schedule_io.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:schedule_io_c
m_simBase	schedule_ooo.h	/^     macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:schedule_ooo_c
m_simBase	schedule_smc.h	/^    macsim_c* m_simBase; \/**< macsim_c base class for simulation globals *\/$/;"	m	class:schedule_smc_c
m_simBase	statistics.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:CoreStatistics
m_simBase	statistics.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:GlobalStatistics
m_simBase	statistics.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:ProcessorStatistics
m_simBase	sw_managed_cache.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:sw_managed_cache_c
m_simBase	trace_read.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:trace_read_c
m_simBase	uop.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:uop_c
m_simBase	utils.h	/^    macsim_c* m_simBase;         \/**< macsim_c base class for simulation globals *\/$/;"	m	class:cache_partition_framework_c
m_sim_end	macsim.h	/^		bool m_sim_end[MAX_NUM_CORES]; \/**< core sim end flag *\/$/;"	m	class:macsim_c
m_sim_processes	macsim.h	/^		unordered_map<int, process_s*> m_sim_processes; \/**< process map *\/$/;"	m	class:macsim_c
m_sim_start_time	core.h	/^    time_t                   m_sim_start_time; \/**< simulation start time *\/$/;"	m	class:core_c
m_simulation_cycle	macsim.h	/^		Counter m_simulation_cycle; \/**< simulation cycle count *\/$/;"	m	class:macsim_c
m_size	dram.h	/^  int         m_size;           \/**< size *\/$/;"	m	struct:drb_entry_s
m_size	memory.h	/^    unsigned int m_size; \/**< queue size *\/$/;"	m	class:queue_c
m_size	memreq_info.h	/^  uns           m_size;         \/**< request size *\/$/;"	m	struct:mem_req_s
m_size	pqueue.h	/^    int m_size; \/**< queue bucket size *\/$/;"	m	class:pqueue_c
m_size	trace_read.h	/^  uint8_t  m_size;              \/**< instruction size *\/$/;"	m	struct:trace_info_s
m_size	utils.h	/^    int m_size; \/**< hash table size. to get unique id *\/$/;"	m	class:multi_key_map_c
m_skip	cache.h	/^    bool          m_skip; \/\/!< skip LLC$/;"	m	class:cache_entry_c
m_skip	memreq_info.h	/^  bool          m_skip;         \/**< llc skip bit *\/ $/;"	m	struct:mem_req_s
m_skip_llc	uop.h	/^    bool              m_skip_llc; \/**< skip last level cache *\/$/;"	m	class:uop_c
m_sort	dram.h	/^    class sort_func* m_sort; \/**< sort function *\/$/;"	m	class:dc_frfcfs_c	typeref:class:dc_frfcfs_c::sort_func
m_src	noc.h	/^  int     m_src; \/**< packet src *\/$/;"	m	struct:noc_entry_s
m_src	router.h	/^    int        m_src; \/**< msg source *\/$/;"	m	class:flit_c
m_src	trace_read.h	/^  uint8_t  m_src[MAX_SRC_NUM];  \/**< src register id *\/$/;"	m	struct:trace_info_s
m_src_info	uop.h	/^    uns16             m_src_info[MAX_SRCS]; \/**< src uop info *\/$/;"	m	class:uop_c
m_src_uop_num	uop.h	/^    Counter           m_src_uop_num; \/**< number of source uops *\/$/;"	m	class:uop_c
m_srcs	inst_info.h	/^    reg_info_s       m_srcs [MAX_SRCS]; \/\/!< source register information$/;"	m	class:inst_info_s
m_srcs	trace_read.h	/^  reg_info_s   m_srcs[MAX_SRCS]; \/**< source register information *\/$/;"	m	struct:trace_uop_s
m_srcs_not_rdy_vector	uop.h	/^    int               m_srcs_not_rdy_vector; \/**< src not ready bit vector *\/$/;"	m	class:uop_c
m_srcs_rdy	uop.h	/^    bool              m_srcs_rdy; \/**< source ready *\/$/;"	m	class:uop_c
m_st_vaddr	trace_read.h	/^  uint32_t m_st_vaddr;          \/**< store address *\/$/;"	m	struct:trace_info_s
m_start_to_fetch	process_manager.h	/^  bool    m_start_to_fetch;     \/**< start fetching *\/$/;"	m	struct:block_schedule_info_s
m_starvation_cycle	dram.h	/^    int m_starvation_cycle; \/**< number of cycles without completed requests*\/$/;"	m	class:dram_controller_c
m_state	dram.h	/^  int         m_state;          \/**< state *\/$/;"	m	struct:drb_entry_s
m_state	memreq_info.h	/^  Mem_Req_State m_state;        \/**< memory request state *\/   $/;"	m	struct:mem_req_s
m_state	router.h	/^    int        m_state; \/**< current state *\/$/;"	m	class:flit_c
m_state	uop.h	/^    Uop_State         m_state; \/**< the state of the op in the datapath *\/$/;"	m	class:uop_c
m_stop_prefetch	memory.h	/^    Counter m_stop_prefetch; \/**< when set, no prefetches will be inserted *\/$/;"	m	class:memory_c
m_store_mask	map.h	/^    uns8   m_store_mask;        \/**< shows position of all distinct stores $/;"	m	class:mem_map_entry_c
m_suffix	statistics.h	/^    string m_suffix; \/**< stat suffix *\/$/;"	m	class:AbstractStat
m_sw_avail	router.h	/^    Counter* m_sw_avail; \/**< switch availability *\/$/;"	m	class:router_c
m_sw_batch	router.h	/^    bool       m_sw_batch; \/**< SWA batch *\/$/;"	m	class:flit_c
m_sync_count	frontend.h	/^  int32_t m_sync_count; \/**< synchronization count *\/$/;"	m	struct:sync_thread_s
m_sync_count	frontend.h	/^  uint32_t           m_sync_count; \/**< sync count *\/$/;"	m	struct:frontend_s
m_sync_done	frontend.h	/^    list<int32_t> m_sync_done; \/**< synchronization information *\/$/;"	m	class:frontend_c
m_sync_info	frontend.h	/^    hash_c<sync_thread_s>* m_sync_info; \/**< synchronization information *\/$/;"	m	class:frontend_c
m_sync_wait_count	frontend.h	/^  uint64_t           m_sync_wait_count; \/**< sync wait count *\/$/;"	m	struct:frontend_s
m_sync_wait_start	frontend.h	/^  uint64_t           m_sync_wait_start; \/**< sync wait start *\/$/;"	m	struct:frontend_s
m_table	utils.h	/^    unordered_map<int, unordered_map<int, int> *> m_table; \/**< hash table *\/$/;"	m	class:multi_key_map_c
m_table	utils.h	/^    unordered_map<int64, T*> m_table; \/**< hash table *\/$/;"	m	class:hash_c
m_table_info	inst_info.h	/^    table_info_s    *m_table_info; \/\/!< pointer into the table of static instruction information$/;"	m	class:inst_info_s
m_tag	cache.h	/^    Addr          m_tag;          \/\/!< tag for the line $/;"	m	class:cache_entry_c
m_tag_directory	memory.h	/^    unordered_map<Addr, vector<bool>*> m_tag_directory; \/**< oracle cache coherence table *\/$/;"	m	class:memory_c
m_tag_mask	cache.h	/^    Addr    m_tag_mask;          \/**< cache tag mask *\/$/;"	m	class:cache_c
m_tail	router.h	/^    bool       m_tail; \/**< tail flit? *\/$/;"	m	class:flit_c
m_taken_mask	trace_read.h	/^  uint32_t     m_taken_mask;    \/**< branch taken mask *\/$/;"	m	struct:trace_uop_s
m_taken_mask	uop.h	/^    uint32_t          m_taken_mask; \/**< GPU : taken mask *\/$/;"	m	class:uop_c
m_target	trace_read.h	/^  Addr         m_target;        \/**< branch target address *\/$/;"	m	struct:trace_uop_s
m_target_addr	uop.h	/^    Addr              m_target_addr; \/**< branch target address *\/$/;"	m	class:uop_c
m_td_pending_req	memory.h	/^    unordered_map<Addr, bool> m_td_pending_req; \/**< pending requests in tag directory *\/$/;"	m	class:memory_c
m_temp_inst_count	process_manager.h	/^  uint64_t             m_temp_inst_count; \/**< temp instruction count *\/$/;"	m	struct:thread_s
m_temp_uop_count	process_manager.h	/^  uint64_t             m_temp_uop_count; \/**< temp uop count *\/$/;"	m	struct:thread_s
m_terminal	dram.h	/^    ManifoldProcessor* m_terminal; \/**< connects to Iris interface->router *\/$/;"	m	class:dram_controller_c
m_terminal	memory.h	/^    ManifoldProcessor* m_terminal; \/**< terminal to the NoC router *\/$/;"	m	class:dcu_c
m_terminated_tid	core.h	/^    unordered_map<int, bool> m_terminated_tid; \/**< ids of terminated threads *\/$/;"	m	class:core_c
m_termination_check	macsim.h	/^    bool m_termination_check[2]; \/**< termination checking logic *\/$/;"	m	class:macsim_c
m_texture_cache	core.h	/^    readonly_cache_c               *m_texture_cache; \/**< GPU : texture cache *\/$/;"	m	class:core_c
m_theKnobs	knob.h	/^    map<string, abstract_knob_c*, ltstr_s> m_theKnobs; \/**< knob table *\/$/;"	m	class:KnobsContainer
m_theTokenizer	knob.h	/^    KnobEntryTokenizer m_theTokenizer; \/**< tokenizer *\/$/;"	m	class:KnobsContainer
m_thread_end_cycle	process_manager.h	/^ uns64 m_thread_end_cycle;      \/**< thread end cycle *\/$/;"	m	struct:thread_stat_s
m_thread_fetch_cycle	process_manager.h	/^ uns64 m_thread_fetch_cycle;    \/**< thread fetched cycle *\/$/;"	m	struct:thread_stat_s
m_thread_finished	core.h	/^    unordered_map<int, bool> m_thread_finished; \/**< thread finished *\/$/;"	m	class:core_c
m_thread_id	allocate_smc.h	/^  int32 m_thread_id; \/**< thread id *\/$/;"	m	struct:gpu_allocq_entry_s
m_thread_id	dram.h	/^  int         m_thread_id;      \/**< thread id *\/$/;"	m	struct:drb_entry_s
m_thread_id	map.h	/^    int      m_thread_id;       \/**< thread id *\/$/;"	m	class:map_entry_c
m_thread_id	memreq_info.h	/^  int           m_thread_id;    \/**< thread id *\/$/;"	m	struct:mem_req_s
m_thread_id	process_manager.h	/^  int                  m_thread_id; \/**< current thread id *\/$/;"	m	struct:thread_s
m_thread_id	process_manager.h	/^  uint32_t m_thread_id; \/**< thread id *\/$/;"	m	struct:thread_start_info_s
m_thread_id	process_manager.h	/^ int32 m_thread_id;             \/**< thread id *\/$/;"	m	struct:thread_stat_s
m_thread_id	uop.h	/^    int               m_thread_id; \/**< thread id *\/$/;"	m	class:uop_c
m_thread_id	uop.h	/^    int   m_thread_id; \/**< thread id *\/$/;"	m	class:recovery_info_c
m_thread_init	process_manager.h	/^  bool                 m_thread_init; \/**< thread initialized *\/$/;"	m	struct:thread_s
m_thread_pool	macsim.h	/^		pool_c<thread_s>* m_thread_pool; \/**<  thread data pool *\/$/;"	m	class:macsim_c
m_thread_queue	process_manager.h	/^    list<thread_trace_info_node_s *> *m_thread_queue; \/**< thread queue *\/$/;"	m	class:process_manager_c
m_thread_reach_end	core.h	/^    unordered_map<int, bool> m_thread_reach_end; \/**< thread reaches last instruction *\/$/;"	m	class:core_c
m_thread_robs	rob_smc.h	/^    rob_c **        m_thread_robs; \/**< reorder buffer per thread *\/$/;"	m	class:smc_rob_c
m_thread_sched_cycle	process_manager.h	/^ uns64 m_thread_sched_cycle;    \/**< thread scheduled cycle *\/$/;"	m	struct:thread_stat_s
m_thread_start_info	process_manager.h	/^  thread_start_info_s *m_thread_start_info; \/**< thread start information *\/$/;"	m	struct:process_s
m_thread_stats	macsim.h	/^		unordered_map<int, thread_stat_s*> m_thread_stats; \/**< thread stat map *\/$/;"	m	class:macsim_c
m_thread_to_rob_map	rob_smc.h	/^    unordered_map<int, int> m_thread_to_rob_map; \/**< thread id to rob mapping *\/$/;"	m	class:smc_rob_c
m_thread_trace_info	core.h	/^    unordered_map<int, thread_s*> m_thread_trace_info; \/**< thread trace information *\/$/;"	m	class:core_c
m_thread_trace_info	process_manager.h	/^  thread_s**           m_thread_trace_info; \/**< thread trace information *\/$/;"	m	struct:process_s
m_tid	memory.h	/^  int     m_tid;                \/**< thread id *\/$/;"	m	struct:dcache_data_s
m_tid	process_manager.h	/^  int        m_tid;             \/**< thread id *\/$/;"	m	struct:thread_trace_info_node_s
m_tid_to_appl_map	core.h	/^    unordered_map<int, process_s *> m_tid_to_appl_map; \/**< get application id with tid *\/$/;"	m	class:core_c
m_tile_bits	cache.h	/^    int     m_tile_bits;         \/**< number of bits taken by tile id *\/$/;"	m	class:cache_c
m_timestamp	dram.h	/^  Counter     m_timestamp;      \/**< last touched cycle *\/$/;"	m	struct:drb_entry_s
m_timestamp	router.h	/^    Counter    m_timestamp; \/**< timestamp *\/$/;"	m	class:flit_c
m_tmp_output_buffer	dram.h	/^    list<mem_req_s*>* m_tmp_output_buffer; \/**< buffer to simulate any additional dram latency *\/$/;"	m	class:dram_controller_c
m_top_level_reconv_seen	frontend.h	/^  int32_t m_top_level_reconv_seen; \/**< top level reconvergence seen *\/$/;"	m	struct:reconv_data_s
m_topology	router.h	/^    string m_topology; \/**< router topology *\/$/;"	m	class:router_c
m_topology	router.h	/^    string m_topology; \/**< topology *\/$/;"	m	class:router_wrapper_c
m_total_count	statistics.h	/^    unsigned long long m_total_count; \/**< total count from beginning of run *\/$/;"	m	class:AbstractStat
m_total_insts_retired	retire.h	/^    Counter                     m_total_insts_retired; \/**< total retired instructions *\/ $/;"	m	class:retire_c
m_total_num_application	macsim.h	/^		int m_total_num_application; \/**< total number of applications *\/$/;"	m	class:macsim_c
m_total_packet	router.h	/^    int m_total_packet; \/**< number of total packets *\/$/;"	m	class:router_wrapper_c
m_total_packet	router.h	/^    int* m_total_packet; \/**< number of total packets (global) *\/$/;"	m	class:router_c
m_total_req	dram.h	/^    int m_total_req; \/**< total pending requests *\/$/;"	m	class:dram_controller_c
m_total_retired_block	macsim.h	/^		int m_total_retired_block; \/**< number of retired blocks total *\/$/;"	m	class:macsim_c
m_total_router	router.h	/^    int m_total_router; \/**< number of total routers *\/$/;"	m	class:router_c
m_total_thread_num	process_manager.h	/^  int     m_total_thread_num;   \/**< number of total threads *\/$/;"	m	struct:block_schedule_info_s
m_trace_ended	process_manager.h	/^  bool                 m_trace_ended; \/**< trace ended *\/$/;"	m	struct:thread_s
m_trace_exist	process_manager.h	/^  bool    m_trace_exist;        \/**< trace exist *\/$/;"	m	struct:block_schedule_info_s
m_trace_file	process_manager.h	/^  gzFile               m_trace_file; \/**< gzip trace file *\/$/;"	m	struct:thread_s
m_trace_info	inst_info.h	/^    trace_info_sc_s  m_trace_info; \/\/!< trace information$/;"	m	class:inst_info_s
m_trace_info_ptr	process_manager.h	/^  thread_s*  m_trace_info_ptr;  \/**< trace information pointer *\/$/;"	m	struct:thread_trace_info_node_s
m_trace_node_pool	macsim.h	/^		pool_c<thread_trace_info_node_s>* m_trace_node_pool; \/**<  trace node pool *\/$/;"	m	class:macsim_c
m_trace_reader	macsim.h	/^		trace_read_c* m_trace_reader; \/**< trace reader *\/$/;"	m	class:macsim_c
m_trace_uop_array	process_manager.h	/^  trace_uop_s*         m_trace_uop_array[MAX_PUP]; \/**< trace uop array *\/$/;"	m	struct:thread_s
m_type	inst_info.h	/^  Reg_Type m_type;               \/\/!< integer, floating point, extra$/;"	m	struct:reg_info_s
m_type	inst_info.h	/^  uns8        m_type; \/\/!< the format type code for the instruction (see table)$/;"	m	struct:table_info_s
m_type	memory.h	/^    Unit_Type m_type; \/**< core type that this cache belongs to *\/$/;"	m	class:dcu_c
m_type	memreq_info.h	/^  Mem_Req_Type  m_type;         \/**< request type *\/$/;"	m	struct:mem_req_s
m_type	router.h	/^    int m_type; \/**< router type *\/$/;"	m	class:router_c
m_type	uop.h	/^    Dep_Type  m_type; \/**< dependence type *\/$/;"	m	class:src_info_c
m_uncoalesced_flag	uop.h	/^    bool              m_uncoalesced_flag; \/**< uncoalesced flag *\/$/;"	m	class:uop_c
m_unique_id	dram.cc	/^int drb_entry_s::m_unique_id = 0;$/;"	m	class:drb_entry_s	file:
m_unique_id	dram.h	/^  static int  m_unique_id;      \/**< unique drb entry id *\/$/;"	m	struct:drb_entry_s
m_unique_id	memory.cc	/^int memory_c::m_unique_id = 0;$/;"	m	class:memory_c	file:
m_unique_id	memory.h	/^    static int m_unique_id; \/**< unique memory request id *\/$/;"	m	class:memory_c
m_unique_num	map.h	/^    Counter  m_unique_num;      \/**< uop's unique number *\/$/;"	m	class:map_entry_c
m_unique_num	uop.h	/^    Counter           m_unique_num; \/**< uop unique number *\/$/;"	m	class:uop_c
m_unique_num	uop.h	/^    Counter   m_unique_num; \/**< uop unique number *\/$/;"	m	class:src_info_c
m_unique_scheduled_thread_num	core.h	/^    int m_unique_scheduled_thread_num; \/**< total number of scheduled threads *\/$/;"	m	class:core_c
m_unique_thread_id	process_manager.h	/^  int                  m_unique_thread_id; \/**< unique thread id *\/$/;"	m	struct:thread_s
m_unique_thread_id	process_manager.h	/^ int32 m_unique_thread_id;      \/**< unique thread id *\/$/;"	m	struct:thread_stat_s
m_unique_thread_id	uop.h	/^    int               m_unique_thread_id; \/**< unique thread id *\/$/;"	m	class:uop_c
m_unique_uop_num	core.h	/^    Counter                  m_unique_uop_num; \/**< unique uop number *\/$/;"	m	class:core_c
m_unit_type	allocate.h	/^    Unit_Type       m_unit_type; \/**< core type *\/$/;"	m	class:allocate_c
m_unit_type	allocate_smc.h	/^    Unit_Type                      m_unit_type; \/**< core type *\/$/;"	m	class:smc_allocate_c
m_unit_type	core.h	/^    Unit_Type                m_unit_type; \/**< core type *\/$/;"	m	class:core_c
m_unit_type	rob.h	/^    Unit_Type m_unit_type; \/**< core type *\/ $/;"	m	class:rob_c
m_unit_type	rob_smc.h	/^    Unit_Type       m_unit_type;  \/**< core type *\/$/;"	m	class:smc_rob_c
m_unit_type	schedule.h	/^    Unit_Type       m_unit_type; \/**< core type *\/$/;"	m	class:schedule_c
m_uop	map.h	/^    uop_c   *m_uop;             \/**< uop pointer *\/$/;"	m	class:map_entry_c
m_uop	map.h	/^    uop_c* m_uop [BYTES_IN_QUADWORD]; \/**< last op to write (invalid when committed) *\/$/;"	m	class:mem_map_entry_c
m_uop	memreq_info.h	/^  uop_c*        m_uop;          \/**< uop that generates this request *\/$/;"	m	struct:mem_req_s
m_uop	uop.h	/^    uop_c    *m_uop; \/**< uop pointer *\/$/;"	m	class:src_info_c
m_uop_count	process_manager.h	/^  uint64_t             m_uop_count;  \/**< total uop counts *\/$/;"	m	struct:thread_s
m_uop_info	uop.h	/^    uop_info_c        m_uop_info; \/**< uop microarchitecture info *\/$/;"	m	class:uop_c
m_uop_list	rob_smc.h	/^    vector<uop_c *> m_uop_list;   \/**< retireable uop list *\/ $/;"	m	class:smc_rob_c
m_uop_num	map.h	/^    Counter  m_uop_num;         \/**< uop number *\/$/;"	m	class:map_entry_c
m_uop_num	uop.h	/^    Counter           m_uop_num; \/**< uop number *\/$/;"	m	class:uop_c
m_uop_num	uop.h	/^    Counter   m_uop_num; \/**< uop number *\/$/;"	m	class:src_info_c
m_uop_pool	allocate.h	/^    pool_c<uop_c>*  m_uop_pool; \/**< uop pool *\/$/;"	m	class:allocate_c
m_uop_pool	allocate_smc.h	/^    pool_c<uop_c>*                 m_uop_pool; \/**< uop pool *\/$/;"	m	class:smc_allocate_c
m_uop_pool	core.h	/^    pool_c<uop_c>                  *m_uop_pool; \/**< uop pool *\/$/;"	m	class:core_c
m_uop_pool	macsim.h	/^		pool_c<uop_c> *m_uop_pool; \/**<  uop pool *\/$/;"	m	class:macsim_c
m_uop_table	bug_detector.h	/^    vector<map<uop_c*, uint64_t> *> m_uop_table; \/**< uop table *\/$/;"	m	class:bug_detector_c
m_uop_type	uop.h	/^    Uop_Type          m_uop_type; \/**< uop type *\/$/;"	m	class:uop_c
m_uops_retired	retire.h	/^    unordered_map<int, Counter> m_uops_retired; \/**< number of retired uop per thread *\/$/;"	m	class:retire_c
m_update_acc	pref_common.h	/^    bool m_update_acc; \/**< set to recalculate the accuracy *\/$/;"	m	class:hwp_common_c
m_us_injection_buffer	router.h	/^    queue<mem_req_s *> m_us_injection_buffer;$/;"	m	class:router_c
m_us_injection_buffer_max_size	router.h	/^    int m_us_injection_buffer_max_size;$/;"	m	class:router_c
m_us_start	router.h	/^    int m_us_start;$/;"	m	class:router_c
m_usable_cnt	rob.h	/^    int       m_usable_cnt; \/**< usable rob entries *\/$/;"	m	class:rob_c
m_useful	pref_common.h	/^    Counter m_useful;  \/**< number of useful prefetches *\/$/;"	m	class:hwp_common_c
m_ustream	router.h	/^    vector<router_c *> m_ustream; \/**< up stream routers *\/$/;"	m	class:router_c
m_va	trace_read.h	/^  Addr         m_va;            \/**< virtual address *\/$/;"	m	struct:trace_uop_s
m_vaddr	uop.h	/^    Addr              m_vaddr; \/**< memory address *\/$/;"	m	class:uop_c
m_valid	cache.h	/^    bool          m_valid;        \/\/!< valid bit for the line $/;"	m	class:cache_entry_c
m_valid	uop.h	/^    bool              m_valid; \/**< valid uop *\/$/;"	m	class:uop_c
m_value	knob.h	/^    T m_value; \/**< knob value *\/$/;"	m	class:KnobTemplate
m_value	knob.h	/^    string m_value; \/**< knob value *\/$/;"	m	class:KnobTemplate
m_value	knob.h	/^  string m_value; \/**< knob value *\/$/;"	m	struct:param_file_entry_s
m_valueProvided	knob.h	/^    bool   m_valueProvided; \/**< value provided *\/$/;"	m	class:abstract_knob_c
m_valueString	knob.h	/^    string m_valueString; \/**< knob value in string *\/$/;"	m	class:abstract_knob_c
m_valuesFromCommandLineSwitches	knob.h	/^    map<string, string, ltstr_s> m_valuesFromCommandLineSwitches; \/**< values from command *\/$/;"	m	class:KnobsContainer
m_valuesFromFile	knob.h	/^    map<string, string, ltstr_s> m_valuesFromFile; \/**< knob values from the file *\/$/;"	m	class:KnobsContainer
m_vc	router.h	/^    int m_vc; \/**< credit vc *\/$/;"	m	class:credit_c
m_vc_batch	router.h	/^    bool       m_vc_batch; \/**< VCA batch *\/$/;"	m	class:flit_c
m_wb_queue	memory.h	/^    queue_c*  m_wb_queue; \/**< write-back queue *\/$/;"	m	class:dcu_c
m_with_data	memreq_info.h	/^  bool          m_with_data;    \/**< set to true for global and local mem writes *\/$/;"	m	struct:mem_req_s
m_work_counter	frontend.h	/^  int32_t m_work_counter; \/**< work counter *\/$/;"	m	struct:reconv_data_s
m_write_flg	trace_read.h	/^  bool     m_write_flg;         \/**< write flag *\/$/;"	m	struct:trace_info_s
m_write_last_cycle	port.h	/^    Counter m_write_last_cycle; \/**< last write port access cycle *\/$/;"	m	class:port_c
m_write_ports_in_use	port.h	/^    uns     m_write_ports_in_use; \/**< number of currently using write ports *\/$/;"	m	class:port_c
m_writes_prevent_reads	port.h	/^    bool    m_writes_prevent_reads; \/**< read port blocked due to write port access *\/$/;"	m	class:port_c
m_x86_core_pool	macsim.h	/^		queue<int> m_x86_core_pool; \/**< x86 cores pool *\/$/;"	m	class:macsim_c
macsim_c	macsim.cc	/^macsim_c::macsim_c()$/;"	f	class:macsim_c
macsim_c	macsim.h	/^class macsim_c$/;"	c
main	build.py	/^def main():$/;"	f
main	main.cc	/^int main(int argc, char** argv)$/;"	f
map_c	map.cc	/^map_c::map_c(macsim_c* simBase)$/;"	f	class:map_c
map_c	map.h	/^class map_c$/;"	c
map_data_c	map.cc	/^map_data_c::map_data_c(macsim_c* simBase)$/;"	f	class:map_data_c
map_data_c	map.h	/^class map_data_c$/;"	c
map_entry_c	map.h	/^class map_entry_c$/;"	c
map_mem_dep	map.cc	/^void map_c::map_mem_dep(uop_c *uop)$/;"	f	class:map_c
map_uop	map.cc	/^void map_c::map_uop (uop_c *uop)$/;"	f	class:map_c
master_clock	macsim.h	/^		manifold::kernel::Clock* master_clock; \/**< manifold clock - has to be global or static *\/$/;"	m	class:macsim_c
max_ALLOCQ	uop.h	/^  max_ALLOCQ$/;"	e	enum:Iaq_Type_enum
mem_ALLOCQ	uop.h	/^  mem_ALLOCQ,$/;"	e	enum:Iaq_Type_enum
mem_map_entry_c	map.h	/^class mem_map_entry_c$/;"	c
mem_req_c	memreq_info.h	/^class mem_req_c {$/;"	c
mem_req_s	global_defs.h	/^typedef struct mem_req_s mem_req_s;$/;"	t	typeref:struct:mem_req_s
mem_req_s	memreq_info.cc	/^mem_req_s::mem_req_s(macsim_c* simBase)$/;"	f	class:mem_req_s
mem_req_s	memreq_info.h	/^typedef struct mem_req_s {$/;"	s
mem_req_s	memreq_info.h	/^} mem_req_s;$/;"	t	typeref:struct:mem_req_s
mem_req_type_name	memreq_info.cc	/^const char* mem_req_c::mem_req_type_name[MAX_MEM_REQ_TYPE] = {$/;"	m	class:mem_req_c	file:
mem_req_type_name	memreq_info.h	/^    static const char* mem_req_type_name[MAX_MEM_REQ_TYPE]; \/**< memory request type string *\/$/;"	m	class:mem_req_c
mem_state	memreq_info.cc	/^const char* mem_req_c::mem_state[MEM_STATE_MAX] = {$/;"	m	class:mem_req_c	file:
mem_state	memreq_info.h	/^    static const char* mem_state[MEM_STATE_MAX];            \/**< memory request state string *\/$/;"	m	class:mem_req_c
memberOfDistribution	statistics.h	/^    virtual bool memberOfDistribution()$/;"	f	class:AbstractStat
memberOfDistribution	statistics.h	/^    virtual bool memberOfDistribution()$/;"	f	class:DISTMember_Stat
memory_c	memory.cc	/^memory_c::memory_c(macsim_c* simBase)$/;"	f	class:memory_c
memory_c	memory.h	/^class memory_c$/;"	c
mt_scheduler_s	frontend.h	/^typedef struct mt_scheduler_s {$/;"	s
mt_scheduler_s	frontend.h	/^} mt_scheduler_s;$/;"	t	typeref:struct:mt_scheduler_s
mt_scheduler_s	global_defs.h	/^typedef struct mt_scheduler_s mt_scheduler_s;$/;"	t	typeref:struct:mt_scheduler_s
multi_key_map_c	utils.cc	/^multi_key_map_c::multi_key_map_c()$/;"	f	class:multi_key_map_c
multi_key_map_c	utils.h	/^class multi_key_map_c $/;"	c
name	pref.h	/^    string        name;         \/**< prefetcher name *\/$/;"	m	class:pref_base_c
network_trace	macsim.h	/^		stringstream network_trace; \/**< network trace *\/$/;"	m	class:macsim_c
new_mem_req	memory.cc	/^bool memory_c::new_mem_req(Mem_Req_Type type, Addr addr, uns size, bool cache_hit, bool with_data, \\$/;"	f	class:memory_c
new_wb_req	memory.cc	/^mem_req_s* memory_c::new_wb_req(Addr addr, int size, bool ptx, dcache_data_s* data, int level)$/;"	f	class:memory_c
no_cache_c	memory.cc	/^no_cache_c::no_cache_c(macsim_c* simBase) : memory_c(simBase)$/;"	f	class:no_cache_c
no_cache_c	memory.h	/^class no_cache_c : public memory_c$/;"	c
no_nodes	macsim.h	/^		uint no_nodes; \/**< number of network nodes *\/$/;"	m	class:macsim_c
noc_c	noc.cc	/^noc_c::noc_c(macsim_c* simBase)$/;"	f	class:noc_c
noc_c	noc.h	/^class noc_c$/;"	c
noc_entry_s	noc.h	/^typedef struct noc_entry_s {$/;"	s
noc_entry_s	noc.h	/^} noc_entry_s;$/;"	t	typeref:struct:noc_entry_s
null_cache_line_fields	cache.cc	/^bool cache_c::null_cache_line_fields(cache_entry_c *line)$/;"	f	class:cache_c
numTokens	knob.cc	/^int KnobEntryTokenizer::numTokens() $/;"	f	class:KnobEntryTokenizer
num_states	pref_stride.h	/^  uns     num_states; \/**< number of states *\/$/;"	m	struct:stride_index_table_entry_struct
on_complete	dram.cc	/^void dram_controller_c::on_complete(drb_entry_s* req)$/;"	f	class:dram_controller_c
on_insert	dram.cc	/^void dram_controller_c::on_insert(mem_req_s* req, int bid, int rid, int cid)$/;"	f	class:dram_controller_c
on_run_a_cycle	dram.cc	/^void dram_controller_c::on_run_a_cycle()$/;"	f	class:dram_controller_c
open_traces	macsim.cc	/^void macsim_c::open_traces(string trace_list)$/;"	f	class:macsim_c
operator ()	dram.cc	/^bool dc_frfcfs_c::sort_func::operator()(const drb_entry_s* req_a, const drb_entry_s* req_b)$/;"	f	class:dc_frfcfs_c::sort_func
operator ()	knob.h	/^  bool operator()(const string& s1, const string& s2) const$/;"	f	struct:ltstr_s
operator ()	memory.cc	/^bool queue_c::sort_func::operator()(mem_req_s* a, mem_req_s* b)$/;"	f	class:queue_c::sort_func
operator ++	statistics.h	/^    inline void operator++(int)$/;"	f	class:AbstractStat
operator +=	statistics.h	/^    inline void operator+=(unsigned int delta)$/;"	f	class:AbstractStat
operator --	statistics.h	/^    inline void operator--(int)$/;"	f	class:AbstractStat
operator <<	knob.h	/^    friend ostream& operator<<(ostream& os, KnobsContainer& container)$/;"	f	class:KnobsContainer
operator T	knob.h	/^    operator T() const { return m_value; }$/;"	f	class:KnobTemplate
operator []	rob.h	/^    uop_c*& operator[](int index) $/;"	f	class:rob_c
operator []	statistics.h	/^    AbstractStat& operator[](int index) const$/;"	f	class:CoreStatistics
operator []	statistics.h	/^    AbstractStat& operator[](int index) const$/;"	f	class:GlobalStatistics
operator []	statistics.h	/^    inline AbstractStat& operator[](int index) const$/;"	f	class:ProcessorStatistics
operator bool	knob.h	/^    operator bool() const$/;"	f	class:KnobTemplate
operator string	knob.h	/^    operator string() const { return m_value; }$/;"	f	class:KnobTemplate
packet_injection	router.cc	/^void router_c::packet_injection(void)$/;"	f	class:router_c
param_file_entry_s	knob.h	/^typedef struct param_file_entry_s$/;"	s
param_file_entry_s	knob.h	/^} param_file_entry_s;$/;"	t	typeref:struct:param_file_entry_s
peek	pqueue.h	/^    T peek(int entry)$/;"	f	class:pqueue_c
peek_trace	trace_read.cc	/^bool trace_read_c::peek_trace(int core_id, trace_info_s *trace_info, int sim_thread_id, $/;"	f	class:trace_read_c
per_1000_inst_value	statistics.h	/^    float per_1000_inst_value; \/**< per 1000 instruction value *\/$/;"	m	class:PER_1000_INST_Stat
per_1000_pret_inst_value	statistics.h	/^    float per_1000_pret_inst_value; \/**< stat value *\/$/;"	m	class:PER_1000_PRET_INST_Stat
per_cycle	statistics.h	/^    float per_cycle; \/**< stat value *\/$/;"	m	class:PER_CYCLE_Stat
per_inst_value	statistics.h	/^    float per_inst_value; \/**< stat value *\/$/;"	m	class:PER_INST_Stat
percent	statistics.h	/^    float percent; \/**< percent *\/$/;"	m	class:PERCENT_Stat
pool_c	utils.h	/^    pool_c()$/;"	f	class:pool_c
pool_c	utils.h	/^    pool_c(int pool_expand_unit, string name)$/;"	f	class:pool_c
pool_c	utils.h	/^class pool_c$/;"	c
pool_size	pqueue.h	/^    int pool_size(void)$/;"	f	class:pqueue_c
pop	memory.cc	/^void queue_c::pop(mem_req_s* req)$/;"	f	class:queue_c
pop	rob.cc	/^void rob_c::pop()$/;"	f	class:rob_c
pop_req	router.cc	/^void router_c::pop_req(int dir)$/;"	f	class:router_c
port_available	exec.cc	/^bool exec_c::port_available(int uop_type)$/;"	f	class:exec_c
port_c	port.cc	/^port_c::port_c(string name, uns read, uns write, bool writes_prevent_reads, macsim_c* simBase)$/;"	f	class:port_c
port_c	port.h	/^class port_c$/;"	c
pqueue_c	pqueue.h	/^    pqueue_c(const int& size, const int& latency, const string name, macsim_c* simBase)$/;"	f	class:pqueue_c
pqueue_c	pqueue.h	/^class pqueue_c$/;"	c
pqueue_entry_s	pqueue.h	/^  typedef struct pqueue_entry_s {$/;"	s	class:pqueue_c
pqueue_entry_s	pqueue.h	/^  } pqueue_entry_s;$/;"	t	class:pqueue_c	typeref:struct:pqueue_c::pqueue_entry_s
pre_read_trace	trace_read.cc	/^void trace_read_c::pre_read_trace(thread_s* trace_info)$/;"	f	class:trace_read_c
pred	bp_gshare.cc	/^uns8 bp_gshare_c::pred (uop_c *uop)$/;"	f	class:bp_gshare_c
pred	bp_targ.cc	/^Addr bp_targ_c::pred (uop_c *uop)$/;"	f	class:bp_targ_c
predict_bpu	frontend.cc	/^int frontend_c::predict_bpu(uop_c *uop)$/;"	f	class:frontend_c
pref_acc_useupdate	pref_common.cc	/^void hwp_common_c::pref_acc_useupdate(Addr line_addr)$/;"	f	class:hwp_common_c
pref_addto_l1req_queue	pref_common.cc	/^bool hwp_common_c::pref_addto_l1req_queue(Addr line_index, uns8 prefetcher_id) $/;"	f	class:hwp_common_c
pref_addto_l2req_queue	pref_common.cc	/^bool hwp_common_c::pref_addto_l2req_queue( Addr line_index, uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_addto_l2req_queue	pref_common.cc	/^bool hwp_common_c::pref_addto_l2req_queue(Addr line_index, uns8 prefetcher_id, Addr loadPC)$/;"	f	class:hwp_common_c
pref_addto_l2req_queue	pref_common.cc	/^bool hwp_common_c::pref_addto_l2req_queue(Addr line_index, uns8 prefetcher_id, Addr loadPC, $/;"	f	class:hwp_common_c
pref_addto_l2req_queue_set	pref_common.cc	/^bool hwp_common_c::pref_addto_l2req_queue_set(Addr line_index, uns8 prefetcher_id, bool Begin, $/;"	f	class:hwp_common_c
pref_base_c	pref.cc	/^pref_base_c::pref_base_c(macsim_c* simBase)$/;"	f	class:pref_base_c
pref_base_c	pref.h	/^class pref_base_c$/;"	c
pref_compare_hwp_priority	pref_common.cc	/^int  pref_compare_hwp_priority(const void * const a, const void * const b)$/;"	f
pref_count	pref_stride.h	/^  int     pref_count; \/**< prefetch count *\/$/;"	m	struct:stride_index_table_entry_struct
pref_curr_state	pref_stride.h	/^  uns     pref_curr_state; \/**< prefetch current state *\/$/;"	m	struct:stride_index_table_entry_struct
pref_done	pref_common.cc	/^void hwp_common_c::pref_done(void)$/;"	f	class:hwp_common_c
pref_dummy_c	pref.h	/^    pref_dummy_c(macsim_c* simBase) : pref_base_c(simBase) {};$/;"	f	class:pref_dummy_c
pref_dummy_c	pref.h	/^class pref_dummy_c : public pref_base_c$/;"	c
pref_evictline_notused	pref_common.cc	/^void hwp_common_c::pref_evictline_notused(Addr addr)$/;"	f	class:hwp_common_c
pref_factory	pref_factory.cc	/^void pref_factory(vector<pref_base_c *> &pref_table, hwp_common_c *hcc, $/;"	f
pref_factory_c	pref_factory.cc	/^pref_factory_c::pref_factory_c()$/;"	f	class:pref_factory_c
pref_factory_c	pref_factory.h	/^class pref_factory_c$/;"	c
pref_get_accuracy	pref_common.cc	/^float hwp_common_c::pref_get_accuracy(uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_get_degfb	pref_common.cc	/^HWP_DynAggr hwp_common_c::pref_get_degfb(uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_get_l2pollution	pref_common.cc	/^float hwp_common_c::pref_get_l2pollution(void)$/;"	f	class:hwp_common_c
pref_get_overallaccuracy	pref_common.cc	/^float hwp_common_c::pref_get_overallaccuracy(HWP_Type type)$/;"	f	class:hwp_common_c
pref_get_regionbased_acc	pref_common.cc	/^float hwp_common_c::pref_get_regionbased_acc(void)$/;"	f	class:hwp_common_c
pref_get_replaccuracy	pref_common.cc	/^float hwp_common_c::pref_get_replaccuracy(uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_get_timeliness	pref_common.cc	/^float hwp_common_c::pref_get_timeliness(uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_hybrid_makeselection	pref_common.cc	/^void  hwp_common_c::pref_hybrid_makeselection(int reg_idx)$/;"	f	class:hwp_common_c
pref_id	pref_common.h	/^  uns8    pref_id; \/**< id, if trained \/ for hybrid prefetching *\/$/;"	m	struct:pref_region_info_s
pref_info_s	global_defs.h	/^typedef struct pref_info_s pref_info_s;$/;"	t	typeref:struct:pref_info_s
pref_info_s	pref_common.h	/^typedef struct pref_info_s {$/;"	s
pref_info_s	pref_common.h	/^} pref_info_s;$/;"	t	typeref:struct:pref_info_s
pref_init	core.cc	/^void core_c::pref_init(void) $/;"	f	class:core_c
pref_init	pref_common.cc	/^void hwp_common_c::pref_init(bool ptx)$/;"	f	class:hwp_common_c
pref_inst_s	global_defs.h	/^typedef struct pref_inst_ pref_inst_s;$/;"	t	typeref:struct:pref_inst_
pref_l1_hit	pref_common.cc	/^void hwp_common_c::pref_l1_hit(int tid, Addr line_addr, Addr load_PC, uop_c *uop)$/;"	f	class:hwp_common_c
pref_l1_miss	pref_common.cc	/^void hwp_common_c::pref_l1_miss(int tid, Addr line_addr, Addr load_PC, uop_c *uop)$/;"	f	class:hwp_common_c
pref_l1_pref_hit	pref_common.cc	/^void hwp_common_c::pref_l1_pref_hit(int tid, Addr line_addr, Addr load_PC, uns8 prefetcher_id, $/;"	f	class:hwp_common_c
pref_l1req_queue_filter	pref_common.cc	/^bool hwp_common_c::pref_l1req_queue_filter(Addr line_addr)$/;"	f	class:hwp_common_c
pref_l2_hit	pref_common.cc	/^void hwp_common_c::pref_l2_hit (mem_req_s *req)$/;"	f	class:hwp_common_c
pref_l2_hit	pref_common.cc	/^void hwp_common_c::pref_l2_hit(int tid, Addr line_addr, Addr load_PC, uop_c *uop)$/;"	f	class:hwp_common_c
pref_l2_miss	pref_common.cc	/^void hwp_common_c::pref_l2_miss(int tid, Addr line_addr, uop_c* uop)$/;"	f	class:hwp_common_c
pref_l2_pref_hit	pref_common.cc	/^void hwp_common_c::pref_l2_pref_hit(int tid, Addr line_addr, Addr load_PC, uns8 prefetcher_id, $/;"	f	class:hwp_common_c
pref_l2_pref_hit_late	pref_common.cc	/^void hwp_common_c::pref_l2_pref_hit_late(int tid, Addr line_addr, Addr load_PC, $/;"	f	class:hwp_common_c
pref_l2evict	pref_common.cc	/^void hwp_common_c::pref_l2evict(Addr addr)$/;"	f	class:hwp_common_c
pref_l2evictOnPF	pref_common.cc	/^void hwp_common_c::pref_l2evictOnPF(Addr addr)$/;"	f	class:hwp_common_c
pref_l2req_queue_filter	pref_common.cc	/^bool hwp_common_c::pref_l2req_queue_filter(Addr line_addr)$/;"	f	class:hwp_common_c
pref_l2sent	pref_common.cc	/^void hwp_common_c::pref_l2sent(uns8 prefetcher_id)$/;"	f	class:hwp_common_c
pref_last_index	pref_stride.h	/^  Addr    pref_last_index; \/**< prefetch last index *\/$/;"	m	struct:stride_index_table_entry_struct
pref_matchregion	pref_common.cc	/^int  hwp_common_c::pref_matchregion(Addr reg_id, bool evict_onPF)$/;"	f	class:hwp_common_c
pref_mem_req_s	pref_common.h	/^  pref_mem_req_s() {$/;"	f	struct:pref_mem_req_s
pref_mem_req_s	pref_common.h	/^typedef struct pref_mem_req_s {$/;"	s
pref_mem_req_s	pref_common.h	/^} pref_mem_req_s;$/;"	t	typeref:struct:pref_mem_req_s
pref_polbv_access	pref_common.cc	/^char* hwp_common_c::pref_polbv_access(Addr lineIndex)$/;"	f	class:hwp_common_c
pref_region_info_s	pref_common.h	/^  pref_region_info_s() {$/;"	f	struct:pref_region_info_s
pref_region_info_s	pref_common.h	/^typedef struct pref_region_info_s {$/;"	s
pref_region_info_s	pref_common.h	/^} pref_region_info_s;$/;"	t	typeref:struct:pref_region_info_s
pref_region_line_status_s	pref_common.h	/^  pref_region_line_status_s() {$/;"	f	struct:pref_region_line_status_s
pref_region_line_status_s	pref_common.h	/^typedef struct pref_region_line_status_s {$/;"	s
pref_region_line_status_s	pref_common.h	/^} pref_region_line_status_s;$/;"	t	typeref:struct:pref_region_line_status_s
pref_req_info_s	global_defs.h	/^typedef struct pref_req_info_s pref_req_info_s;$/;"	t	typeref:struct:pref_req_info_s
pref_req_info_s	memreq_info.h	/^typedef struct pref_req_info_s {$/;"	s
pref_req_info_s	memreq_info.h	/^} pref_req_info_s;$/;"	t	typeref:struct:pref_req_info_s
pref_sent	pref_common.h	/^  uns16   pref_sent;    \/**< Bit vector indicating if the prefetcher sent pref before a load *\/$/;"	m	struct:pref_region_line_status_s
pref_sent	pref_stride.h	/^  int64_t pref_sent; \/**< number of prefetch sent *\/$/;"	m	struct:stride_index_table_entry_struct
pref_stride_c	pref_stride.cc	/^pref_stride_c::pref_stride_c(hwp_common_c *hcc, Unit_Type type, macsim_c* simBase)$/;"	f	class:pref_stride_c
pref_stride_c	pref_stride.cc	/^pref_stride_c::pref_stride_c(macsim_c* simBase) : pref_base_c(simBase)$/;"	f	class:pref_stride_c
pref_stride_c	pref_stride.h	/^class pref_stride_c : public pref_base_c$/;"	c
pref_table	pref_common.h	/^    vector<pref_base_c *> pref_table; \/**< prefetchers table *\/$/;"	m	class:hwp_common_c
pref_update_queues	pref_common.cc	/^void hwp_common_c::pref_update_queues(void)$/;"	f	class:hwp_common_c
pref_update_regioninfo	pref_common.cc	/^void  hwp_common_c::pref_update_regioninfo(Addr line_addr, bool l2_hit, bool l2_miss, $/;"	f	class:hwp_common_c
prefetcher_id	pref.cc	/^static int prefetcher_id = 0;$/;"	v	file:
prefetcher_id	pref_common.h	/^  uns8 prefetcher_id;           \/**< prefecher id *\/$/;"	m	struct:pref_mem_req_s
prefhit_count	pref_common.h	/^  Counter prefhit_count;        \/**< prefetch hit count *\/$/;"	m	struct:pref_info_s
print	bug_detector.cc	/^void bug_detector_c::print(int core_id, int thread_id)$/;"	f	class:bug_detector_c
print	router.cc	/^void router_c::print(ofstream& out)$/;"	f	class:router_c
print	router.cc	/^void router_wrapper_c::print(void)$/;"	f	class:router_wrapper_c
print_info	cache.cc	/^void cache_c::print_info(int id)$/;"	f	class:cache_c
print_link_info	router.cc	/^void router_c::print_link_info(void)$/;"	f	class:router_c
print_mshr	memory.cc	/^void memory_c::print_mshr(void)$/;"	f	class:memory_c
print_noc	bug_detector.cc	/^void bug_detector_c::print_noc()$/;"	f	class:bug_detector_c
print_req	dram.cc	/^void dram_controller_c::print_req(void)$/;"	f	class:dram_controller_c
priority	pref_common.h	/^  int     priority;             \/**< priority this prefetcher gets in the pecking order *\/$/;"	m	struct:pref_info_s
process_fill_queue	memory.cc	/^void dcu_c::process_fill_queue()$/;"	f	class:dcu_c
process_ifetch	frontend.cc	/^FRONTEND_MODE frontend_c::process_ifetch(unsigned int tid, frontend_s* fetch_data)$/;"	f	class:frontend_c
process_in_queue	memory.cc	/^void dcu_c::process_in_queue()$/;"	f	class:dcu_c
process_manager_c	process_manager.cc	/^process_manager_c::process_manager_c(macsim_c* simBase)$/;"	f	class:process_manager_c
process_manager_c	process_manager.h	/^class process_manager_c$/;"	c
process_out_queue	memory.cc	/^void dcu_c::process_out_queue()$/;"	f	class:dcu_c
process_pending_credit	router.cc	/^void router_c::process_pending_credit(void)$/;"	f	class:router_c
process_s	global_defs.h	/^typedef struct process_s process_s;$/;"	t	typeref:struct:process_s
process_s	process_manager.cc	/^process_s::process_s()$/;"	f	class:process_s
process_s	process_manager.h	/^typedef struct process_s {$/;"	s
process_s	process_manager.h	/^} process_s;$/;"	t	typeref:struct:process_s
process_wb_queue	memory.cc	/^void dcu_c::process_wb_queue()$/;"	f	class:dcu_c
progress_check	dram.cc	/^void dram_controller_c::progress_check(void)$/;"	f	class:dram_controller_c
push	memory.cc	/^bool queue_c::push(mem_req_s* req)$/;"	f	class:queue_c
push	rob.cc	/^void rob_c::push(uop_c *uop) $/;"	f	class:rob_c
queue_c	memory.cc	/^queue_c::queue_c(macsim_c* simBase, int size)$/;"	f	class:queue_c
queue_c	memory.h	/^class queue_c$/;"	c
ratio	statistics.h	/^    float ratio; \/**< ratio *\/$/;"	m	class:PERCENT_Stat
ratio	statistics.h	/^    float ratio; \/**< ratio *\/$/;"	m	class:RATIO_Stat
rc_mesh	router.cc	/^void router_c::rc_mesh(void)$/;"	f	class:router_c
rc_ring	router.cc	/^void router_c::rc_ring(void)$/;"	f	class:router_c
read_callback	dram.cc	/^void dram_controller_c::read_callback(unsigned id, uint64_t address, uint64_t clock_cycle)$/;"	f	class:dram_controller_c
read_reg_map	map.cc	/^void map_c::read_reg_map (uop_c *uop)$/;"	f	class:map_c
read_store_map	map.cc	/^void map_c::read_store_map(uop_c *uop)$/;"	f	class:map_c
read_trace	trace_read.cc	/^bool trace_read_c::read_trace(int core_id, trace_info_s *trace_info, int sim_thread_id, $/;"	f	class:trace_read_c
readonly_cache_c	readonly_cache.cc	/^readonly_cache_c::readonly_cache_c(string name, int c_id, uns32 c_size, uns8 c_assoc, $/;"	f	class:readonly_cache_c
readonly_cache_c	readonly_cache.h	/^class readonly_cache_c$/;"	c
readonly_cache_fill_line_wrapper	readonly_cache.cc	/^bool readonly_cache_fill_line_wrapper(mem_req_s* req)$/;"	f
ready	pqueue.h	/^    bool ready()$/;"	f	class:pqueue_c
receive	memory.cc	/^bool memory_c::receive(int src, int dst, int msg, mem_req_s* req)$/;"	f	class:memory_c
receive_packet	dram.cc	/^void dram_controller_c::receive_packet(void)$/;"	f	class:dram_controller_c
receive_packet	memory.cc	/^void dcu_c::receive_packet(void)$/;"	f	class:dcu_c
receive_req	router.cc	/^mem_req_s* router_c::receive_req(int dir)$/;"	f	class:router_c
recnt	pref_stride.h	/^  int     recnt; \/**< recount *\/$/;"	m	struct:stride_index_table_entry_struct
reconv_data_s	frontend.h	/^typedef struct reconv_data_s {$/;"	s
reconv_data_s	frontend.h	/^} reconv_data_s;$/;"	t	typeref:struct:reconv_data_s
recove_data_s	global_defs.h	/^typedef struct reconv_data_s recove_data_s;$/;"	t	typeref:struct:reconv_data_s
recover	bp_gshare.cc	/^void bp_gshare_c::recover(recovery_info_c *recovery_info)$/;"	f	class:bp_gshare_c
recovery_info_c	uop.h	/^    recovery_info_c() {}$/;"	f	class:recovery_info_c
recovery_info_c	uop.h	/^class recovery_info_c$/;"	c
reg_info_s	inst_info.h	/^typedef struct reg_info_s {$/;"	s
reg_info_s	inst_info.h	/^} reg_info_s;$/;"	t	typeref:struct:reg_info_s
reg_info_s	trace_read.cc	/^reg_info_s::reg_info_s()$/;"	f	class:reg_info_s
region_id	pref_common.h	/^  Addr    region_id; \/**< id *\/$/;"	m	struct:pref_region_info_s
region_info	pref_common.h	/^    pref_region_info_s *region_info; \/**< prefetch region information *\/$/;"	m	class:hwp_common_c
region_table	pref_stride.h	/^    stride_region_table_entry_s *region_table; \/**< address region info *\/$/;"	m	class:pref_stride_c
registerKnobs	all_knobs.cc	/^void all_knobs_c::registerKnobs(KnobsContainer *container) {$/;"	f	class:all_knobs_c
register_class	fetch_factory.cc	/^void fetch_factory_c::register_class(string policy, \\$/;"	f	class:fetch_factory_c
register_class	pref_factory.cc	/^void pref_factory_c::register_class($/;"	f	class:pref_factory_c
register_functions	macsim.cc	/^void macsim_c::register_functions(void)$/;"	f	class:macsim_c
reinit	rob.cc	/^void rob_c::reinit() $/;"	f	class:rob_c
release_entry	utils.h	/^    void release_entry(T* entry)$/;"	f	class:pool_c
repeat_traces	retire.cc	/^void retire_c::repeat_traces(process_s* process)$/;"	f	class:retire_c
report	debug_macros.h	53;"	d
report	debug_macros.h	57;"	d
reserve_rob	rob_smc.cc	/^int smc_rob_c::reserve_rob(int thread_id) $/;"	f	class:smc_rob_c
reset	dram.cc	/^void drb_entry_s::reset()$/;"	f	class:drb_entry_s
retire_c	retire.h	/^class retire_c$/;"	c
rob_c	rob.cc	/^rob_c::rob_c(Unit_Type type, macsim_c* simBase) $/;"	f	class:rob_c
rob_c	rob.h	/^class rob_c$/;"	c
router_c	router.cc	/^router_c::router_c(macsim_c* simBase, int type, int id)$/;"	f	class:router_c
router_c	router.h	/^class router_c$/;"	c
router_sort_fn	router.cc	/^bool router_sort_fn(router_c *a, router_c *b)$/;"	f
router_wrapper_c	router.cc	/^router_wrapper_c::router_wrapper_c(macsim_c* simBase)$/;"	f	class:router_wrapper_c
router_wrapper_c	router.h	/^class router_wrapper_c$/;"	c
run_a_cycle	allocate.cc	/^void allocate_c::run_a_cycle(void)$/;"	f	class:allocate_c
run_a_cycle	allocate_smc.cc	/^void smc_allocate_c::run_a_cycle(void)$/;"	f	class:smc_allocate_c
run_a_cycle	core.cc	/^void core_c::run_a_cycle(void)$/;"	f	class:core_c
run_a_cycle	dram.cc	/^void dram_controller_c::run_a_cycle()$/;"	f	class:dram_controller_c
run_a_cycle	exec.cc	/^void exec_c::run_a_cycle(void)$/;"	f	class:exec_c
run_a_cycle	frontend.cc	/^void frontend_c::run_a_cycle(void)$/;"	f	class:frontend_c
run_a_cycle	macsim.cc	/^int macsim_c::run_a_cycle() $/;"	f	class:macsim_c
run_a_cycle	memory.cc	/^void dcu_c::run_a_cycle()$/;"	f	class:dcu_c
run_a_cycle	memory.cc	/^void memory_c::run_a_cycle(void)$/;"	f	class:memory_c
run_a_cycle	noc.cc	/^void noc_c::run_a_cycle()$/;"	f	class:noc_c
run_a_cycle	retire.cc	/^void retire_c::run_a_cycle()$/;"	f	class:retire_c
run_a_cycle	router.cc	/^void router_c::run_a_cycle(void)$/;"	f	class:router_c
run_a_cycle	router.cc	/^void router_wrapper_c::run_a_cycle(void)$/;"	f	class:router_wrapper_c
run_a_cycle	schedule_io.cc	/^void schedule_io_c::run_a_cycle(void)$/;"	f	class:schedule_io_c
run_a_cycle	schedule_ooo.cc	/^void schedule_ooo_c::run_a_cycle(void)$/;"	f	class:schedule_ooo_c
run_a_cycle	schedule_smc.cc	/^void schedule_smc_c::run_a_cycle(void) $/;"	f	class:schedule_smc_c
run_a_cycle	utils.cc	/^void cache_partition_framework_c::run_a_cycle()$/;"	f	class:cache_partition_framework_c
run_a_cycle_core	memory.cc	/^void memory_c::run_a_cycle_core(int core_id)$/;"	f	class:memory_c
run_a_cycle_uncore	memory.cc	/^void memory_c::run_a_cycle_uncore(void)$/;"	f	class:memory_c
s_cnt	pref_stride.h	/^  int     s_cnt[2]; \/**< stride count information *\/$/;"	m	struct:stride_index_table_entry_struct
saveStats	statistics.cc	/^void CoreStatistics::saveStats()$/;"	f	class:CoreStatistics
saveStats	statistics.cc	/^void CoreStatistics::saveStats(string ext)$/;"	f	class:CoreStatistics
saveStats	statistics.cc	/^void GlobalStatistics::saveStats()$/;"	f	class:GlobalStatistics
saveStats	statistics.cc	/^void GlobalStatistics::saveStats(string ext)$/;"	f	class:GlobalStatistics
saveStats	statistics.cc	/^void ProcessorStatistics::saveStats()$/;"	f	class:ProcessorStatistics
saveStats	statistics.cc	/^void ProcessorStatistics::saveStats(string ext)$/;"	f	class:ProcessorStatistics
saveToFile	knob.cc	/^void KnobsContainer::saveToFile(const string& filename)$/;"	f	class:KnobsContainer
schedule	dram.cc	/^drb_entry_s* dc_frfcfs_c::schedule(list<drb_entry_s*>* buffer)$/;"	f	class:dc_frfcfs_c
schedule	dram.cc	/^drb_entry_s* dram_controller_c::schedule(list<drb_entry_s*> *buffer)$/;"	f	class:dram_controller_c
schedule_c	schedule.cc	/^schedule_c::schedule_c()$/;"	f	class:schedule_c
schedule_c	schedule.cc	/^schedule_c::schedule_c(exec_c* exec, int core_id, Unit_Type unit_type, frontend_c* frontend, $/;"	f	class:schedule_c
schedule_c	schedule.h	/^class schedule_c$/;"	c
schedule_io_c	schedule_io.cc	/^schedule_io_c::schedule_io_c(int core_id, pqueue_c<int>** alloc_q, rob_c* rob, $/;"	f	class:schedule_io_c
schedule_io_c	schedule_io.h	/^class schedule_io_c : public schedule_c $/;"	c
schedule_ooo_c	schedule_ooo.cc	/^schedule_ooo_c::schedule_ooo_c(int core_id, pqueue_c<int>** alloc_q, rob_c* rob, $/;"	f	class:schedule_ooo_c
schedule_ooo_c	schedule_ooo.h	/^class schedule_ooo_c : public schedule_c $/;"	c
schedule_smc_c	schedule_smc.cc	/^schedule_smc_c::schedule_smc_c(int core_id, pqueue_c<gpu_allocq_entry_s>** gpu_allocq,$/;"	f	class:schedule_smc_c
schedule_smc_c	schedule_smc.h	/^class schedule_smc_c : public schedule_c $/;"	c
search	memory.cc	/^bool queue_c::search(mem_req_s* req)$/;"	f	class:queue_c
search	memory.cc	/^mem_req_s* queue_c::search(Addr addr, int size)$/;"	f	class:queue_c
search_pref_in_queue	memory.cc	/^mem_req_s* dcu_c::search_pref_in_queue()$/;"	f	class:dcu_c
search_req	memory.cc	/^mem_req_s* memory_c::search_req(int core_id, Addr addr, int size)$/;"	f	class:memory_c
section_info_s	process_manager.h	/^typedef struct section_info_s {$/;"	s
section_info_s	process_manager.h	/^} section_info_s;$/;"	t	typeref:struct:section_info_s
send_packet	dram.cc	/^void dram_controller_c::send_packet(void)$/;"	f	class:dram_controller_c
send_packet	memory.cc	/^bool dcu_c::send_packet(mem_req_s* req, int msg_type, int dir)$/;"	f	class:dcu_c
send_uop_to_qfe	frontend.cc	/^inline void frontend_c::send_uop_to_qfe(uop_c *uop)$/;"	f	class:frontend_c
sent	pref_common.h	/^  Counter sent;                 \/**< num of sent prefetches *\/$/;"	m	struct:pref_info_s
set	dram.cc	/^void drb_entry_s::set(mem_req_s *mem_req, int bid, int rid, int cid)$/;"	f	class:drb_entry_s
setCoreID	statistics.h	/^    inline void setCoreID(unsigned int coreID)$/;"	f	class:AbstractStat
setID	statistics.h	/^    inline void setID(unsigned int coreID)$/;"	f	class:CoreStatistics
setName	knob.h	/^    inline void setName(const string& name) { m_name = name; m_valueProvided = true; }$/;"	f	class:abstract_knob_c
setNumCores	statistics.cc	/^void ProcessorStatistics::setNumCores(unsigned int numCores)$/;"	f	class:ProcessorStatistics
setParentDistroID	statistics.h	/^    inline void setParentDistroID(long ID)$/;"	f	class:DISTMember_Stat
setRatioReference	statistics.h	/^    void setRatioReference(long ID)$/;"	f	class:RATIO_Stat
setValue	knob.h	/^    inline KnobTemplate<T>& setValue(const T& val)$/;"	f	class:KnobTemplate
setValue	knob.h	/^    inline KnobTemplate<string>& setValue(const string& val)$/;"	f	class:KnobTemplate
setValueString	knob.h	/^    inline void setValueString(const string& value)$/;"	f	class:abstract_knob_c
set_appl_type	utils.h	/^    inline void set_appl_type(int appl_id, bool ptx)$/;"	f	class:cache_partition_framework_c
set_br_ready	frontend.cc	/^void frontend_c::set_br_ready(int fetch_id) $/;"	f	class:frontend_c
set_br_wait	frontend.cc	/^void frontend_c::set_br_wait(int fetch_id) $/;"	f	class:frontend_c
set_cache_id	memory.cc	/^void l2_coupled_local_c::set_cache_id(mem_req_s* req)$/;"	f	class:l2_coupled_local_c
set_cache_id	memory.cc	/^void l2_decoupled_local_c::set_cache_id(mem_req_s* req)$/;"	f	class:l2_decoupled_local_c
set_cache_id	memory.cc	/^void l2_decoupled_network_c::set_cache_id(mem_req_s* req)$/;"	f	class:l2_decoupled_network_c
set_cache_id	memory.cc	/^void memory_c::set_cache_id(mem_req_s* req)$/;"	f	class:memory_c
set_cache_id	memory.cc	/^void no_cache_c::set_cache_id(mem_req_s* req)$/;"	f	class:no_cache_c
set_core_id	cache.h	/^    void set_core_id(int c_id) $/;"	f	class:cache_c
set_core_id	frontend.h	/^    void set_core_id(int c_id) { m_core_id = c_id; }$/;"	f	class:frontend_c
set_dstream_routers	router.cc	/^void router_c::set_dstream_routers(vector<router_c *>& routers, int ds_start)$/;"	f	class:router_c
set_id	router.cc	/^void router_c::set_id(int id)$/;"	f	class:router_c
set_link	router.cc	/^void router_c::set_link(int dir, router_c* link)$/;"	f	class:router_c
set_load_ready	frontend.cc	/^void frontend_c::set_load_ready(int fetch_id, Counter uop_num) $/;"	f	class:frontend_c
set_load_wait	frontend.cc	/^void frontend_c::set_load_wait(int fetch_id, Counter uop_num) $/;"	f	class:frontend_c
set_max_threads_per_core	core.h	/^    void set_max_threads_per_core(int thread_num) { m_max_threads_per_core = thread_num; }$/;"	f	class:core_c
set_not_rdy_bit	map.cc	/^void map_c::set_not_rdy_bit (uop_c *uop, int bit)$/;"	f	class:map_c
set_ustream_routers	router.cc	/^void router_c::set_ustream_routers(vector<router_c *>& routers, int us_start)$/;"	f	class:router_c
setup_process	process_manager.cc	/^void process_manager_c::setup_process(process_s* process)$/;"	f	class:process_manager_c
setup_trace	trace_read.cc	/^void trace_read_c::setup_trace(int core_id, int sim_thread_id)$/;"	f	class:trace_read_c
shift_bit	pref.h	/^    int           shift_bit;    \/**< cache line address shift bits *\/$/;"	m	class:pref_base_c
simBase	exec.h	/^    exec_c(EXEC_INTERFACE_PARAMS(), macsim_c* simBase);$/;"	m	class:exec_c
simBase	fetch_factory.h	/^    frontend_c *allocate_frontend(FRONTEND_INTERFACE_PARAMS(), macsim_c* simBase);$/;"	m	class:fetch_factory_c
simBase	frontend.h	/^    frontend_c(FRONTEND_INTERFACE_PARAMS(), macsim_c* simBase);$/;"	m	class:frontend_c
simBase	frontend.h	/^frontend_c *fetch_factory(FRONTEND_INTERFACE_PARAMS(), macsim_c* simBase);$/;"	v
simBase	retire.h	/^    retire_c(RETIRE_INTERFACE_PARAMS(), macsim_c* simBase);$/;"	m	class:retire_c
sim_schedule_thread_block	process_manager.cc	/^int process_manager_c::sim_schedule_thread_block(int core_id, bool initial) $/;"	f	class:process_manager_c
sim_thread_schedule	process_manager.cc	/^void process_manager_c::sim_thread_schedule(bool initial)$/;"	f	class:process_manager_c
size	statistics.h	/^    int size()const$/;"	f	class:GlobalStatistics
size	utils.h	/^    int size(void)$/;"	f	class:hash_c
size	utils.h	/^    int size(void)$/;"	f	class:pool_c
smc_allocate_c	allocate_smc.cc	/^smc_allocate_c::smc_allocate_c(int core_id, pqueue_c<int*> *q_frontend, $/;"	f	class:smc_allocate_c
smc_allocate_c	allocate_smc.h	/^class smc_allocate_c $/;"	c
smc_rob_c	rob_smc.cc	/^smc_rob_c::smc_rob_c(Unit_Type type, int core_id, macsim_c* simBase)$/;"	f	class:smc_rob_c
smc_rob_c	rob_smc.h	/^class smc_rob_c $/;"	c
sort_func	dram.cc	/^dc_frfcfs_c::sort_func::sort_func(dc_frfcfs_c *parent)$/;"	f	class:dc_frfcfs_c::sort_func
sort_func	dram.h	/^  class sort_func {$/;"	c	class:dc_frfcfs_c
sort_func	memory.h	/^    sort_func(macsim_c* simBase) {m_simBase = simBase;}; $/;"	f	struct:queue_c::sort_func
sort_func	memory.h	/^  struct sort_func {$/;"	s	class:queue_c
sort_noc	bug_detector.cc	/^bool sort_noc(pair<mem_req_s*, uint64_t>& a, pair<mem_req_s*, uint64_t>& b)$/;"	f
sort_uop	bug_detector.cc	/^bool sort_uop(uop_c* a, uop_c* b)$/;"	f
sort_uops	rob_smc.cc	/^bool sort_uops(uop_c *a, uop_c *b) $/;"	f
space	pqueue.h	/^    int space()$/;"	f	class:pqueue_c
space	rob.h	/^    int space() $/;"	f	class:rob_c
src_info_c	uop.h	/^class src_info_c {$/;"	c
stage_lt	router.cc	/^void router_c::stage_lt(void)$/;"	f	class:router_c
stage_rc	router.cc	/^void router_c::stage_rc(void)$/;"	f	class:router_c
stage_sa	router.cc	/^void router_c::stage_sa(void)$/;"	f	class:router_c
stage_sa_pick_winner	router.cc	/^void router_c::stage_sa_pick_winner(int op, int& ip, int& ivc, int sw_id)$/;"	f	class:router_c
stage_st	router.cc	/^void router_c::stage_st(void)$/;"	f	class:router_c
stage_vca	router.cc	/^void router_c::stage_vca(void)$/;"	f	class:router_c
stage_vca_pick_winner	router.cc	/^void router_c::stage_vca_pick_winner(int oport, int ovc, int& iport, int& ivc)$/;"	f	class:router_c
start	allocate.h	/^    void start() $/;"	f	class:allocate_c
start	allocate_smc.h	/^    void start() $/;"	f	class:smc_allocate_c
start	core.cc	/^void core_c::start(void)$/;"	f	class:core_c
start	frontend.h	/^    void start() { m_fe_running = true; }$/;"	f	class:frontend_c
start	retire.cc	/^void retire_c::start()$/;"	f	class:retire_c
start	schedule.cc	/^void schedule_c::start()$/;"	f	class:schedule_c
status	pref_common.h	/^  pref_region_line_status_s* status; \/**< line status *\/$/;"	m	struct:pref_region_info_s
stop	allocate.h	/^    void stop()  $/;"	f	class:allocate_c
stop	allocate_smc.h	/^    void stop()  $/;"	f	class:smc_allocate_c
stop	core.cc	/^void core_c::stop(void)$/;"	f	class:core_c
stop	frontend.h	/^    void stop() { m_fe_running = false; }$/;"	f	class:frontend_c
stop	retire.cc	/^void retire_c::stop()$/;"	f	class:retire_c
stop	schedule.cc	/^void schedule_c::stop()$/;"	f	class:schedule_c
str_buffer	utils.cc	/^char str_buffer[1000][100];$/;"	v
str_buffer_index	utils.cc	/^int str_buffer_index = 0;$/;"	v
strans	pref_stride.h	/^  int     strans[2]; \/**< stride12, stride21 *\/$/;"	m	struct:stride_index_table_entry_struct
stride	pref_stride.h	/^  int     stride[2]; \/**< stride information *\/$/;"	m	struct:stride_index_table_entry_struct
stride_index_table_entry_s	pref_stride.h	/^} stride_index_table_entry_s;$/;"	t	typeref:struct:stride_index_table_entry_struct
stride_index_table_entry_struct	pref_stride.h	/^  stride_index_table_entry_struct() {$/;"	f	struct:stride_index_table_entry_struct
stride_index_table_entry_struct	pref_stride.h	/^typedef struct stride_index_table_entry_struct { $/;"	s
stride_region_table_entry_s	pref_stride.h	/^} stride_region_table_entry_s;$/;"	t	typeref:struct:stride_region_table_entry_struct
stride_region_table_entry_struct	pref_stride.h	/^  stride_region_table_entry_struct() {$/;"	f	struct:stride_region_table_entry_struct
stride_region_table_entry_struct	pref_stride.h	/^typedef struct stride_region_table_entry_struct {$/;"	s
sw_managed_cache_c	sw_managed_cache.cc	/^sw_managed_cache_c::sw_managed_cache_c(string name, int c_id, uns32 c_size, uns8 c_assoc, $/;"	f	class:sw_managed_cache_c
sw_managed_cache_c	sw_managed_cache.h	/^class sw_managed_cache_c$/;"	c
sync_thread_s	frontend.cc	/^sync_thread_s::sync_thread_s() : m_block_id(-1), m_sync_count(-1), m_num_threads_in_block(-1)$/;"	f	class:sync_thread_s
sync_thread_s	frontend.h	/^struct sync_thread_s {$/;"	s
synch_thread	frontend.cc	/^void frontend_c::synch_thread(int block_id, int tid)$/;"	f	class:frontend_c
table_info_s	inst_info.h	/^typedef struct table_info_s {$/;"	s
table_info_s	inst_info.h	/^} table_info_s;$/;"	t	typeref:struct:table_info_s
tag	pref_stride.h	/^  Addr tag; \/**< address tag *\/$/;"	m	struct:stride_region_table_entry_struct
terminate_process	process_manager.cc	/^bool process_manager_c::terminate_process(process_s* process)$/;"	f	class:process_manager_c
terminate_thread	process_manager.cc	/^int process_manager_c::terminate_thread(int core_id, thread_s* trace_info, int thread_id, $/;"	f	class:process_manager_c
thread_heartbeat	core.cc	/^void core_c::thread_heartbeat(int tid, bool final) $/;"	f	class:core_c
thread_id	pref_common.h	/^  int  thread_id;               \/**< thread id *\/$/;"	m	struct:pref_mem_req_s
thread_s	global_defs.h	/^typedef struct thread_s thread_s;$/;"	t	typeref:struct:thread_s
thread_s	process_manager.cc	/^thread_s::thread_s(macsim_c* simBase)$/;"	f	class:thread_s
thread_s	process_manager.h	/^typedef struct thread_s {$/;"	s
thread_s	process_manager.h	/^} thread_s;$/;"	t	typeref:struct:thread_s
thread_start_info_s	process_manager.h	/^typedef struct thread_start_info_s {   $/;"	s
thread_start_info_s	process_manager.h	/^} thread_start_info_s;$/;"	t	typeref:struct:thread_start_info_s
thread_stat_s	global_defs.h	/^typedef struct thread_stat_s thread_stat_s;$/;"	t	typeref:struct:thread_stat_s
thread_stat_s	process_manager.cc	/^thread_stat_s::thread_stat_s()$/;"	f	class:thread_stat_s
thread_stat_s	process_manager.h	/^typedef struct thread_stat_s$/;"	s
thread_stat_s	process_manager.h	/^} thread_stat_s;$/;"	t	typeref:struct:thread_stat_s
thread_trace_info_node_s	process_manager.h	/^typedef struct thread_trace_info_node_s {$/;"	s
thread_trace_info_node_s	process_manager.h	/^} thread_trace_info_node_s;$/;"	t	typeref:struct:thread_trace_info_node_s
tick_t	global_types.h	/^typedef uns64 tick_t; $/;"	t
tid	pref_stride.h	/^  int  tid; \/**< thread id *\/$/;"	m	struct:stride_region_table_entry_struct
tokenizeString	knob.cc	/^void KnobEntryTokenizer::tokenizeString(string str, char delim)$/;"	f	class:KnobEntryTokenizer
total_dram_bandwidth	dram.cc	/^static int total_dram_bandwidth = 0;$/;"	v	file:
total_energy	macsim.h	/^		double total_energy; \/**< total energy consumption *\/$/;"	m	class:macsim_c
total_packets	macsim.h	/^		int total_packets; \/**< number of packets *\/$/;"	m	class:macsim_c
tp	macsim.h	/^		Topology* tp; \/**< topology *\/$/;"	m	class:macsim_c
trace_info_s	global_defs.h	/^typedef struct trace_info_s trace_info_s;$/;"	t	typeref:struct:trace_info_s
trace_info_s	trace_read.h	/^typedef struct trace_info_s {$/;"	s
trace_info_s	trace_read.h	/^} trace_info_s;$/;"	t	typeref:struct:trace_info_s
trace_info_sc_s	inst_info.h	/^typedef struct trace_info_sc_s {$/;"	s
trace_info_sc_s	inst_info.h	/^} trace_info_sc_s;$/;"	t	typeref:struct:trace_info_sc_s
trace_info_small_s	global_defs.h	/^typedef struct trace_info_small_s trace_info_small_s;$/;"	t	typeref:struct:trace_info_small_s
trace_read_c	trace_read.cc	/^trace_read_c::trace_read_c(macsim_c* simBase)$/;"	f	class:trace_read_c
trace_read_c	trace_read.h	/^class trace_read_c$/;"	c
trace_uop_s	global_defs.h	/^typedef struct trace_uop_s trace_uop_s;$/;"	t	typeref:struct:trace_uop_s
trace_uop_s	trace_read.cc	/^trace_uop_s::trace_uop_s()$/;"	f	class:trace_uop_s
trace_uop_s	trace_read.h	/^typedef struct trace_uop_s {$/;"	s
trace_uop_s	trace_read.h	/^} trace_uop_s; $/;"	t	typeref:struct:trace_uop_s
track_lastsample_cycle	pref_common.h	/^  Counter track_lastsample_cycle; \/**< track last sample cycle *\/$/;"	m	struct:pref_info_s
track_num	pref_common.h	/^  int     track_num; \/**< number of tracks *\/$/;"	m	struct:pref_info_s
trackers	pref_common.h	/^  Addr    trackers[PREF_TRACKERS_NUM]; \/**< tracking information *\/$/;"	m	struct:pref_info_s
trackers_used	pref_common.h	/^  bool    trackers_used[PREF_TRACKERS_NUM]; \/**< tracker used *\/$/;"	m	struct:pref_info_s
trackhist	pref_common.h	/^  Counter trackhist[10][PREF_TRACKERS_NUM]; \/**< tracking history *\/$/;"	m	struct:pref_info_s
train	pref_common.cc	/^void hwp_common_c::train(int level, int tid, Addr line_addr, Addr load_PC, uop_c* uop, \\$/;"	f	class:hwp_common_c
train	pref_stride.cc	/^void pref_stride_c::train(int tid, Addr lineAddr, Addr loadPC, bool l2_hit)$/;"	f	class:pref_stride_c
train_count_mode	pref_stride.h	/^  bool    train_count_mode; \/**< train count mode *\/ $/;"	m	struct:stride_index_table_entry_struct
train_hw_pref	core.cc	/^void core_c::train_hw_pref(int level, int tid, Addr addr, Addr pc, uop_c* uop, bool hit)$/;"	f	class:core_c
trained	pref_common.h	/^  bool    trained; \/**< trained \/ for hybrid prefetching *\/$/;"	m	struct:pref_region_info_s
trained	pref_stride.h	/^  bool    trained; \/**< trained *\/$/;"	m	struct:stride_index_table_entry_struct
try_packet_insert	router.cc	/^bool router_c::try_packet_insert(int src, mem_req_s *req)$/;"	f	class:router_c
ungetch_trace	trace_read.cc	/^bool trace_read_c::ungetch_trace(int core_id, int sim_thread_id, int num_inst)$/;"	f	class:trace_read_c
uns	global_types.h	/^typedef unsigned           uns;$/;"	t
uns16	global_types.h	/^typedef unsigned short     uns16;$/;"	t
uns32	global_types.h	/^typedef unsigned           uns32;$/;"	t
uns64	global_types.h	/^typedef unsigned long long uns64;$/;"	t
uns8	global_types.h	/^typedef unsigned char      uns8;$/;"	t
unsstr64	utils.cc	/^const char *unsstr64 (uns64 value)$/;"	f
uop_c	uop.cc	/^uop_c::uop_c()$/;"	f	class:uop_c
uop_c	uop.cc	/^uop_c::uop_c(macsim_c* simBase)$/;"	f	class:uop_c
uop_c	uop.h	/^class uop_c$/;"	c
uop_dispatch_latency_ptx	schedule_smc.cc	/^static Uop_Dispatch_Latency uop_dispatch_latency_ptx [] = {$/;"	v	file:
uop_info_c	uop.h	/^class  uop_info_c$/;"	c
uop_latencybinding_init_ptx	exec.cc	/^static Uop_LatencyBinding_Init uop_latencybinding_init_ptx[] = {$/;"	v	file:
uop_latencybinding_init_x86	exec.cc	/^static Uop_LatencyBinding_Init uop_latencybinding_init_x86[] = {$/;"	v	file:
uop_schedule	schedule.cc	/^bool schedule_c::uop_schedule(int entry, SCHED_FAIL_TYPE* sched_fail_reason)$/;"	f	class:schedule_c
uop_schedule_smc	schedule_smc.cc	/^bool schedule_smc_c::uop_schedule_smc(int thread_id, int entry, SCHED_FAIL_TYPE* sched_fail_reason)$/;"	f	class:schedule_smc_c
uop_type_s	exec.cc	/^  Uop_Type uop_type_s; \/**< uop type *\/$/;"	m	struct:Uop_LatencyBinding_Init	file:
uop_type_s	schedule_smc.cc	/^  Uop_Type uop_type_s;$/;"	m	struct:Uop_Dispatch_Latency	file:
update	bp_gshare.cc	/^void bp_gshare_c::update (uop_c *uop)$/;"	f	class:bp_gshare_c
update	bp_targ.cc	/^void bp_targ_c::update (uop_c *uop)$/;"	f	class:bp_targ_c
updateKnob	knob.cc	/^void KnobsContainer::updateKnob(string key, string value) {$/;"	f	class:KnobsContainer
update_cache_on_access	cache.cc	/^void cache_c::update_cache_on_access(Addr line_addr, int set, int appl_id)$/;"	f	class:cache_c
update_cache_on_miss	cache.cc	/^void cache_c::update_cache_on_miss(int set_id, int appl_id)$/;"	f	class:cache_c
update_line_on_hit	cache.cc	/^void cache_c::update_line_on_hit(cache_entry_c* line, int set, int appl_id)$/;"	f	class:cache_c
update_map	map.cc	/^void map_c::update_map(uop_c *uop)$/;"	f	class:map_c
update_memory_stats	exec.cc	/^void exec_c::update_memory_stats(uop_c* uop)$/;"	f	class:exec_c
update_set_on_replacement	cache.cc	/^void cache_c::update_set_on_replacement(Addr tag, int appl_id, int set, bool gpuline)$/;"	f	class:cache_c
update_stats	retire.cc	/^void retire_c::update_stats(process_s* process)$/;"	f	class:retire_c
update_store_hash	map.cc	/^void map_c::update_store_hash (uop_c *uop) $/;"	f	class:map_c
use_port	exec.cc	/^void exec_c::use_port(int thread_id, int entry)$/;"	f	class:exec_c
useful	pref_common.h	/^  Counter useful;               \/**< num of useful prefetches *\/$/;"	m	struct:pref_info_s
util_sstr	utils.cc	/^stringstream util_sstr;$/;"	v
valid	pref_common.h	/^  bool    valid; \/**< valid *\/$/;"	m	struct:pref_region_info_s
valid	pref_common.h	/^  bool valid;                   \/**< valid *\/$/;"	m	struct:pref_mem_req_s
valid	pref_stride.h	/^  bool valid; \/**< valid *\/$/;"	m	struct:stride_region_table_entry_struct
wasValueProvided	knob.h	/^    bool wasValueProvided() { return m_valueProvided;}$/;"	f	class:abstract_knob_c
writeTo	statistics.cc	/^void DIST_Stat::writeTo(ofstream& stream)$/;"	f	class:DIST_Stat
writeTo	statistics.cc	/^void GlobalStatistics::writeTo(ofstream& stream)$/;"	f	class:GlobalStatistics
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:AbstractStat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:PERCENT_Stat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:PER_1000_INST_Stat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:PER_1000_PRET_INST_Stat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:PER_CYCLE_Stat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:PER_INST_Stat
writeTo	statistics.h	/^    virtual void writeTo(ofstream& stream)$/;"	f	class:RATIO_Stat
write_callback	dram.cc	/^void dram_controller_c::write_callback(unsigned id, uint64_t address, uint64_t clock_cycle)$/;"	f	class:dram_controller_c
write_done	memory.cc	/^bool dcu_c::write_done(mem_req_s* req)$/;"	f	class:dcu_c
write_done	memory.cc	/^bool memory_c::write_done(mem_req_s* req)$/;"	f	class:memory_c
xclearbit	map.cc	64;"	d	file:
xsetbit	map.cc	63;"	d	file:
xtestbit	map.cc	66;"	d	file:
~AbstractStat	statistics.h	/^    virtual ~AbstractStat() {}$/;"	f	class:AbstractStat
~COUNT_Stat	statistics.h	/^    virtual ~COUNT_Stat() {}$/;"	f	class:COUNT_Stat
~CoreStatistics	statistics.cc	/^CoreStatistics::~CoreStatistics()$/;"	f	class:CoreStatistics
~DISTMember_Stat	statistics.h	/^    virtual ~DISTMember_Stat()$/;"	f	class:DISTMember_Stat
~DIST_Stat	statistics.h	/^    virtual ~DIST_Stat()$/;"	f	class:DIST_Stat
~GlobalStatistics	statistics.h	/^    ~GlobalStatistics()$/;"	f	class:GlobalStatistics
~KnobEntryTokenizer	knob.h	/^    ~KnobEntryTokenizer() { }$/;"	f	class:KnobEntryTokenizer
~KnobsContainer	knob.cc	/^KnobsContainer::~KnobsContainer()$/;"	f	class:KnobsContainer
~LINE_Stat	statistics.h	/^    virtual ~LINE_Stat() {}$/;"	f	class:LINE_Stat
~PERCENT_Stat	statistics.h	/^    virtual ~PERCENT_Stat() {}$/;"	f	class:PERCENT_Stat
~PER_1000_INST_Stat	statistics.h	/^    virtual ~PER_1000_INST_Stat()$/;"	f	class:PER_1000_INST_Stat
~PER_1000_PRET_INST_Stat	statistics.h	/^    virtual ~PER_1000_PRET_INST_Stat() {}$/;"	f	class:PER_1000_PRET_INST_Stat
~PER_CYCLE_Stat	statistics.h	/^    virtual ~PER_CYCLE_Stat()$/;"	f	class:PER_CYCLE_Stat
~PER_INST_Stat	statistics.h	/^    virtual ~PER_INST_Stat() {}$/;"	f	class:PER_INST_Stat
~ProcessorStatistics	statistics.cc	/^ProcessorStatistics::~ProcessorStatistics()$/;"	f	class:ProcessorStatistics
~RATIO_Stat	statistics.h	/^    virtual ~RATIO_Stat()$/;"	f	class:RATIO_Stat
~all_knobs_c	all_knobs.cc	/^all_knobs_c::~all_knobs_c() {$/;"	f	class:all_knobs_c
~all_stats_c	all_stats.cc	/^all_stats_c::~all_stats_c() {$/;"	f	class:all_stats_c
~allocate_c	allocate.h	/^    ~allocate_c()  {}$/;"	f	class:allocate_c
~block_schedule_info_s	process_manager.cc	/^block_schedule_info_s::~block_schedule_info_s()$/;"	f	class:block_schedule_info_s
~bp_data_c	bp.cc	/^bp_data_c::~bp_data_c()$/;"	f	class:bp_data_c
~bp_dir_base_c	bp.cc	/^bp_dir_base_c::~bp_dir_base_c()$/;"	f	class:bp_dir_base_c
~bp_gshare_c	bp_gshare.h	/^    ~bp_gshare_c(void) {} $/;"	f	class:bp_gshare_c
~bp_recovery_info_c	bp.cc	/^bp_recovery_info_c::~bp_recovery_info_c()$/;"	f	class:bp_recovery_info_c
~bug_detector_c	bug_detector.cc	/^bug_detector_c::~bug_detector_c()$/;"	f	class:bug_detector_c
~cache_c	cache.cc	/^cache_c::~cache_c()$/;"	f	class:cache_c
~cache_partition_framework_c	utils.cc	/^cache_partition_framework_c::~cache_partition_framework_c()$/;"	f	class:cache_partition_framework_c
~cache_set_c	cache.cc	/^cache_set_c::~cache_set_c()$/;"	f	class:cache_set_c
~core_c	core.cc	/^core_c::~core_c()$/;"	f	class:core_c
~credit_c	router.cc	/^credit_c::~credit_c()$/;"	f	class:credit_c
~dc_frfcfs_c	dram.cc	/^dc_frfcfs_c::~dc_frfcfs_c()$/;"	f	class:dc_frfcfs_c
~dcu_c	memory.cc	/^dcu_c::~dcu_c()$/;"	f	class:dcu_c
~dram_controller_c	dram.cc	/^dram_controller_c::~dram_controller_c()$/;"	f	class:dram_controller_c
~exec_c	exec.cc	/^exec_c::~exec_c()$/;"	f	class:exec_c
~fetch_factory_c	fetch_factory.cc	/^fetch_factory_c::~fetch_factory_c()$/;"	f	class:fetch_factory_c
~flit_c	router.cc	/^flit_c::~flit_c()$/;"	f	class:flit_c
~frontend_c	frontend.cc	/^frontend_c::~frontend_c()$/;"	f	class:frontend_c
~hash_c	utils.h	/^    ~hash_c()$/;"	f	class:hash_c
~hwp_common_c	pref_common.cc	/^hwp_common_c::~hwp_common_c()$/;"	f	class:hwp_common_c
~inst_info_s	inst_info.h	/^    ~inst_info_s() {}$/;"	f	class:inst_info_s
~l2_coupled_local_c	memory.cc	/^l2_coupled_local_c::~l2_coupled_local_c()$/;"	f	class:l2_coupled_local_c
~l2_decoupled_local_c	memory.cc	/^l2_decoupled_local_c::~l2_decoupled_local_c()$/;"	f	class:l2_decoupled_local_c
~l2_decoupled_network_c	memory.cc	/^l2_decoupled_network_c::~l2_decoupled_network_c()$/;"	f	class:l2_decoupled_network_c
~l3_coupled_network_c	memory.cc	/^l3_coupled_network_c::~l3_coupled_network_c()$/;"	f	class:l3_coupled_network_c
~l3_decoupled_network_c	memory.cc	/^l3_decoupled_network_c::~l3_decoupled_network_c()$/;"	f	class:l3_decoupled_network_c
~macsim_c	macsim.cc	/^macsim_c::~macsim_c()$/;"	f	class:macsim_c
~map_c	map.cc	/^map_c::~map_c()$/;"	f	class:map_c
~memory_c	memory.cc	/^memory_c::~memory_c()$/;"	f	class:memory_c
~multi_key_map_c	utils.cc	/^multi_key_map_c::~multi_key_map_c()$/;"	f	class:multi_key_map_c
~no_cache_c	memory.cc	/^no_cache_c::~no_cache_c()$/;"	f	class:no_cache_c
~noc_c	noc.cc	/^noc_c::~noc_c()$/;"	f	class:noc_c
~pool_c	utils.h	/^    ~pool_c()$/;"	f	class:pool_c
~pqueue_c	pqueue.h	/^    ~pqueue_c()$/;"	f	class:pqueue_c
~pref_base_c	pref.h	/^    virtual ~pref_base_c() {}$/;"	f	class:pref_base_c
~pref_dummy_c	pref.h	/^    ~pref_dummy_c() {}$/;"	f	class:pref_dummy_c
~pref_factory_c	pref_factory.cc	/^pref_factory_c::~pref_factory_c()$/;"	f	class:pref_factory_c
~pref_stride_c	pref_stride.cc	/^pref_stride_c::~pref_stride_c()$/;"	f	class:pref_stride_c
~process_manager_c	process_manager.cc	/^process_manager_c::~process_manager_c()$/;"	f	class:process_manager_c
~process_s	process_manager.cc	/^process_s::~process_s()$/;"	f	class:process_s
~queue_c	memory.cc	/^queue_c::~queue_c()$/;"	f	class:queue_c
~readonly_cache_c	readonly_cache.cc	/^readonly_cache_c::~readonly_cache_c()$/;"	f	class:readonly_cache_c
~recovery_info_c	uop.h	/^    ~recovery_info_c() {}$/;"	f	class:recovery_info_c
~retire_c	retire.cc	/^retire_c::~retire_c()$/;"	f	class:retire_c
~rob_c	rob.cc	/^rob_c::~rob_c()$/;"	f	class:rob_c
~router_c	router.cc	/^router_c::~router_c()$/;"	f	class:router_c
~router_wrapper_c	router.cc	/^router_wrapper_c::~router_wrapper_c()$/;"	f	class:router_wrapper_c
~schedule_c	schedule.cc	/^schedule_c::~schedule_c()$/;"	f	class:schedule_c
~schedule_io_c	schedule_io.cc	/^schedule_io_c::~schedule_io_c(void)$/;"	f	class:schedule_io_c
~schedule_ooo_c	schedule_ooo.cc	/^schedule_ooo_c::~schedule_ooo_c(void)$/;"	f	class:schedule_ooo_c
~schedule_smc_c	schedule_smc.cc	/^schedule_smc_c::~schedule_smc_c(void) $/;"	f	class:schedule_smc_c
~smc_allocate_c	allocate_smc.cc	/^smc_allocate_c::~smc_allocate_c()$/;"	f	class:smc_allocate_c
~smc_rob_c	rob_smc.cc	/^smc_rob_c::~smc_rob_c()$/;"	f	class:smc_rob_c
~sw_managed_cache_c	sw_managed_cache.cc	/^sw_managed_cache_c::~sw_managed_cache_c()$/;"	f	class:sw_managed_cache_c
~thread_s	process_manager.cc	/^thread_s::~thread_s()$/;"	f	class:thread_s
~trace_read_c	trace_read.cc	/^trace_read_c::~trace_read_c()$/;"	f	class:trace_read_c
