***************
*** 797,802 ****
--- 731,744 ----
      }
  
  
+     // constd added
+     // for each cache access to llc, we should first update the BDCT in obm_c.
+     if(m_level == MEM_L2 && req->m_ptx)
+     {
+         Addr line_addr_unuse;
+         m_memory -> m_rht_cache[req -> m_core_id] -> access_rht(req -> m_addr, req -> m_pc,&line_addr_unuse);
+     }
+ 
      // -------------------------------------
      // Cache access
      // -------------------------------------
***************
*** 900,905 ****
--- 839,854 ----
      // Cache miss or Disabled cache
      // -------------------------------------
      else {
+       //cache miss in the cache 
+       // constd added        
+         if(m_level == MEM_L2 && req->m_ptx)
+         {
+             Addr line_addr_unuse;
+             m_memory -> m_rht_cache[req -> m_core_id] -> access_rht_on_cache_miss(req -> m_addr, req -> m_pc,&line_addr_unuse);
+             bool record_or_not = m_memory -> m_rht_cache[req -> m_core_id] -> record(req,line_addr_unuse);
+             req -> m_bypass = m_memory -> m_rht_cache[req -> m_core_id] -> bypass(req -> m_pc);
+         }
+ 
        // hardware prefetcher training
        if (!m_disable) {
          m_simBase->m_core_pointers[req->m_core_id]->train_hw_pref(m_level, req->m_thread_id, \
***************
*** 1770,1793 ****
--- 1601,1628 ----
    m_l1_cache = new dcu_c*[m_num_core]; 
    m_l2_cache = new dcu_c*[m_num_core]; 
    m_l3_cache = new dcu_c*[m_num_l3]; 
+   m_rht_cache = new obm_c*[m_num_core]; //constd added
  
    int id = 0;
    for (int ii = 0; ii < num_large_core; ++id, ++ii) {
      m_l1_cache[id] = new dcu_c(id, UNIT_LARGE, MEM_L1, this, id, m_l2_cache, NULL, simBase);
      m_l2_cache[id] = new dcu_c(id, UNIT_LARGE, MEM_L2, this, id + m_num_core, \
          m_l3_cache, m_l1_cache, simBase);
+     m_rht_cache[id] = new obm_c(id, this, simBase ); // constd added
    }
  
    for (int ii = 0; ii < num_medium_core; ++id, ++ii) {
      m_l1_cache[id] = new dcu_c(id, UNIT_MEDIUM, MEM_L1, this, id, m_l2_cache, NULL, simBase);
      m_l2_cache[id] = new dcu_c(id, UNIT_MEDIUM, MEM_L2, this, id + m_num_core, m_l3_cache, \
          m_l1_cache, simBase);
+     m_rht_cache[id] = new obm_c(id, this, simBase); // constd added
    }
  
    for (int ii = 0; ii < num_small_core; ++id, ++ii) {
      m_l1_cache[id] = new dcu_c(id, UNIT_SMALL, MEM_L1, this, id, m_l2_cache, NULL, simBase);
      m_l2_cache[id] = new dcu_c(id, UNIT_SMALL, MEM_L2, this, id + m_num_core, m_l3_cache, \
          m_l1_cache, simBase);
+     m_rht_cache[id] = new obm_c(id, this, simBase); // constd added
    }
  
  
***************
*** 1837,1842 ****
--- 1654,1660 ----
    for (int ii = 0; ii < m_num_core; ++ii) {
      delete m_l1_cache[ii];
      delete m_l2_cache[ii];
+     delete m_rht_cache[ii]; //constd added
      m_mshr_free_list[ii].clear();
      m_mshr[ii].clear(); } for (int ii = 0; ii < m_num_l3; ++ii) {
      delete m_l3_cache[ii];
***************
*** 1846,1851 ****
--- 1664,1670 ----
    delete[] m_mshr_free_list;
    delete[] m_l1_cache;
    delete[] m_l2_cache;
+   delete[] m_rht_cache; // constd added
    delete[] m_l3_cache;
  }
  
***************
*** 2716,2721 ****
--- 2446,2452 ----
      m_l1_cache[ii]->init(ii, -1, false, false, true, false, false);
      m_l2_cache[ii]->init(ii, ii, true,  true,  true, false, true);
      m_l3_cache[ii]->init(-1, ii, false, true,  false,false, true);
+     m_rht_cache[ii]->init(false, false);//constd added
    }
  }
  
***************
*** 2734,2739 ****
--- 2465,2471 ----
    for (int ii = 0; ii < m_num_core; ++ii) {
      m_l1_cache[ii]->init(ii, -1, false, false, true,  false, false);
      m_l2_cache[ii]->init(-1, ii, true,  true,  false, false, true);
+     m_rht_cache[ii]->init(false, false);//constd added
    }
  
    for (int ii = 0; ii < m_num_l3; ++ii) {
***************
*** 2757,2762 ****
--- 2489,2495 ----
    for (int ii = 0; ii < m_num_core; ++ii) {
      m_l1_cache[ii]->init(ii, -1, false, false, true,  false, true);
      m_l2_cache[ii]->init(ii, ii, true,  true,  true,  false, true);
+     m_rht_cache[ii]->init(false, false);//constd added
      m_l3_cache[ii]->init(-1, ii, false, true,  false, true,  true);
    }
  }
***************
*** 2787,2792 ****
--- 2520,2526 ----
      //                   next_id, next,  prev_id, prev,  done,  cup,   cdown, disable
      m_l1_cache[ii]->init(ii, -1, false, false, true,  true, false);
      m_l2_cache[ii]->init(ii, ii, true,  true,  true,  true, true);
+     m_rht_cache[ii]->init(false, false);//constd added
      m_l3_cache[ii]->init(-1, ii, false, true,  false, true, true);
    }
  }
***************
*** 2815,2820 ****
--- 2549,2555 ----
    for (int ii = 0; ii < m_num_core; ++ii) {
      m_l1_cache[ii]->init(ii, -1, false, false, true,  false, false);
      m_l2_cache[ii]->init(-1, ii, true,  true,  false, true,  true);
+     m_rht_cache[ii]->init(false, false);//constd added
    }
  
    for (int ii = 0; ii < m_num_l3; ++ii) { 
***************
*** 2863,2868 ****
--- 2582,2588 ----
    for (int ii = 0; ii < m_num_core; ++ii) {
      m_l1_cache[ii]->init(ii, -1, !HAS_DONE_FUNC, !ULINK,  DLINK,  ENABLE, !HAS_ROUTER);
      m_l2_cache[ii]->init(-1, ii,  HAS_DONE_FUNC,  ULINK, !DLINK, !ENABLE, !HAS_ROUTER);
+     m_rht_cache[ii]->init(false, false);//constd added
    }
  
    for (int ii = 0; ii < m_num_l3; ++ii) { 
***************
*** 2887,2890 ****
--- 2607,2910 ----
  
  
  ///////////////////////////////////////////////////////////////////////////////////////////////
+ //  \obm related function
+ ///////////////////////////////////////////////////////////////////////////////////////////////
+ 
+ //obm constructor
+ obm_c::obm_c(int id, memory_c* mem, macsim_c* simBase)
+ {
+     m_simBase  = simBase;
+     //obm cache paramter setting
+     m_num_set = 8;// can be replased by *m_simBase->m_knobs->KNOB_L1_SMALL_NUM_SET;
+     m_assoc   = 16;//same with above
+     m_line_size = 64;//same with above
+     m_banks   = 8;// same with above
+     m_latency = 1; // same with above
+     m_bypass  = false; // same with above
+     m_num_read_port = 8; // can be replaced by *KNOB(KNOB_L1_READ_PORTS);
+     m_num_write_port = 8;
+     m_probability = 0;
+     m_id      = id;
+     m_memory = mem;
+ 
+     m_cycle   = 0;
+ 
+ }
+ 
+ obm_c::~obm_c()
+ {
+     if(m_disable)
+         return ;
+     delete m_rht;
+     for(int ii = 0;ii< m_banks; ++ii)
+         delete m_port[ii];
+     delete[] m_port;
+ }
+ 
+ void obm_c::init(bool done, bool disable)
+ {
+     m_done      =    done;
+     m_disable   =    disable;
+ 
+     if(!m_disable)
+     {
+         m_rht = new rht_c("rht_cache", m_num_set, m_assoc, m_line_size, sizeof(rht_data_s), m_banks,false, m_id, CACHE_RHT,  m_simBase);
+ 
+         //allocate port 
+         m_port = new port_c* [m_banks];
+         for (int ii = 0; ii< m_banks; ++ii)
+         {
+             m_port[ii] = new port_c("rht_port", m_num_read_port, m_num_write_port, false, m_simBase);
+         }
+     }
+     
+     if (m_bypass == true)
+     {
+         m_disable = true;
+     }
+ }
+ 
+ 
+ // get line size
+ int obm_c:: line_size()
+ {
+     return m_line_size;
+ }
+ 
+ 
+ //get line address
+ Addr obm_c::base_addr(Addr addr)
+ {
+     return (addr & ~63);
+ }
+ 
+ // get bank id
+ int obm_c::bank_id(Addr addr)
+ {
+     return BANK(addr , m_banks, 256);
+ }
+ 
+ // acquire read port
+ int  obm_c::get_read_port(int bank_id)
+ {
+     return m_port[bank_id] -> get_read_port(m_cycle); 
+ }
+ 
+ //access the rht
+ bool obm_c::access_rht(Addr addr,Signature sig, Addr *line_addr)
+ {
+     vector<void*>::iterator iter;
+     vector<void*> vec = m_rht -> access_rht_set(addr);
+     
+     int set;
+     Addr tag;
+     m_rht->find_tag_and_set(addr, &tag, &set);
+ 
+     for (iter = vec.begin(); iter != vec.end();++iter)
+     {
+         //rht_data_s* data = (rht_data_s*) vec[iter];
+         rht_data_s* data = (rht_data_s*) *iter;
+         //if(line -> m_valid == false)
+         //    return false;
+         if( data -> m_ib_tag == tag )
+         {
+             map<Signature, int>::iterator itr = BDCT.find(sig);
+             if(itr == BDCT.end())
+             {
+                 BDCT[sig] = 0;
+             }
+             else
+             {
+                 BDCT[sig]--;
+             }
+             //invalid rht entry line
+             //m_rht -> invalidate_cache_line()
+             m_rht -> invalidate_cache_line(addr);
+             return true;
+         }
+         else
+         {
+             if (data -> m_vb_tag == tag)
+             {
+                 BDCT[sig]++;
+                 m_rht -> invalidate_cache_line(addr);
+                 return true;
+             }
+         }
+     }
+     //return (rht_data_s*)m_rht -> access_cache(addr, line_addr, false, -1);
+ }
+ 
+ //access rht in case of a cache miss occured in dcache
+ bool obm_c::access_rht_on_cache_miss(Addr addr, Signature sig, Addr *line_addr)
+ {
+     vector<void*>::iterator iter;
+     vector<void*> vec = m_rht -> access_rht_set(addr);
+     
+     int set;
+     Addr tag;
+     m_rht->find_tag_and_set(addr, &tag, &set);
+ 
+     for (iter = vec.begin(); iter != vec.end();++iter)
+     {
+         //rht_data_s* data = (rht_data_s*) vec[iter];
+         rht_data_s* data = (rht_data_s*) *iter;
+         //if(line -> m_valid == false)
+         //    return false;
+         if( data -> m_ib_tag == tag )
+         {
+                 BDCT[sig]++;
+             //invalid rht entry line
+             //m_rht -> invalidate_cache_line()
+             m_rht -> invalidate_cache_line(addr);
+             return true;
+         }
+     }
+     //return (rht_data_s*)m_rht -> access_cache(addr, line_addr, false, -1);
+ }
+ 
+ bool obm_c::record(mem_req_s* req,Addr repl_addr)
+ {
+     Addr demand_addr = req -> m_addr;
+     int set;
+     Addr tag;
+     int repl_set;
+     Addr repl_tag;
+ 
+     m_rht ->find_tag_and_set(demand_addr, &tag, &set);
+     m_rht ->find_tag_and_set(repl_addr, &repl_tag, &repl_set);
+ 
+     rht_data_s* data = (rht_data_s*)m_rht -> has_invalid_entry(demand_addr);
+     //has invalid cache entry in replacement history table
+     if(data)
+     {
+        data ->m_core_id = req ->m_core_id;
+        data ->m_pc      = req ->m_pc;
+        data ->m_ib_tag  = tag;
+        data ->m_vb_tag  = repl_tag;
+        data ->m_ib_signature = req -> m_pc; 
+        return true;
+     }
+     else
+     {
+         if(m_probability++ % 512 == 0)
+         {
+             Addr line_addr;
+             Addr updated_line;
+             rht_data_s* data = (rht_data_s*) m_rht -> insert_cache(demand_addr,&line_addr,&updated_line,-1,false,false); 
+             if(data)
+             {
+                data ->m_core_id = req ->m_core_id;
+                data ->m_pc      = req ->m_pc;
+                data ->m_ib_tag  = tag;
+                data ->m_vb_tag  = repl_tag;
+                data ->m_ib_signature = req -> m_pc; 
+                return true;
+             }
+         }
+     }
+     return false;
+ }
+ //check if the corresponding set has at least an invalid entry
+ //bool obm_c::has_invalid_entry(Addr addr, cache_entry_c* victim_line)
+ //{
+ //    int set ;
+ //    Addr tag;
+ //    
+ //    m_rht -> find_tag_and_set( addr, &tag, &set);
+ //
+ //    for(int ii = 0; ii < m_assoc; ++ii)
+ //    {
+ //        victim_line  = &(m_rht -> m_set[set] -> m_entry[ii]);
+ //        if (!victim_line -> m_valid)
+ //        {
+ //            //assert(line -> m_data);
+ //            return true;
+ //        }
+ //    }
+ //
+ //    return false;
+ //}
+ 
+ // according to the given address , select a victim from the correspoding set
+ //bool obm_c::select_victim(Addr addr, cache_entry_c* victim_line)
+ //{
+ //    int set;
+ //    Addr addr;
+ //    //cache_entry_c* victim_line;
+ //
+ //    m_rht -> find_tag_and_set(addr, &tag, &set);
+ //    victim_line = m_rht -> find_replacement_line(set,-1); //appl_id is -1 here
+ //    if (victim_line)
+ //        return true;
+ //}
+ 
+ // if record addr then return the victim line address
+ //bool obm_c::record(Addr addr, cache_entry_c* victim_line )
+ //{
+ //    if (has_invalid_entry(addr,&victim_line))
+ //    {
+ //        return true;
+ //    }
+ //    else 
+ //    {
+ //        //do some random selection and then return the cache_entry_c  
+ //        //if(random_function() > given_gailv)
+ //        //{
+ //            return select_victim(addr,&victim_line);
+ //        //}
+ //    }
+ //
+ //    return NULL;
+ //}
+ 
+ //insert a new line in replacement history table
+ //void obm_c::insert(Addr demand_access, Signature sig, Addr pc)
+ //{
+ //    int set;
+ //    Addr tag;
+ //    m_rht -> find_tag_and_set(demand_access, &tag, &set);
+ //
+ //    cache_entry_c* ins_line ;
+ //    if(record(addr,ins_line))
+ //    {
+ //        
+ //        //initialize the obm rht structure rht_data_s
+ //        rht_data_s* rht_data;
+ //        rht_data -> m_fetch_cycle = CYCLE;
+ //        rht_data -> m_pc         = pc;
+ //        rht_data -> m_ib_tag     = tag;
+ //        rht_data -> m_vb_tag     = ins_line -> m_tag;
+ //        rht_data -> m_ib_signature = sig;
+ //        
+ //
+ //        //initialize a rht cache line
+ //        ins_line -> m_valid      = true;
+ //        ins_line -> m_tag        = tag;
+ //        ins_line -> m_base       = (addr & ~(m_rht -> m_offset_mask));
+ //        ins_line -> m_access_counter = 0;
+ //        ins_line -> m_last_access_time = CYCLE;
+ //        ins_line -> m_pref       = false;
+ //        ins_line -> m_skip       = false;
+ //        ins_line -> m_data       = rht_data;
+ //    }
+ //}
+ 
+ //check whether the given signature bypass llc or not
+ bool obm_c::bypass(Signature sig)
+ {
+     map<Signature,int>::iterator iter = BDCT.end();
+     if (BDCT.find(sig) == iter)
+     {
+         return false;
+     }
+     else if(BDCT[sig] >= 0)
+     {
+         return true;
+     }
+     else
+     {
+         return false;
+     }
+ }
